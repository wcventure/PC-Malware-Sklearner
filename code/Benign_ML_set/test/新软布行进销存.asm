.text:00401000 ;
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ; |   This file has been	generated by The Interactive Disassembler (IDA)	   |
.text:00401000 ; |	     Copyright (c) 2015	Hex-Rays, <support@hex-rays.com>	   |
.text:00401000 ; |			License	info: 48-B611-7234-BB			   |
.text:00401000 ; |	       Doskey Lee, Kingsoft Internet Security Software		   |
.text:00401000 ; +-------------------------------------------------------------------------+
.text:00401000 ;
.text:00401000 ; Input MD5   : F8C0C913137D822D9E7AF67844F96BFF
.text:00401000 ; Input CRC32 : F57E0AE9
.text:00401000
.text:00401000 ; File Name   : E:\Ѹ������\��ҵ���\������н�����.exe
.text:00401000 ; Format	     : Portable	executable for 80386 (PE)
.text:00401000 ; Imagebase   : 400000
.text:00401000 ; Section 1. (virtual address 00001000)
.text:00401000 ; Virtual size		       : 0000489A (  18586.)
.text:00401000 ; Section size in file	       : 00005000 (  20480.)
.text:00401000 ; Offset	to raw data for	section: 00001000
.text:00401000 ; Flags 60000020: Text Executable Readable
.text:00401000 ; Alignment     : default
.text:00401000 ; OS type	 :  MS Windows
.text:00401000 ; Application type:  Executable 32bit
.text:00401000
.text:00401000		       include uni.inc ; see unicode subdir of ida for info on unicode
.text:00401000
.text:00401000		       .686p
.text:00401000		       .mmx
.text:00401000		       .model flat
.text:00401000
.text:00401000 ; ===========================================================================
.text:00401000
.text:00401000 ; Segment type: Pure code
.text:00401000 ; Segment permissions: Read/Execute
.text:00401000 _text	       segment para public 'CODE' use32
.text:00401000		       assume cs:_text
.text:00401000		       ;org 401000h
.text:00401000		       assume es:nothing, ss:nothing, ds:_data,	fs:nothing, gs:nothing
.text:00401000
.text:00401000 ; =============== S U B R O U T I N E =======================================
.text:00401000
.text:00401000 ; Attributes: bp-based frame
.text:00401000
.text:00401000 ; int __stdcall WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)
.text:00401000 _WinMain@16     proc near	       ; CODE XREF: start+DBp
.text:00401000
.text:00401000 var_153C	       = byte ptr -153Ch
.text:00401000 Text	       = byte ptr -1538h
.text:00401000 String1	       = byte ptr -0D38h
.text:00401000 var_538	       = byte ptr -538h
.text:00401000 var_434	       = dword ptr -434h
.text:00401000 String	       = byte ptr -110h
.text:00401000 var_10F	       = byte ptr -10Fh
.text:00401000 var_10E	       = byte ptr -10Eh
.text:00401000 var_10D	       = byte ptr -10Dh
.text:00401000 hInstance       = dword ptr  8
.text:00401000 hPrevInstance   = dword ptr  0Ch
.text:00401000 lpCmdLine       = dword ptr  10h
.text:00401000 nShowCmd	       = dword ptr  14h
.text:00401000
.text:00401000		       push    ebp
.text:00401001		       mov     ebp, esp
.text:00401003		       mov     eax, 153Ch
.text:00401008		       call    __alloca_probe
.text:0040100D		       push    ebx
.text:0040100E		       push    esi
.text:0040100F		       push    edi
.text:00401010		       xor     edi, edi
.text:00401012		       push    7F02h	       ; lpCursorName
.text:00401017		       push    edi	       ; hInstance
.text:00401018		       mov     dword_409C18, edi
.text:0040101E		       call    ds:LoadCursorA
.text:00401024		       push    eax	       ; hCursor
.text:00401025		       call    ds:SetCursor
.text:0040102B		       lea     ecx, [ebp+var_153C]
.text:00401031		       call    sub_40119D
.text:00401036		       mov     esi, 800h
.text:0040103B		       lea     eax, [ebp+String1]
.text:00401041		       push    esi	       ; size_t
.text:00401042		       push    edi	       ; int
.text:00401043		       push    eax	       ; void *
.text:00401044		       call    _memset
.text:00401049		       mov     ebx, ds:lstrlenA
.text:0040104F		       add     esp, 0Ch
.text:00401052		       push    [ebp+lpCmdLine] ; lpString
.text:00401055		       call    ebx ; lstrlenA
.text:00401057		       cmp     eax, esi
.text:00401059		       jge     short loc_40106B
.text:0040105B		       push    [ebp+lpCmdLine] ; lpString2
.text:0040105E		       lea     eax, [ebp+String1]
.text:00401064		       push    eax	       ; lpString1
.text:00401065		       call    ds:lstrcpyA
.text:0040106B
.text:0040106B loc_40106B:			       ; CODE XREF: WinMain(x,x,x,x)+59j
.text:0040106B		       push    10Eh	       ; size_t
.text:00401070		       lea     eax, [ebp+var_538]
.text:00401076		       push    edi	       ; int
.text:00401077		       push    eax	       ; void *
.text:00401078		       mov     [ebp+var_434], edi
.text:0040107E		       call    _memset
.text:00401083		       add     esp, 0Ch
.text:00401086		       cmp     dword_409C30, edi
.text:0040108C		       mov     [ebp+lpCmdLine],	edi
.text:0040108F		       jle     loc_40115D
.text:00401095
.text:00401095 loc_401095:			       ; CODE XREF: WinMain(x,x,x,x)+157j
.text:00401095		       mov     eax, dword_409C34
.text:0040109A		       mov     ecx, [ebp+lpCmdLine]
.text:0040109D		       push    dword ptr [eax+ecx*4] ; lpString2
.text:004010A0		       lea     eax, [ebp+String]
.text:004010A6		       push    eax	       ; lpString1
.text:004010A7		       call    ds:lstrcpyA
.text:004010AD		       cmp     [ebp+String], 2Fh
.text:004010B4		       jnz     short loc_40112B
.text:004010B6		       mov     al, [ebp+var_10F]
.text:004010BC		       cmp     al, 54h
.text:004010BE		       jz      short loc_4010E6
.text:004010C0		       cmp     al, 57h
.text:004010C2		       jz      short loc_4010CC
.text:004010C4		       cmp     al, 74h
.text:004010C6		       jz      short loc_4010E6
.text:004010C8		       cmp     al, 77h
.text:004010CA		       jnz     short loc_40112B
.text:004010CC
.text:004010CC loc_4010CC:			       ; CODE XREF: WinMain(x,x,x,x)+C2j
.text:004010CC		       lea     eax, [ebp+String]
.text:004010D2		       push    eax	       ; lpString
.text:004010D3		       call    ebx ; lstrlenA
.text:004010D5		       cmp     eax, 2
.text:004010D8		       jnz     short loc_40112B
.text:004010DA		       mov     [ebp+var_434], 1
.text:004010E4		       jmp     short loc_40112B
.text:004010E6 ; ---------------------------------------------------------------------------
.text:004010E6
.text:004010E6 loc_4010E6:			       ; CODE XREF: WinMain(x,x,x,x)+BEj
.text:004010E6					       ; WinMain(x,x,x,x)+C6j
.text:004010E6		       lea     eax, [ebp+String]
.text:004010EC		       push    eax	       ; lpString
.text:004010ED		       call    ebx ; lstrlenA
.text:004010EF		       cmp     eax, 3
.text:004010F2		       jle     short loc_40112B
.text:004010F4		       cmp     [ebp+var_10E], 3Ah
.text:004010FB		       jnz     short loc_40112B
.text:004010FD		       cmp     eax, 3
.text:00401100		       jle     short loc_40112B
.text:00401102		       lea     ecx, [eax-3]
.text:00401105		       lea     esi, [ebp+var_10D]
.text:0040110B		       mov     edx, ecx
.text:0040110D		       lea     edi, [ebp+var_538]
.text:00401113		       shr     ecx, 2
.text:00401116		       rep movsd
.text:00401118		       mov     ecx, edx
.text:0040111A		       and     ecx, 3
.text:0040111D		       rep movsb
.text:0040111F		       xor     ecx, ecx
.text:00401121
.text:00401121 loc_401121:			       ; CODE XREF: WinMain(x,x,x,x)+127j
.text:00401121		       inc     ecx
.text:00401122		       lea     edx, [ecx+3]
.text:00401125		       cmp     edx, eax
.text:00401127		       jl      short loc_401121
.text:00401129		       xor     edi, edi
.text:0040112B
.text:0040112B loc_40112B:			       ; CODE XREF: WinMain(x,x,x,x)+B4j
.text:0040112B					       ; WinMain(x,x,x,x)+CAj ...
.text:0040112B		       lea     eax, [ebp+String]
.text:00401131		       push    offset String2  ; "/~DBG"
.text:00401136		       push    eax	       ; lpString1
.text:00401137		       call    ds:lstrcmpiA
.text:0040113D		       test    eax, eax
.text:0040113F		       jnz     short loc_40114B
.text:00401141		       mov     dword_409C18, 1
.text:0040114B
.text:0040114B loc_40114B:			       ; CODE XREF: WinMain(x,x,x,x)+13Fj
.text:0040114B		       inc     [ebp+lpCmdLine]
.text:0040114E		       mov     eax, [ebp+lpCmdLine]
.text:00401151		       cmp     eax, dword_409C30
.text:00401157		       jl      loc_401095
.text:0040115D
.text:0040115D loc_40115D:			       ; CODE XREF: WinMain(x,x,x,x)+8Fj
.text:0040115D		       lea     ecx, [ebp+var_153C]
.text:00401163		       call    sub_40121C
.text:00401168		       mov     esi, eax
.text:0040116A		       cmp     esi, 32h
.text:0040116D		       jl      short loc_401189
.text:0040116F		       cmp     esi, 64h
.text:00401172		       jge     short loc_401189
.text:00401174		       push    10h	       ; uType
.text:00401176		       lea     eax, [ebp+Text]
.text:0040117C		       push    offset Caption  ; "Launcher Error"
.text:00401181		       push    eax	       ; lpText
.text:00401182		       push    edi	       ; hWnd
.text:00401183		       call    ds:MessageBoxA
.text:00401189
.text:00401189 loc_401189:			       ; CODE XREF: WinMain(x,x,x,x)+16Dj
.text:00401189					       ; WinMain(x,x,x,x)+172j
.text:00401189		       lea     ecx, [ebp+var_153C]
.text:0040118F		       call    sub_401203
.text:00401194		       mov     eax, esi
.text:00401196		       pop     edi
.text:00401197		       pop     esi
.text:00401198		       pop     ebx
.text:00401199		       leave
.text:0040119A		       retn    10h
.text:0040119A _WinMain@16     endp
.text:0040119A
.text:0040119D
.text:0040119D ; =============== S U B R O U T I N E =======================================
.text:0040119D
.text:0040119D
.text:0040119D sub_40119D      proc near	       ; CODE XREF: WinMain(x,x,x,x)+31p
.text:0040119D		       push    esi
.text:0040119E		       mov     esi, ecx
.text:004011A0		       push    edi
.text:004011A1		       xor     edi, edi
.text:004011A3		       push    104h	       ; size_t
.text:004011A8		       lea     eax, [esi+1004h]
.text:004011AE		       push    edi	       ; int
.text:004011AF		       push    eax	       ; void *
.text:004011B0		       mov     dword ptr [esi],	offset off_406140
.text:004011B6		       mov     [esi+1418h], edi
.text:004011BC		       mov     [esi+1424h], edi
.text:004011C2		       mov     [esi+141Ch], edi
.text:004011C8		       mov     [esi+1420h], edi
.text:004011CE		       call    _memset
.text:004011D3		       add     esp, 0Ch
.text:004011D6		       mov     [esi+1108h], edi
.text:004011DC		       mov     [esi+1428h], edi
.text:004011E2		       mov     eax, esi
.text:004011E4		       pop     edi
.text:004011E5		       pop     esi
.text:004011E6		       retn
.text:004011E6 sub_40119D      endp
.text:004011E6
.text:004011E7
.text:004011E7 ; =============== S U B R O U T I N E =======================================
.text:004011E7
.text:004011E7
.text:004011E7 sub_4011E7      proc near	       ; DATA XREF: .rdata:off_406140o
.text:004011E7
.text:004011E7 arg_0	       = byte ptr  4
.text:004011E7
.text:004011E7		       push    esi
.text:004011E8		       mov     esi, ecx
.text:004011EA		       call    sub_401203
.text:004011EF		       test    [esp+4+arg_0], 1
.text:004011F4		       jz      short loc_4011FD
.text:004011F6		       push    esi
.text:004011F7		       call    sub_401B6F
.text:004011FC		       pop     ecx
.text:004011FD
.text:004011FD loc_4011FD:			       ; CODE XREF: sub_4011E7+Dj
.text:004011FD		       mov     eax, esi
.text:004011FF		       pop     esi
.text:00401200		       retn    4
.text:00401200 sub_4011E7      endp
.text:00401200
.text:00401203
.text:00401203 ; =============== S U B R O U T I N E =======================================
.text:00401203
.text:00401203
.text:00401203 sub_401203      proc near	       ; CODE XREF: WinMain(x,x,x,x)+18Fp
.text:00401203					       ; sub_4011E7+3p
.text:00401203		       mov     dword ptr [ecx],	offset off_406140
.text:00401209		       mov     ecx, [ecx+1418h]
.text:0040120F		       cmp     ecx, 0FFFFFFFFh
.text:00401212		       jz      short locret_40121B
.text:00401214		       push    ecx	       ; hFile
.text:00401215		       call    ds:_lclose
.text:0040121B
.text:0040121B locret_40121B:			       ; CODE XREF: sub_401203+Fj
.text:0040121B		       retn
.text:0040121B sub_401203      endp
.text:0040121B
.text:0040121C
.text:0040121C ; =============== S U B R O U T I N E =======================================
.text:0040121C
.text:0040121C
.text:0040121C sub_40121C      proc near	       ; CODE XREF: WinMain(x,x,x,x)+163p
.text:0040121C		       push    esi
.text:0040121D		       push    edi
.text:0040121E		       mov     esi, ecx
.text:00401220		       call    sub_40127D
.text:00401225		       mov     ecx, esi
.text:00401227		       call    sub_401292
.text:0040122C		       mov     edi, eax
.text:0040122E		       test    edi, edi
.text:00401230		       jnz     short loc_401255
.text:00401232		       mov     ecx, esi
.text:00401234		       call    sub_4013E3
.text:00401239		       mov     edi, eax
.text:0040123B		       test    edi, edi
.text:0040123D		       jnz     short loc_401255
.text:0040123F		       mov     ecx, esi
.text:00401241		       call    sub_401674
.text:00401246		       mov     edi, eax
.text:00401248		       test    edi, edi
.text:0040124A		       jnz     short loc_401255
.text:0040124C		       mov     ecx, esi
.text:0040124E		       call    sub_4017EE
.text:00401253		       mov     edi, eax
.text:00401255
.text:00401255 loc_401255:			       ; CODE XREF: sub_40121C+14j
.text:00401255					       ; sub_40121C+21j ...
.text:00401255		       cmp     dword_409C18, 0
.text:0040125C		       jnz     short loc_401278
.text:0040125E		       lea     eax, [esi+1210h]
.text:00401264		       push    eax	       ; lpFileName
.text:00401265		       call    ds:DeleteFileA
.text:0040126B		       add     esi, 1314h
.text:00401271		       push    esi	       ; lpPathName
.text:00401272		       call    ds:RemoveDirectoryA
.text:00401278
.text:00401278 loc_401278:			       ; CODE XREF: sub_40121C+40j
.text:00401278		       mov     eax, edi
.text:0040127A		       pop     edi
.text:0040127B		       pop     esi
.text:0040127C		       retn
.text:0040127C sub_40121C      endp
.text:0040127C
.text:0040127D
.text:0040127D ; =============== S U B R O U T I N E =======================================
.text:0040127D
.text:0040127D
.text:0040127D sub_40127D      proc near	       ; CODE XREF: sub_40121C+4p
.text:0040127D		       add     ecx, 110Ch
.text:00401283		       push    104h	       ; nSize
.text:00401288		       push    ecx	       ; lpFilename
.text:00401289		       push    0	       ; hModule
.text:0040128B		       call    ds:GetModuleFileNameA
.text:00401291		       retn
.text:00401291 sub_40127D      endp
.text:00401291
.text:00401292
.text:00401292 ; =============== S U B R O U T I N E =======================================
.text:00401292
.text:00401292
.text:00401292 sub_401292      proc near	       ; CODE XREF: sub_40121C+Bp
.text:00401292
.text:00401292 lpMem	       = dword ptr -4
.text:00401292
.text:00401292		       push    ecx
.text:00401293		       push    ebx
.text:00401294		       push    ebp
.text:00401295		       push    esi
.text:00401296		       mov     esi, ecx
.text:00401298		       xor     ebp, ebp
.text:0040129A		       push    edi
.text:0040129B		       lea     eax, [esi+110Ch]
.text:004012A1		       push    ebp	       ; iReadWrite
.text:004012A2		       push    eax	       ; lpPathName
.text:004012A3		       mov     [esp+1Ch+lpMem],	ebp
.text:004012A7		       call    ds:_lopen
.text:004012AD		       cmp     eax, 0FFFFFFFFh
.text:004012B0		       mov     [esi+1418h], eax
.text:004012B6		       jnz     short loc_4012D8
.text:004012B8		       add     esi, 4
.text:004012BB		       push    offset aUnableToOpenAr ;	"Unable	to open	archive	file"
.text:004012C0		       push    esi	       ; lpString1
.text:004012C1		       call    ds:lstrcpyA
.text:004012C7		       mov     [esp+14h+lpMem],	32h
.text:004012CF		       mov     edi, [esp+14h+lpMem]
.text:004012D3		       jmp     loc_4013D2
.text:004012D8 ; ---------------------------------------------------------------------------
.text:004012D8
.text:004012D8 loc_4012D8:			       ; CODE XREF: sub_401292+24j
.text:004012D8		       mov     ebx, 1F400h
.text:004012DD		       push    ebx	       ; size_t
.text:004012DE		       call    _malloc
.text:004012E3		       mov     edi, eax
.text:004012E5		       pop     ecx
.text:004012E6		       cmp     edi, ebp
.text:004012E8		       jnz     short loc_401306
.text:004012EA		       add     esi, 4
.text:004012ED		       push    offset aUnableToAlloca ;	"Unable	to allocate memory buffer"
.text:004012F2		       push    esi	       ; lpString1
.text:004012F3		       call    ds:lstrcpyA
.text:004012F9		       mov     [esp+14h+lpMem],	33h
.text:00401301		       jmp     loc_4013D2
.text:00401306 ; ---------------------------------------------------------------------------
.text:00401306
.text:00401306 loc_401306:			       ; CODE XREF: sub_401292+56j
.text:00401306		       push    ebp	       ; iOrigin
.text:00401307		       mov     ebp, ds:_llseek
.text:0040130D		       push    7D00h	       ; lOffset
.text:00401312		       push    dword ptr [esi+1418h] ; hFile
.text:00401318		       call    ebp ; _llseek
.text:0040131A		       push    ebx	       ; uBytes
.text:0040131B		       mov     ebx, ds:_lread
.text:00401321		       push    edi	       ; lpBuffer
.text:00401322		       push    dword ptr [esi+1418h] ; hFile
.text:00401328		       call    ebx ; _lread
.text:0040132A		       xor     ecx, ecx
.text:0040132C		       test    eax, eax
.text:0040132E		       jbe     short loc_40136C
.text:00401330
.text:00401330 loc_401330:			       ; CODE XREF: sub_401292+D8j
.text:00401330		       cmp     byte ptr	[ecx+edi], 0E0h
.text:00401334		       jnz     short loc_401367
.text:00401336		       cmp     byte ptr	[ecx+edi+1], 0E1h
.text:0040133B		       jnz     short loc_401367
.text:0040133D		       cmp     byte ptr	[ecx+edi+2], 0E2h
.text:00401342		       jnz     short loc_401367
.text:00401344		       cmp     byte ptr	[ecx+edi+3], 0E3h
.text:00401349		       jnz     short loc_401367
.text:0040134B		       cmp     byte ptr	[ecx+edi+4], 0E4h
.text:00401350		       jnz     short loc_401367
.text:00401352		       cmp     byte ptr	[ecx+edi+5], 0E5h
.text:00401357		       jnz     short loc_401367
.text:00401359		       cmp     byte ptr	[ecx+edi+6], 0E6h
.text:0040135E		       jnz     short loc_401367
.text:00401360		       cmp     byte ptr	[ecx+edi+7], 0E7h
.text:00401365		       jz      short loc_401385
.text:00401367
.text:00401367 loc_401367:			       ; CODE XREF: sub_401292+A2j
.text:00401367					       ; sub_401292+A9j ...
.text:00401367		       inc     ecx
.text:00401368		       cmp     ecx, eax
.text:0040136A		       jb      short loc_401330
.text:0040136C
.text:0040136C loc_40136C:			       ; CODE XREF: sub_401292+9Cj
.text:0040136C		       add     esi, 4
.text:0040136F		       push    offset aCouldNotFindDa ;	"Could not find	data segment"
.text:00401374		       push    esi	       ; lpString1
.text:00401375		       call    ds:lstrcpyA
.text:0040137B		       mov     [esp+14h+lpMem],	34h
.text:00401383		       jmp     short loc_4013D2
.text:00401385 ; ---------------------------------------------------------------------------
.text:00401385
.text:00401385 loc_401385:			       ; CODE XREF: sub_401292+D3j
.text:00401385		       lea     eax, [ecx+7D08h]
.text:0040138B		       push    0	       ; iOrigin
.text:0040138D		       push    eax	       ; lOffset
.text:0040138E		       mov     [esi+141Ch], eax
.text:00401394		       push    dword ptr [esi+1418h] ; hFile
.text:0040139A		       call    ebp ; _llseek
.text:0040139C		       lea     eax, [esi+1420h]
.text:004013A2		       push    4	       ; uBytes
.text:004013A4		       push    eax	       ; lpBuffer
.text:004013A5		       push    dword ptr [esi+1418h] ; hFile
.text:004013AB		       call    ebx ; _lread
.text:004013AD		       cmp     eax, 4
.text:004013B0		       jz      short loc_4013CB
.text:004013B2		       add     esi, 4
.text:004013B5		       push    offset aCouldNotFindSe ;	"Could not find	setup size"
.text:004013BA		       push    esi	       ; lpString1
.text:004013BB		       call    ds:lstrcpyA
.text:004013C1		       mov     [esp+14h+lpMem],	35h
.text:004013C9		       jmp     short loc_4013D2
.text:004013CB ; ---------------------------------------------------------------------------
.text:004013CB
.text:004013CB loc_4013CB:			       ; CODE XREF: sub_401292+11Ej
.text:004013CB		       add     dword ptr [esi+141Ch], 4
.text:004013D2
.text:004013D2 loc_4013D2:			       ; CODE XREF: sub_401292+41j
.text:004013D2					       ; sub_401292+6Fj ...
.text:004013D2		       push    edi	       ; lpMem
.text:004013D3		       call    sub_401B7A
.text:004013D8		       mov     eax, [esp+18h+lpMem]
.text:004013DC		       pop     ecx
.text:004013DD		       pop     edi
.text:004013DE		       pop     esi
.text:004013DF		       pop     ebp
.text:004013E0		       pop     ebx
.text:004013E1		       pop     ecx
.text:004013E2		       retn
.text:004013E2 sub_401292      endp
.text:004013E2
.text:004013E3
.text:004013E3 ; =============== S U B R O U T I N E =======================================
.text:004013E3
.text:004013E3 ; Attributes: bp-based frame
.text:004013E3
.text:004013E3 sub_4013E3      proc near	       ; CODE XREF: sub_40121C+18p
.text:004013E3
.text:004013E3 Buffer	       = byte ptr -430h
.text:004013E3 FileName	       = byte ptr -32Ch
.text:004013E3 PathName	       = byte ptr -228h
.text:004013E3 var_125	       = byte ptr -125h
.text:004013E3 String1	       = byte ptr -124h
.text:004013E3 var_123	       = byte ptr -123h
.text:004013E3 var_122	       = byte ptr -122h
.text:004013E3 TotalNumberOfClusters= dword ptr	-20h
.text:004013E3 SectorsPerCluster= dword	ptr -1Ch
.text:004013E3 NumberOfFreeClusters= dword ptr -18h
.text:004013E3 BytesPerSector  = dword ptr -14h
.text:004013E3 var_10	       = dword ptr -10h
.text:004013E3 var_C	       = dword ptr -0Ch
.text:004013E3 var_8	       = dword ptr -8
.text:004013E3 RootPathName    = byte ptr -4
.text:004013E3 var_3	       = byte ptr -3
.text:004013E3 var_2	       = byte ptr -2
.text:004013E3 var_1	       = byte ptr -1
.text:004013E3
.text:004013E3		       push    ebp
.text:004013E4		       mov     ebp, esp
.text:004013E6		       sub     esp, 430h
.text:004013EC		       and     [ebp+var_C], 0
.text:004013F0		       push    ebx
.text:004013F1		       push    esi
.text:004013F2		       lea     eax, [ebp+Buffer]
.text:004013F8		       push    edi
.text:004013F9		       mov     esi, 104h
.text:004013FE		       mov     edi, ecx
.text:00401400		       push    eax	       ; lpBuffer
.text:00401401		       push    esi	       ; nBufferLength
.text:00401402		       mov     [ebp+var_10], edi
.text:00401405		       call    ds:GetCurrentDirectoryA
.text:0040140B		       push    esi	       ; size_t
.text:0040140C		       lea     eax, [ebp+String1]
.text:00401412		       push    0	       ; int
.text:00401414		       push    eax	       ; void *
.text:00401415		       call    _memset
.text:0040141A		       add     esp, 0Ch
.text:0040141D		       lea     eax, [ebp+String1]
.text:00401423		       push    eax	       ; lpBuffer
.text:00401424		       push    esi	       ; nBufferLength
.text:00401425		       call    ds:GetTempPathA
.text:0040142B		       mov     ebx, ds:lstrlenA
.text:00401431		       lea     esi, [edi+1004h]
.text:00401437		       push    esi	       ; lpString
.text:00401438		       call    ebx ; lstrlenA
.text:0040143A		       cmp     eax, 2
.text:0040143D		       jle     short loc_401459
.text:0040143F		       push    esi	       ; lpString
.text:00401440		       mov     ecx, edi
.text:00401442		       call    sub_401737
.text:00401447		       test    eax, eax
.text:00401449		       jz      short loc_401459
.text:0040144B		       lea     eax, [ebp+String1]
.text:00401451		       push    esi	       ; lpString2
.text:00401452		       push    eax	       ; lpString1
.text:00401453		       call    ds:lstrcpyA
.text:00401459
.text:00401459 loc_401459:			       ; CODE XREF: sub_4013E3+5Aj
.text:00401459					       ; sub_4013E3+66j
.text:00401459		       lea     eax, [ebp+String1]
.text:0040145F		       push    eax	       ; lpString
.text:00401460		       call    ebx ; lstrlenA
.text:00401462		       cmp     [ebp+eax+var_125], 5Ch
.text:0040146A		       jz      short loc_40147E
.text:0040146C		       lea     eax, [ebp+String1]
.text:00401472		       push    offset asc_40718C ; "\\"
.text:00401477		       push    eax	       ; lpString1
.text:00401478		       call    ds:lstrcatA
.text:0040147E
.text:0040147E loc_40147E:			       ; CODE XREF: sub_4013E3+87j
.text:0040147E		       mov     esi, ds:wsprintfA
.text:00401484		       and     [ebp+var_8], 0
.text:00401488		       push    0
.text:0040148A		       lea     eax, [ebp+String1]
.text:00401490		       push    offset a_ir_sf7_temp ; "_ir_sf7_temp"
.text:00401495		       push    eax
.text:00401496		       lea     eax, [ebp+PathName]
.text:0040149C		       push    offset aSS_D    ; "%s%s_%d"
.text:004014A1		       push    eax	       ; LPSTR
.text:004014A2		       call    esi ; wsprintfA
.text:004014A4		       lea     eax, [ebp+PathName]
.text:004014AA		       push    eax
.text:004014AB		       lea     eax, [ebp+FileName]
.text:004014B1		       push    offset aSIrsetup_exe ; "%s\\irsetup.exe"
.text:004014B6		       push    eax	       ; LPSTR
.text:004014B7		       call    esi ; wsprintfA
.text:004014B9		       mov     edi, ds:DeleteFileA
.text:004014BF		       add     esp, 20h
.text:004014C2		       lea     eax, [ebp+FileName]
.text:004014C8		       push    eax	       ; lpFileName
.text:004014C9		       call    edi ; DeleteFileA
.text:004014CB		       mov     ebx, ds:RemoveDirectoryA
.text:004014D1		       jmp     short loc_401514
.text:004014D3 ; ---------------------------------------------------------------------------
.text:004014D3
.text:004014D3 loc_4014D3:			       ; CODE XREF: sub_4013E3+14Aj
.text:004014D3		       inc     [ebp+var_8]
.text:004014D6		       lea     eax, [ebp+String1]
.text:004014DC		       push    [ebp+var_8]
.text:004014DF		       push    offset a_ir_sf7_temp ; "_ir_sf7_temp"
.text:004014E4		       push    eax
.text:004014E5		       lea     eax, [ebp+PathName]
.text:004014EB		       push    offset aSS_D    ; "%s%s_%d"
.text:004014F0		       push    eax	       ; LPSTR
.text:004014F1		       call    esi ; wsprintfA
.text:004014F3		       lea     eax, [ebp+PathName]
.text:004014F9		       push    eax
.text:004014FA		       lea     eax, [ebp+FileName]
.text:00401500		       push    offset aSIrsetup_exe ; "%s\\irsetup.exe"
.text:00401505		       push    eax	       ; LPSTR
.text:00401506		       call    esi ; wsprintfA
.text:00401508		       add     esp, 20h
.text:0040150B		       lea     eax, [ebp+FileName]
.text:00401511		       push    eax	       ; lpFileName
.text:00401512		       call    edi ; DeleteFileA
.text:00401514
.text:00401514 loc_401514:			       ; CODE XREF: sub_4013E3+EEj
.text:00401514		       lea     eax, [ebp+PathName]
.text:0040151A		       push    eax	       ; lpPathName
.text:0040151B		       call    ebx ; RemoveDirectoryA
.text:0040151D		       lea     eax, [ebp+PathName]
.text:00401523		       push    eax	       ; lpFileName
.text:00401524		       call    ds:GetFileAttributesA
.text:0040152A		       cmp     eax, 0FFFFFFFFh
.text:0040152D		       jnz     short loc_4014D3
.text:0040152F		       mov     edi, ds:CreateDirectoryA
.text:00401535		       lea     eax, [ebp+PathName]
.text:0040153B		       push    0	       ; lpSecurityAttributes
.text:0040153D		       push    eax	       ; lpPathName
.text:0040153E		       call    edi ; CreateDirectoryA
.text:00401540		       mov     esi, ds:lstrcpyA
.text:00401546		       lea     eax, [ebp+PathName]
.text:0040154C		       push    eax	       ; lpString2
.text:0040154D		       lea     eax, [ebp+String1]
.text:00401553		       push    eax	       ; lpString1
.text:00401554		       call    esi ; lstrcpyA
.text:00401556		       mov     ebx, ds:SetCurrentDirectoryA
.text:0040155C		       lea     eax, [ebp+String1]
.text:00401562		       push    eax	       ; lpPathName
.text:00401563		       call    ebx ; SetCurrentDirectoryA
.text:00401565		       test    eax, eax
.text:00401567		       jnz     short loc_401582
.text:00401569		       lea     eax, [ebp+String1]
.text:0040156F		       push    offset aCTemp   ; "c:\\temp"
.text:00401574		       push    eax	       ; lpString1
.text:00401575		       call    esi ; lstrcpyA
.text:00401577		       lea     eax, [ebp+String1]
.text:0040157D		       push    0	       ; lpSecurityAttributes
.text:0040157F		       push    eax	       ; lpPathName
.text:00401580		       call    edi ; CreateDirectoryA
.text:00401582
.text:00401582 loc_401582:			       ; CODE XREF: sub_4013E3+184j
.text:00401582		       lea     eax, [ebp+String1]
.text:00401588		       push    eax	       ; lpPathName
.text:00401589		       call    ebx ; SetCurrentDirectoryA
.text:0040158B		       mov     edi, [ebp+var_10]
.text:0040158E		       test    eax, eax
.text:00401590		       jnz     short loc_4015A4
.text:00401592		       lea     eax, [edi+4]
.text:00401595		       push    offset aCouldNotDeterm ;	"Could not determine a temp directory na"...
.text:0040159A		       push    eax	       ; lpString1
.text:0040159B		       call    esi ; lstrcpyA
.text:0040159D		       mov     [ebp+var_C], 38h
.text:004015A4
.text:004015A4 loc_4015A4:			       ; CODE XREF: sub_4013E3+1ADj
.text:004015A4		       lea     eax, [ebp+String1]
.text:004015AA		       push    eax	       ; lpString
.text:004015AB		       call    ds:lstrlenA
.text:004015B1		       cmp     [ebp+eax+var_125], 5Ch
.text:004015B9		       jz      short loc_4015CD
.text:004015BB		       lea     eax, [ebp+String1]
.text:004015C1		       push    offset asc_40718C ; "\\"
.text:004015C6		       push    eax	       ; lpString1
.text:004015C7		       call    ds:lstrcatA
.text:004015CD
.text:004015CD loc_4015CD:			       ; CODE XREF: sub_4013E3+1D6j
.text:004015CD		       lea     eax, [ebp+String1]
.text:004015D3		       lea     ebx, [edi+1210h]
.text:004015D9		       push    eax	       ; lpString2
.text:004015DA		       push    ebx	       ; lpString1
.text:004015DB		       call    esi ; lstrcpyA
.text:004015DD		       lea     eax, [ebp+String1]
.text:004015E3		       push    eax	       ; lpString2
.text:004015E4		       lea     eax, [edi+1314h]
.text:004015EA		       push    eax	       ; lpString1
.text:004015EB		       call    esi ; lstrcpyA
.text:004015ED		       push    offset aIrsetup_exe ; "irsetup.exe"
.text:004015F2		       push    ebx	       ; lpString1
.text:004015F3		       call    ds:lstrcatA
.text:004015F9		       mov     al, [ebp+String1]
.text:004015FF		       and     [ebp+var_1], 0
.text:00401603		       mov     [ebp+RootPathName], al
.text:00401606		       mov     al, [ebp+var_123]
.text:0040160C		       mov     [ebp+var_3], al
.text:0040160F		       mov     al, [ebp+var_122]
.text:00401615		       mov     [ebp+var_2], al
.text:00401618		       lea     eax, [ebp+TotalNumberOfClusters]
.text:0040161B		       push    eax	       ; lpTotalNumberOfClusters
.text:0040161C		       lea     eax, [ebp+NumberOfFreeClusters]
.text:0040161F		       push    eax	       ; lpNumberOfFreeClusters
.text:00401620		       lea     eax, [ebp+BytesPerSector]
.text:00401623		       push    eax	       ; lpBytesPerSector
.text:00401624		       lea     eax, [ebp+SectorsPerCluster]
.text:00401627		       push    eax	       ; lpSectorsPerCluster
.text:00401628		       lea     eax, [ebp+RootPathName]
.text:0040162B		       push    eax	       ; lpRootPathName
.text:0040162C		       call    ds:GetDiskFreeSpaceA
.text:00401632		       test    eax, eax
.text:00401634		       jz      short loc_40164D
.text:00401636		       mov     eax, [ebp+SectorsPerCluster]
.text:00401639		       imul    eax, [ebp+BytesPerSector]
.text:0040163D		       mul     [ebp+NumberOfFreeClusters]
.text:00401640		       test    edx, edx
.text:00401642		       jg      short loc_40165F
.text:00401644		       jl      short loc_40164D
.text:00401646		       cmp     eax, 1E8480h
.text:0040164B		       jnb     short loc_40165F
.text:0040164D
.text:0040164D loc_40164D:			       ; CODE XREF: sub_4013E3+251j
.text:0040164D					       ; sub_4013E3+261j
.text:0040164D		       add     edi, 4
.text:00401650		       push    offset aYouMustHaveAtL ;	"You must have at least	2MB of free spac"...
.text:00401655		       push    edi	       ; lpString1
.text:00401656		       call    esi ; lstrcpyA
.text:00401658		       mov     [ebp+var_C], 39h
.text:0040165F
.text:0040165F loc_40165F:			       ; CODE XREF: sub_4013E3+25Fj
.text:0040165F					       ; sub_4013E3+268j
.text:0040165F		       lea     eax, [ebp+Buffer]
.text:00401665		       push    eax	       ; lpPathName
.text:00401666		       call    ds:SetCurrentDirectoryA
.text:0040166C		       mov     eax, [ebp+var_C]
.text:0040166F		       pop     edi
.text:00401670		       pop     esi
.text:00401671		       pop     ebx
.text:00401672		       leave
.text:00401673		       retn
.text:00401673 sub_4013E3      endp
.text:00401673
.text:00401674
.text:00401674 ; =============== S U B R O U T I N E =======================================
.text:00401674
.text:00401674
.text:00401674 sub_401674      proc near	       ; CODE XREF: sub_40121C+25p
.text:00401674		       push    ebx
.text:00401675		       push    ebp
.text:00401676		       push    esi
.text:00401677		       mov     esi, ecx
.text:00401679		       push    edi
.text:0040167A		       xor     ebp, ebp
.text:0040167C		       push    dword ptr [esi+1420h] ; size_t
.text:00401682		       call    _malloc
.text:00401687		       pop     ecx
.text:00401688		       lea     edi, [esi+1418h]
.text:0040168E		       push    ebp	       ; iOrigin
.text:0040168F		       mov     ebx, eax
.text:00401691		       push    dword ptr [esi+141Ch] ; lOffset
.text:00401697		       push    dword ptr [edi] ; hFile
.text:00401699		       call    ds:_llseek
.text:0040169F		       push    dword ptr [esi+1420h] ; uBytes
.text:004016A5		       push    ebx	       ; lpBuffer
.text:004016A6		       push    dword ptr [edi] ; hFile
.text:004016A8		       call    ds:_lread
.text:004016AE		       cmp     eax, [esi+1420h]
.text:004016B4		       jnz     short loc_401705
.text:004016B6		       lea     eax, [esi+1210h]
.text:004016BC		       push    ebp	       ; iAttribute
.text:004016BD		       push    eax	       ; lpPathName
.text:004016BE		       call    ds:_lcreat
.text:004016C4		       cmp     eax, 0FFFFFFFFh
.text:004016C7		       mov     [esi+1424h], eax
.text:004016CD		       jnz     short loc_4016E2
.text:004016CF		       lea     eax, [esi+4]
.text:004016D2		       push    offset aUnableToOpenSe ;	"Unable	to open	setup file"
.text:004016D7		       push    eax	       ; lpString1
.text:004016D8		       call    ds:lstrcpyA
.text:004016DE		       push    37h
.text:004016E0		       jmp     short loc_401716
.text:004016E2 ; ---------------------------------------------------------------------------
.text:004016E2
.text:004016E2 loc_4016E2:			       ; CODE XREF: sub_401674+59j
.text:004016E2		       xor     eax, eax
.text:004016E4
.text:004016E4 loc_4016E4:			       ; CODE XREF: sub_401674+7Aj
.text:004016E4		       xor     byte ptr	[eax+ebx], 7
.text:004016E8		       inc     eax
.text:004016E9		       cmp     eax, 7D0h
.text:004016EE		       jl      short loc_4016E4
.text:004016F0		       push    dword ptr [esi+1420h] ; uBytes
.text:004016F6		       push    ebx	       ; lpBuffer
.text:004016F7		       push    dword ptr [esi+1424h] ; hFile
.text:004016FD		       call    ds:_lwrite
.text:00401703		       jmp     short loc_401717
.text:00401705 ; ---------------------------------------------------------------------------
.text:00401705
.text:00401705 loc_401705:			       ; CODE XREF: sub_401674+40j
.text:00401705		       lea     eax, [esi+4]
.text:00401708		       push    offset aFailedToReadSe ;	"Failed	to read	setup engine"
.text:0040170D		       push    eax	       ; lpString1
.text:0040170E		       call    ds:lstrcpyA
.text:00401714		       push    36h
.text:00401716
.text:00401716 loc_401716:			       ; CODE XREF: sub_401674+6Cj
.text:00401716		       pop     ebp
.text:00401717
.text:00401717 loc_401717:			       ; CODE XREF: sub_401674+8Fj
.text:00401717		       push    ebx	       ; lpMem
.text:00401718		       call    sub_401B7A
.text:0040171D		       mov     esi, [esi+1424h]
.text:00401723		       pop     ecx
.text:00401724		       cmp     esi, 0FFFFFFFFh
.text:00401727		       jz      short loc_401730
.text:00401729		       push    esi	       ; hFile
.text:0040172A		       call    ds:_lclose
.text:00401730
.text:00401730 loc_401730:			       ; CODE XREF: sub_401674+B3j
.text:00401730		       pop     edi
.text:00401731		       mov     eax, ebp
.text:00401733		       pop     esi
.text:00401734		       pop     ebp
.text:00401735		       pop     ebx
.text:00401736		       retn
.text:00401736 sub_401674      endp
.text:00401736
.text:00401737
.text:00401737 ; =============== S U B R O U T I N E =======================================
.text:00401737
.text:00401737 ; Attributes: bp-based frame
.text:00401737
.text:00401737 ; int __stdcall sub_401737(LPCSTR lpString)
.text:00401737 sub_401737      proc near	       ; CODE XREF: sub_4013E3+5Fp
.text:00401737
.text:00401737 PathName	       = byte ptr -108h
.text:00401737 var_4	       = dword ptr -4
.text:00401737 lpString	       = dword ptr  8
.text:00401737
.text:00401737		       push    ebp
.text:00401738		       mov     ebp, esp
.text:0040173A		       sub     esp, 108h
.text:00401740		       push    ebx
.text:00401741		       push    esi
.text:00401742		       mov     esi, ds:lstrlenA
.text:00401748		       push    edi
.text:00401749		       mov     edi, [ebp+lpString]
.text:0040174C		       mov     [ebp+var_4], 1
.text:00401753		       push    edi	       ; lpString
.text:00401754		       call    esi ; lstrlenA
.text:00401756		       cmp     byte ptr	[eax+edi-1], 5Ch
.text:0040175B		       jz      short loc_401769
.text:0040175D		       push    offset asc_40718C ; "\\"
.text:00401762		       push    edi	       ; lpString1
.text:00401763		       call    ds:lstrcatA
.text:00401769
.text:00401769 loc_401769:			       ; CODE XREF: sub_401737+24j
.text:00401769		       push    edi	       ; lpString
.text:0040176A		       call    esi ; lstrlenA
.text:0040176C		       mov     ebx, eax
.text:0040176E		       xor     esi, esi
.text:00401770		       push    104h	       ; size_t
.text:00401775		       lea     eax, [ebp+PathName]
.text:0040177B		       push    esi	       ; int
.text:0040177C		       push    eax	       ; void *
.text:0040177D		       call    _memset
.text:00401782		       add     esp, 0Ch
.text:00401785		       cmp     ebx, 2
.text:00401788		       jle     short loc_4017E1
.text:0040178A		       cmp     byte ptr	[edi+1], 3Ah
.text:0040178E		       jnz     short loc_4017E1
.text:00401790		       test    ebx, ebx
.text:00401792		       jle     short loc_4017E4
.text:00401794		       lea     eax, [ebp+PathName]
.text:0040179A		       sub     edi, eax
.text:0040179C
.text:0040179C loc_40179C:			       ; CODE XREF: sub_401737+A6j
.text:0040179C		       cmp     [ebp+var_4], 0
.text:004017A0		       jz      short loc_4017E4
.text:004017A2		       lea     eax, [ebp+esi+PathName]
.text:004017A9		       mov     cl, [edi+eax]
.text:004017AC		       cmp     cl, 5Ch
.text:004017AF		       mov     [eax], cl
.text:004017B1		       jnz     short loc_4017DA
.text:004017B3		       cmp     esi, 2
.text:004017B6		       jz      short loc_4017DA
.text:004017B8		       lea     eax, [ebp+PathName]
.text:004017BE		       push    eax	       ; lpPathName
.text:004017BF		       call    ds:SetCurrentDirectoryA
.text:004017C5		       test    eax, eax
.text:004017C7		       jnz     short loc_4017DA
.text:004017C9		       push    eax	       ; lpSecurityAttributes
.text:004017CA		       lea     eax, [ebp+PathName]
.text:004017D0		       push    eax	       ; lpPathName
.text:004017D1		       call    ds:CreateDirectoryA
.text:004017D7		       mov     [ebp+var_4], eax
.text:004017DA
.text:004017DA loc_4017DA:			       ; CODE XREF: sub_401737+7Aj
.text:004017DA					       ; sub_401737+7Fj ...
.text:004017DA		       inc     esi
.text:004017DB		       cmp     esi, ebx
.text:004017DD		       jl      short loc_40179C
.text:004017DF		       jmp     short loc_4017E4
.text:004017E1 ; ---------------------------------------------------------------------------
.text:004017E1
.text:004017E1 loc_4017E1:			       ; CODE XREF: sub_401737+51j
.text:004017E1					       ; sub_401737+57j
.text:004017E1		       mov     [ebp+var_4], esi
.text:004017E4
.text:004017E4 loc_4017E4:			       ; CODE XREF: sub_401737+5Bj
.text:004017E4					       ; sub_401737+69j ...
.text:004017E4		       mov     eax, [ebp+var_4]
.text:004017E7		       pop     edi
.text:004017E8		       pop     esi
.text:004017E9		       pop     ebx
.text:004017EA		       leave
.text:004017EB		       retn    4
.text:004017EB sub_401737      endp
.text:004017EB
.text:004017EE
.text:004017EE ; =============== S U B R O U T I N E =======================================
.text:004017EE
.text:004017EE ; Attributes: bp-based frame
.text:004017EE
.text:004017EE sub_4017EE      proc near	       ; CODE XREF: sub_40121C+32p
.text:004017EE
.text:004017EE String2	       = byte ptr -194h
.text:004017EE StartupInfo     = _STARTUPINFOA ptr -70h
.text:004017EE Msg	       = MSG ptr -2Ch
.text:004017EE ProcessInformation= _PROCESS_INFORMATION	ptr -10h
.text:004017EE
.text:004017EE		       push    ebp
.text:004017EF		       mov     ebp, esp
.text:004017F1		       sub     esp, 194h
.text:004017F7		       push    ebx
.text:004017F8		       push    esi
.text:004017F9		       push    edi
.text:004017FA		       push    10h
.text:004017FC		       mov     esi, ecx
.text:004017FE		       xor     ebx, ebx
.text:00401800		       pop     ecx
.text:00401801		       xor     eax, eax
.text:00401803		       lea     edi, [ebp+StartupInfo.lpReserved]
.text:00401806		       mov     [ebp+StartupInfo.cb], ebx
.text:00401809		       rep stosd
.text:0040180B		       lea     edi, [ebp+ProcessInformation.hThread]
.text:0040180E		       mov     [ebp+ProcessInformation.hProcess], ebx
.text:00401811		       stosd
.text:00401812		       stosd
.text:00401813		       stosd
.text:00401814		       push    44h
.text:00401816		       lea     eax, [ebp+StartupInfo]
.text:00401819		       pop     edi
.text:0040181A		       push    edi	       ; size_t
.text:0040181B		       push    ebx	       ; int
.text:0040181C		       push    eax	       ; void *
.text:0040181D		       call    _memset
.text:00401822		       push    10h	       ; size_t
.text:00401824		       lea     eax, [ebp+ProcessInformation]
.text:00401827		       push    ebx	       ; int
.text:00401828		       push    eax	       ; void *
.text:00401829		       call    _memset
.text:0040182E		       mov     eax, [esi+1420h]
.text:00401834		       mov     [ebp+StartupInfo.cb], edi
.text:00401837		       add     eax, [esi+141Ch]
.text:0040183D		       mov     [ebp+StartupInfo.lpReserved], ebx
.text:00401840		       mov     [ebp+StartupInfo.lpReserved2], ebx
.text:00401843		       mov     [ebp+StartupInfo.cbReserved2], bx
.text:00401847		       push    eax
.text:00401848		       lea     eax, [ebp+String2]
.text:0040184E		       push    offset a__iraoffU ; "__IRAOFF:%u"
.text:00401853		       push    eax	       ; LPSTR
.text:00401854		       mov     [ebp+StartupInfo.lpDesktop], ebx
.text:00401857		       mov     [ebp+StartupInfo.dwFlags], ebx
.text:0040185A		       call    ds:wsprintfA
.text:00401860		       add     esp, 24h
.text:00401863		       lea     eax, [esi+804h]
.text:00401869		       push    eax	       ; lpString
.text:0040186A		       call    ds:lstrlenA
.text:00401870		       mov     edi, ds:lstrcatA
.text:00401876		       test    eax, eax
.text:00401878		       jz      short loc_401888
.text:0040187A		       lea     eax, [esi+804h]
.text:00401880		       push    offset asc_4071F4 ; " "
.text:00401885		       push    eax	       ; lpString1
.text:00401886		       call    edi ; lstrcatA
.text:00401888
.text:00401888 loc_401888:			       ; CODE XREF: sub_4017EE+8Aj
.text:00401888		       lea     eax, [ebp+String2]
.text:0040188E		       push    eax	       ; lpString2
.text:0040188F		       lea     eax, [esi+804h]
.text:00401895		       push    eax	       ; lpString1
.text:00401896		       call    edi ; lstrcatA
.text:00401898		       lea     eax, [esi+110Ch]
.text:0040189E		       push    eax
.text:0040189F		       lea     eax, [ebp+String2]
.text:004018A5		       push    offset a__irafnS	; "\"__IRAFN:%s\""
.text:004018AA		       push    eax	       ; LPSTR
.text:004018AB		       call    ds:wsprintfA
.text:004018B1		       add     esp, 0Ch
.text:004018B4		       lea     eax, [esi+804h]
.text:004018BA		       push    offset asc_4071F4 ; " "
.text:004018BF		       push    eax	       ; lpString1
.text:004018C0		       call    edi ; lstrcatA
.text:004018C2		       lea     eax, [ebp+String2]
.text:004018C8		       push    eax	       ; lpString2
.text:004018C9		       lea     eax, [esi+804h]
.text:004018CF		       push    eax	       ; lpString1
.text:004018D0		       call    edi ; lstrcatA
.text:004018D2		       cmp     dword_409C18, ebx
.text:004018D8		       jz      short loc_4018F0
.text:004018DA		       lea     eax, [esi+1210h]
.text:004018E0		       push    ebx	       ; uType
.text:004018E1		       push    eax	       ; lpCaption
.text:004018E2		       lea     eax, [esi+804h]
.text:004018E8		       push    eax	       ; lpText
.text:004018E9		       push    ebx	       ; hWnd
.text:004018EA		       call    ds:MessageBoxA
.text:004018F0
.text:004018F0 loc_4018F0:			       ; CODE XREF: sub_4017EE+EAj
.text:004018F0		       lea     eax, [ebp+ProcessInformation]
.text:004018F3		       xor     edi, edi
.text:004018F5		       push    eax	       ; lpProcessInformation
.text:004018F6		       lea     eax, [ebp+StartupInfo]
.text:004018F9		       push    eax	       ; lpStartupInfo
.text:004018FA		       lea     eax, [esi+1314h]
.text:00401900		       push    eax	       ; lpCurrentDirectory
.text:00401901		       push    ebx	       ; lpEnvironment
.text:00401902		       push    20h	       ; dwCreationFlags
.text:00401904		       push    ebx	       ; bInheritHandles
.text:00401905		       push    ebx	       ; lpThreadAttributes
.text:00401906		       lea     eax, [esi+804h]
.text:0040190C		       push    ebx	       ; lpProcessAttributes
.text:0040190D		       push    eax	       ; lpCommandLine
.text:0040190E		       lea     eax, [esi+1210h]
.text:00401914		       inc     edi
.text:00401915		       push    eax	       ; lpApplicationName
.text:00401916		       mov     [esi+1108h], edi
.text:0040191C		       call    ds:CreateProcessA
.text:00401922		       test    eax, eax
.text:00401924		       jnz     short loc_40193A
.text:00401926		       add     esi, 4
.text:00401929		       push    offset aCouldNotStartT ;	"Could not start the setup"
.text:0040192E		       push    esi	       ; lpString1
.text:0040192F		       call    ds:lstrcpyA
.text:00401935		       push    37h
.text:00401937		       pop     edi
.text:00401938		       jmp     short loc_4019B2
.text:0040193A ; ---------------------------------------------------------------------------
.text:0040193A
.text:0040193A loc_40193A:			       ; CODE XREF: sub_4017EE+136j
.text:0040193A		       cmp     [esi+1108h], ebx
.text:00401940		       jz      short loc_401990
.text:00401942		       jmp     short loc_401979
.text:00401944 ; ---------------------------------------------------------------------------
.text:00401944
.text:00401944 loc_401944:			       ; CODE XREF: sub_4017EE+189j
.text:00401944		       cmp     [ebp+Msg.message], 0Fh
.text:00401948		       jz      short loc_401953
.text:0040194A		       cmp     [ebp+Msg.message], 200h
.text:00401951		       jnz     short loc_401967
.text:00401953
.text:00401953 loc_401953:			       ; CODE XREF: sub_4017EE+15Aj
.text:00401953		       lea     eax, [ebp+Msg]
.text:00401956		       push    eax	       ; lpMsg
.text:00401957		       call    ds:TranslateMessage
.text:0040195D		       lea     eax, [ebp+Msg]
.text:00401960		       push    eax	       ; lpMsg
.text:00401961		       call    ds:DispatchMessageA
.text:00401967
.text:00401967 loc_401967:			       ; CODE XREF: sub_4017EE+163j
.text:00401967					       ; sub_4017EE+1A0j
.text:00401967		       push    edi	       ; wRemoveMsg
.text:00401968		       push    ebx	       ; wMsgFilterMax
.text:00401969		       push    ebx	       ; wMsgFilterMin
.text:0040196A		       lea     eax, [ebp+Msg]
.text:0040196D		       push    ebx	       ; hWnd
.text:0040196E		       push    eax	       ; lpMsg
.text:0040196F		       call    ds:PeekMessageA
.text:00401975		       test    eax, eax
.text:00401977		       jg      short loc_401944
.text:00401979
.text:00401979 loc_401979:			       ; CODE XREF: sub_4017EE+154j
.text:00401979		       push    0FFh	       ; dwWakeMask
.text:0040197E		       push    0FFFFFFFFh      ; dwMilliseconds
.text:00401980		       lea     eax, [ebp+ProcessInformation]
.text:00401983		       push    ebx	       ; fWaitAll
.text:00401984		       push    eax	       ; pHandles
.text:00401985		       push    edi	       ; nCount
.text:00401986		       call    ds:MsgWaitForMultipleObjects
.text:0040198C		       cmp     eax, edi
.text:0040198E		       jz      short loc_401967
.text:00401990
.text:00401990 loc_401990:			       ; CODE XREF: sub_4017EE+152j
.text:00401990		       add     esi, 1428h
.text:00401996		       push    esi	       ; lpExitCode
.text:00401997		       push    [ebp+ProcessInformation.hProcess] ; hProcess
.text:0040199A		       call    ds:GetExitCodeProcess
.text:004019A0		       mov     edi, [esi]
.text:004019A2		       push    [ebp+ProcessInformation.hProcess] ; hObject
.text:004019A5		       mov     esi, ds:CloseHandle
.text:004019AB		       call    esi ; CloseHandle
.text:004019AD		       push    [ebp+ProcessInformation.hThread]	; hObject
.text:004019B0		       call    esi ; CloseHandle
.text:004019B2
.text:004019B2 loc_4019B2:			       ; CODE XREF: sub_4017EE+14Aj
.text:004019B2		       mov     eax, edi
.text:004019B4		       pop     edi
.text:004019B5		       pop     esi
.text:004019B6		       pop     ebx
.text:004019B7		       leave
.text:004019B8		       retn
.text:004019B8 sub_4017EE      endp
.text:004019B8
.text:004019B9 ; [0000002D BYTES: COLLAPSED FUNCTION __cinit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004019E6 ; [00000011 BYTES: COLLAPSED FUNCTION _exit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004019F7 ; [00000011 BYTES: COLLAPSED FUNCTION __exit. PRESS CTRL-NUMPAD+	TO EXPAND]
.text:00401A08 ; [000000A3 BYTES: COLLAPSED FUNCTION _doexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401AAB ; ---------------------------------------------------------------------------
.text:00401AAB		       pop     edi
.text:00401AAC		       retn
.text:00401AAD ; [00000009 BYTES: COLLAPSED FUNCTION __lockexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401AB6 ; [00000009 BYTES: COLLAPSED FUNCTION __unlockexit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401ABF ; [0000001A BYTES: COLLAPSED FUNCTION __initterm. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401AD9		       align 10h
.text:00401AE0 ; [00000058 BYTES: COLLAPSED FUNCTION _memset. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401B38		       align 10h
.text:00401B40 ; [0000002F BYTES: COLLAPSED FUNCTION __alloca_probe. PRESS CTRL-NUMPAD+	TO EXPAND]
.text:00401B6F
.text:00401B6F ; =============== S U B R O U T I N E =======================================
.text:00401B6F
.text:00401B6F
.text:00401B6F sub_401B6F      proc near	       ; CODE XREF: sub_4011E7+10p
.text:00401B6F
.text:00401B6F lpMem	       = dword ptr  4
.text:00401B6F
.text:00401B6F		       push    [esp+lpMem]     ; lpMem
.text:00401B73		       call    sub_401B7A
.text:00401B78		       pop     ecx
.text:00401B79		       retn
.text:00401B79 sub_401B6F      endp
.text:00401B79
.text:00401B7A
.text:00401B7A ; =============== S U B R O U T I N E =======================================
.text:00401B7A
.text:00401B7A ; Attributes: bp-based frame
.text:00401B7A
.text:00401B7A ; int __cdecl sub_401B7A(LPVOID lpMem)
.text:00401B7A sub_401B7A      proc near	       ; CODE XREF: sub_401292+141p
.text:00401B7A					       ; sub_401674+A4p ...
.text:00401B7A
.text:00401B7A var_28	       = dword ptr -28h
.text:00401B7A var_24	       = dword ptr -24h
.text:00401B7A var_20	       = dword ptr -20h
.text:00401B7A var_1C	       = dword ptr -1Ch
.text:00401B7A ms_exc	       = CPPEH_RECORD ptr -18h
.text:00401B7A lpMem	       = dword ptr  8
.text:00401B7A
.text:00401B7A ; FUNCTION CHUNK	AT .text:00401BED SIZE 00000076	BYTES
.text:00401B7A
.text:00401B7A		       push    ebp
.text:00401B7B		       mov     ebp, esp
.text:00401B7D		       push    0FFFFFFFFh
.text:00401B7F		       push    offset stru_406148
.text:00401B84		       push    offset __except_handler3
.text:00401B89		       mov     eax, large fs:0
.text:00401B8F		       push    eax
.text:00401B90		       mov     large fs:0, esp
.text:00401B97		       sub     esp, 18h
.text:00401B9A		       push    ebx
.text:00401B9B		       push    esi
.text:00401B9C		       push    edi
.text:00401B9D		       mov     esi, [ebp+lpMem]
.text:00401BA0		       test    esi, esi
.text:00401BA2		       jz      loc_401C54
.text:00401BA8		       mov     eax, dword_40A2E4
.text:00401BAD		       cmp     eax, 3
.text:00401BB0		       jnz     short loc_401BED
.text:00401BB2		       push    9
.text:00401BB4		       call    __lock
.text:00401BB9		       pop     ecx
.text:00401BBA		       and     [ebp+ms_exc.registration.TryLevel], 0
.text:00401BBE		       push    esi
.text:00401BBF		       call    ___sbh_find_block
.text:00401BC4		       pop     ecx
.text:00401BC5		       mov     [ebp+var_1C], eax
.text:00401BC8		       test    eax, eax
.text:00401BCA		       jz      short loc_401BD5
.text:00401BCC		       push    esi
.text:00401BCD		       push    eax
.text:00401BCE		       call    sub_4021D2
.text:00401BD3		       pop     ecx
.text:00401BD4		       pop     ecx
.text:00401BD5
.text:00401BD5 loc_401BD5:			       ; CODE XREF: sub_401B7A+50j
.text:00401BD5		       or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
.text:00401BD9		       call    loc_401BE4      ; Finally handler 0 for function	401B7A
.text:00401BDE ; ---------------------------------------------------------------------------
.text:00401BDE
.text:00401BDE loc_401BDE:			       ; CODE XREF: sub_401B7A+72j
.text:00401BDE		       cmp     [ebp+var_1C], 0
.text:00401BE2		       jmp     short loc_401C35
.text:00401BE4 ; ---------------------------------------------------------------------------
.text:00401BE4
.text:00401BE4 loc_401BE4:			       ; CODE XREF: sub_401B7A+5Fj
.text:00401BE4					       ; DATA XREF: .rdata:stru_406148o
.text:00401BE4		       push    9	       ; Finally handler 0 for function	401B7A
.text:00401BE6		       call    __unlock
.text:00401BEB		       pop     ecx
.text:00401BEC		       retn
.text:00401BEC sub_401B7A      endp
.text:00401BEC
.text:00401BED ; ---------------------------------------------------------------------------
.text:00401BED ; START OF FUNCTION CHUNK FOR sub_401B7A
.text:00401BED
.text:00401BED loc_401BED:			       ; CODE XREF: sub_401B7A+36j
.text:00401BED		       cmp     eax, 2
.text:00401BF0		       jnz     short loc_401C45
.text:00401BF2		       push    9
.text:00401BF4		       call    __lock
.text:00401BF9		       pop     ecx
.text:00401BFA		       mov     [ebp+ms_exc.registration.TryLevel], 1
.text:00401C01		       lea     eax, [ebp+var_20]
.text:00401C04		       push    eax
.text:00401C05		       lea     eax, [ebp+var_28]
.text:00401C08		       push    eax
.text:00401C09		       push    esi
.text:00401C0A		       call    sub_402C0C
.text:00401C0F		       add     esp, 0Ch
.text:00401C12		       mov     [ebp+var_24], eax
.text:00401C15		       test    eax, eax
.text:00401C17		       jz      short loc_401C28
.text:00401C19		       push    eax
.text:00401C1A		       push    [ebp+var_20]
.text:00401C1D		       push    [ebp+var_28]
.text:00401C20		       call    sub_402C63
.text:00401C25		       add     esp, 0Ch
.text:00401C28
.text:00401C28 loc_401C28:			       ; CODE XREF: sub_401B7A+9Dj
.text:00401C28		       or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
.text:00401C2C		       call    loc_401C3C      ; Finally handler 1 for function	401B7A
.text:00401C31 ; ---------------------------------------------------------------------------
.text:00401C31
.text:00401C31 loc_401C31:			       ; CODE XREF: sub_401B7A+CAj
.text:00401C31		       cmp     [ebp+var_24], 0
.text:00401C35
.text:00401C35 loc_401C35:			       ; CODE XREF: sub_401B7A+68j
.text:00401C35		       jnz     short loc_401C54
.text:00401C37		       push    [ebp+lpMem]
.text:00401C3A		       jmp     short loc_401C46
.text:00401C3C ; ---------------------------------------------------------------------------
.text:00401C3C
.text:00401C3C loc_401C3C:			       ; CODE XREF: sub_401B7A+B2j
.text:00401C3C					       ; DATA XREF: .rdata:stru_406148o
.text:00401C3C		       push    9	       ; Finally handler 1 for function	401B7A
.text:00401C3E		       call    __unlock
.text:00401C43		       pop     ecx
.text:00401C44		       retn
.text:00401C45 ; ---------------------------------------------------------------------------
.text:00401C45
.text:00401C45 loc_401C45:			       ; CODE XREF: sub_401B7A+76j
.text:00401C45		       push    esi	       ; lpMem
.text:00401C46
.text:00401C46 loc_401C46:			       ; CODE XREF: sub_401B7A+C0j
.text:00401C46		       push    0	       ; dwFlags
.text:00401C48		       push    hHeap	       ; hHeap
.text:00401C4E		       call    ds:HeapFree
.text:00401C54
.text:00401C54 loc_401C54:			       ; CODE XREF: sub_401B7A+28j
.text:00401C54					       ; sub_401B7A:loc_401C35j
.text:00401C54		       mov     ecx, [ebp+ms_exc.registration.Next]
.text:00401C57		       mov     large fs:0, ecx
.text:00401C5E		       pop     edi
.text:00401C5F		       pop     esi
.text:00401C60		       pop     ebx
.text:00401C61		       leave
.text:00401C62		       retn
.text:00401C62 ; END OF	FUNCTION CHUNK FOR sub_401B7A
.text:00401C63 ; [00000012 BYTES: COLLAPSED FUNCTION _malloc. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401C75 ; [0000002C BYTES: COLLAPSED FUNCTION __nh_malloc. PRESS	CTRL-NUMPAD+ TO	EXPAND]
.text:00401CA1
.text:00401CA1 ; =============== S U B R O U T I N E =======================================
.text:00401CA1
.text:00401CA1 ; Attributes: bp-based frame
.text:00401CA1
.text:00401CA1 sub_401CA1      proc near	       ; CODE XREF: __nh_malloc+Bp
.text:00401CA1
.text:00401CA1 var_1C	       = dword ptr -1Ch
.text:00401CA1 ms_exc	       = CPPEH_RECORD ptr -18h
.text:00401CA1 arg_0	       = dword ptr  8
.text:00401CA1
.text:00401CA1 ; FUNCTION CHUNK	AT .text:00401D11 SIZE 0000008C	BYTES
.text:00401CA1
.text:00401CA1		       push    ebp
.text:00401CA2		       mov     ebp, esp
.text:00401CA4		       push    0FFFFFFFFh
.text:00401CA6		       push    offset stru_406160
.text:00401CAB		       push    offset __except_handler3
.text:00401CB0		       mov     eax, large fs:0
.text:00401CB6		       push    eax
.text:00401CB7		       mov     large fs:0, esp
.text:00401CBE		       sub     esp, 0Ch
.text:00401CC1		       push    ebx
.text:00401CC2		       push    esi
.text:00401CC3		       push    edi
.text:00401CC4		       mov     eax, dword_40A2E4
.text:00401CC9		       cmp     eax, 3
.text:00401CCC		       jnz     short loc_401D11
.text:00401CCE		       mov     esi, [ebp+arg_0]
.text:00401CD1		       cmp     esi, dword_40A2DC
.text:00401CD7		       ja      loc_401D70
.text:00401CDD		       push    9
.text:00401CDF		       call    __lock
.text:00401CE4		       pop     ecx
.text:00401CE5		       and     [ebp+ms_exc.registration.TryLevel], 0
.text:00401CE9		       push    esi
.text:00401CEA		       call    ___sbh_alloc_block
.text:00401CEF		       pop     ecx
.text:00401CF0		       mov     [ebp+var_1C], eax
.text:00401CF3		       or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
.text:00401CF7		       call    loc_401D08      ; Finally handler 0 for function	401CA1
.text:00401CFC ; ---------------------------------------------------------------------------
.text:00401CFC
.text:00401CFC loc_401CFC:			       ; CODE XREF: sub_401CA1+6Fj
.text:00401CFC		       mov     eax, [ebp+var_1C]
.text:00401CFF		       test    eax, eax
.text:00401D01		       jz      short loc_401D70
.text:00401D03		       jmp     loc_401D8E
.text:00401D08 ; ---------------------------------------------------------------------------
.text:00401D08
.text:00401D08 loc_401D08:			       ; CODE XREF: sub_401CA1+56j
.text:00401D08					       ; DATA XREF: .rdata:stru_406160o
.text:00401D08		       push    9	       ; Finally handler 0 for function	401CA1
.text:00401D0A		       call    __unlock
.text:00401D0F		       pop     ecx
.text:00401D10		       retn
.text:00401D10 sub_401CA1      endp
.text:00401D10
.text:00401D11 ; ---------------------------------------------------------------------------
.text:00401D11 ; START OF FUNCTION CHUNK FOR sub_401CA1
.text:00401D11
.text:00401D11 loc_401D11:			       ; CODE XREF: sub_401CA1+2Bj
.text:00401D11		       cmp     eax, 2
.text:00401D14		       jnz     short loc_401D70
.text:00401D16		       mov     eax, [ebp+arg_0]
.text:00401D19		       test    eax, eax
.text:00401D1B		       jz      short loc_401D25
.text:00401D1D		       lea     esi, [eax+0Fh]
.text:00401D20		       and     esi, 0FFFFFFF0h
.text:00401D23		       jmp     short loc_401D28
.text:00401D25 ; ---------------------------------------------------------------------------
.text:00401D25
.text:00401D25 loc_401D25:			       ; CODE XREF: sub_401CA1+7Aj
.text:00401D25		       push    10h
.text:00401D27		       pop     esi
.text:00401D28
.text:00401D28 loc_401D28:			       ; CODE XREF: sub_401CA1+82j
.text:00401D28		       mov     [ebp+arg_0], esi
.text:00401D2B		       cmp     esi, dword_409304
.text:00401D31		       ja      short loc_401D61
.text:00401D33		       push    9
.text:00401D35		       call    __lock
.text:00401D3A		       pop     ecx
.text:00401D3B		       mov     [ebp+ms_exc.registration.TryLevel], 1
.text:00401D42		       mov     eax, esi
.text:00401D44		       shr     eax, 4
.text:00401D47		       push    eax
.text:00401D48		       call    sub_402CA8
.text:00401D4D		       pop     ecx
.text:00401D4E		       mov     [ebp+var_1C], eax
.text:00401D51		       or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
.text:00401D55		       call    loc_401D67
.text:00401D5A ; ---------------------------------------------------------------------------
.text:00401D5A
.text:00401D5A loc_401D5A:			       ; CODE XREF: sub_401CA1+CEj
.text:00401D5A		       mov     eax, [ebp+var_1C]
.text:00401D5D		       test    eax, eax
.text:00401D5F		       jnz     short loc_401D8E
.text:00401D61
.text:00401D61 loc_401D61:			       ; CODE XREF: sub_401CA1+90j
.text:00401D61		       push    esi
.text:00401D62		       jmp     short loc_401D80
.text:00401D64 ; ---------------------------------------------------------------------------
.text:00401D64
.text:00401D64 loc_401D64:			       ; DATA XREF: .rdata:stru_406160o
.text:00401D64		       mov     esi, [ebp+arg_0]	; Finally handler 1 for	function 401CA1
.text:00401D67
.text:00401D67 loc_401D67:			       ; CODE XREF: sub_401CA1+B4j
.text:00401D67		       push    9
.text:00401D69		       call    __unlock
.text:00401D6E		       pop     ecx
.text:00401D6F		       retn
.text:00401D70 ; ---------------------------------------------------------------------------
.text:00401D70
.text:00401D70 loc_401D70:			       ; CODE XREF: sub_401CA1+36j
.text:00401D70					       ; sub_401CA1+60j ...
.text:00401D70		       mov     eax, [ebp+arg_0]
.text:00401D73		       test    eax, eax
.text:00401D75		       jnz     short loc_401D7A
.text:00401D77		       push    1
.text:00401D79		       pop     eax
.text:00401D7A
.text:00401D7A loc_401D7A:			       ; CODE XREF: sub_401CA1+D4j
.text:00401D7A		       add     eax, 0Fh
.text:00401D7D		       and     al, 0F0h
.text:00401D7F		       push    eax	       ; dwBytes
.text:00401D80
.text:00401D80 loc_401D80:			       ; CODE XREF: sub_401CA1+C1j
.text:00401D80		       push    0	       ; dwFlags
.text:00401D82		       push    hHeap	       ; hHeap
.text:00401D88		       call    ds:HeapAlloc
.text:00401D8E
.text:00401D8E loc_401D8E:			       ; CODE XREF: sub_401CA1+62j
.text:00401D8E					       ; sub_401CA1+BEj
.text:00401D8E		       mov     ecx, [ebp+ms_exc.registration.Next]
.text:00401D91		       mov     large fs:0, ecx
.text:00401D98		       pop     edi
.text:00401D99		       pop     esi
.text:00401D9A		       pop     ebx
.text:00401D9B		       leave
.text:00401D9C		       retn
.text:00401D9C ; END OF	FUNCTION CHUNK FOR sub_401CA1
.text:00401D9D ; [00000108 BYTES: COLLAPSED FUNCTION start. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401EA5 ; [00000022 BYTES: COLLAPSED FUNCTION __amsg_exit. PRESS	CTRL-NUMPAD+ TO	EXPAND]
.text:00401EC7 ; ---------------------------------------------------------------------------
.text:00401EC7		       pop     ecx
.text:00401EC8		       pop     ecx
.text:00401EC9		       retn
.text:00401ECA ; [00000023 BYTES: COLLAPSED FUNCTION _fast_error_exit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401EED ; ---------------------------------------------------------------------------
.text:00401EED		       retn
.text:00401EEE ; [00000029 BYTES: COLLAPSED FUNCTION __mtinitlocks. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401F17 ; [00000061 BYTES: COLLAPSED FUNCTION __lock. PRESS CTRL-NUMPAD+	TO EXPAND]
.text:00401F78 ; [00000015 BYTES: COLLAPSED FUNCTION __unlock. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00401F8D
.text:00401F8D ; =============== S U B R O U T I N E =======================================
.text:00401F8D
.text:00401F8D
.text:00401F8D sub_401F8D      proc near	       ; CODE XREF: sub_401FBA+136p
.text:00401F8D
.text:00401F8D arg_0	       = dword ptr  4
.text:00401F8D
.text:00401F8D		       push    esi
.text:00401F8E		       mov     esi, [esp+4+arg_0]
.text:00401F92		       push    0	       ; lpModuleName
.text:00401F94		       and     dword ptr [esi],	0
.text:00401F97		       call    ds:GetModuleHandleA
.text:00401F9D		       cmp     word ptr	[eax], 5A4Dh
.text:00401FA2		       jnz     short loc_401FB8
.text:00401FA4		       mov     ecx, [eax+3Ch]
.text:00401FA7		       test    ecx, ecx
.text:00401FA9		       jz      short loc_401FB8
.text:00401FAB		       add     eax, ecx
.text:00401FAD		       mov     cl, [eax+1Ah]
.text:00401FB0		       mov     [esi], cl
.text:00401FB2		       mov     al, [eax+1Bh]
.text:00401FB5		       mov     [esi+1],	al
.text:00401FB8
.text:00401FB8 loc_401FB8:			       ; CODE XREF: sub_401F8D+15j
.text:00401FB8					       ; sub_401F8D+1Cj
.text:00401FB8		       pop     esi
.text:00401FB9		       retn
.text:00401FB9 sub_401F8D      endp
.text:00401FB9
.text:00401FBA
.text:00401FBA ; =============== S U B R O U T I N E =======================================
.text:00401FBA
.text:00401FBA ; Attributes: bp-based frame
.text:00401FBA
.text:00401FBA sub_401FBA      proc near	       ; CODE XREF: sub_402102+20p
.text:00401FBA
.text:00401FBA Buffer	       = byte ptr -122Ch
.text:00401FBA Filename	       = byte ptr -19Ch
.text:00401FBA VersionInformation= _OSVERSIONINFOA ptr -98h
.text:00401FBA var_4	       = byte ptr -4
.text:00401FBA
.text:00401FBA		       push    ebp
.text:00401FBB		       mov     ebp, esp
.text:00401FBD		       mov     eax, 122Ch
.text:00401FC2		       call    __alloca_probe
.text:00401FC7		       lea     eax, [ebp+VersionInformation]
.text:00401FCD		       push    ebx
.text:00401FCE		       push    eax	       ; lpVersionInformation
.text:00401FCF		       mov     [ebp+VersionInformation.dwOSVersionInfoSize], 94h
.text:00401FD9		       call    ds:GetVersionExA
.text:00401FDF		       test    eax, eax
.text:00401FE1		       jz      short loc_401FFD
.text:00401FE3		       cmp     [ebp+VersionInformation.dwPlatformId], 2
.text:00401FEA		       jnz     short loc_401FFD
.text:00401FEC		       cmp     [ebp+VersionInformation.dwMajorVersion],	5
.text:00401FF3		       jb      short loc_401FFD
.text:00401FF5		       push    1
.text:00401FF7		       pop     eax
.text:00401FF8		       jmp     loc_4020FF
.text:00401FFD ; ---------------------------------------------------------------------------
.text:00401FFD
.text:00401FFD loc_401FFD:			       ; CODE XREF: sub_401FBA+27j
.text:00401FFD					       ; sub_401FBA+30j ...
.text:00401FFD		       lea     eax, [ebp+Buffer]
.text:00402003		       push    1090h	       ; nSize
.text:00402008		       push    eax	       ; lpBuffer
.text:00402009		       push    offset Name     ; "__MSVCRT_HEAP_SELECT"
.text:0040200E		       call    ds:GetEnvironmentVariableA
.text:00402014		       test    eax, eax
.text:00402016		       jz      loc_4020EC
.text:0040201C		       xor     ebx, ebx
.text:0040201E		       lea     ecx, [ebp+Buffer]
.text:00402024		       cmp     [ebp+Buffer], bl
.text:0040202A		       jz      short loc_40203F
.text:0040202C
.text:0040202C loc_40202C:			       ; CODE XREF: sub_401FBA+83j
.text:0040202C		       mov     al, [ecx]
.text:0040202E		       cmp     al, 61h
.text:00402030		       jl      short loc_40203A
.text:00402032		       cmp     al, 7Ah
.text:00402034		       jg      short loc_40203A
.text:00402036		       sub     al, 20h
.text:00402038		       mov     [ecx], al
.text:0040203A
.text:0040203A loc_40203A:			       ; CODE XREF: sub_401FBA+76j
.text:0040203A					       ; sub_401FBA+7Aj
.text:0040203A		       inc     ecx
.text:0040203B		       cmp     [ecx], bl
.text:0040203D		       jnz     short loc_40202C
.text:0040203F
.text:0040203F loc_40203F:			       ; CODE XREF: sub_401FBA+70j
.text:0040203F		       lea     eax, [ebp+Buffer]
.text:00402045		       push    16h	       ; size_t
.text:00402047		       push    eax	       ; char *
.text:00402048		       push    offset a__global_heap_ ;	"__GLOBAL_HEAP_SELECTED"
.text:0040204D		       call    _strncmp
.text:00402052		       add     esp, 0Ch
.text:00402055		       test    eax, eax
.text:00402057		       jnz     short loc_402061
.text:00402059		       lea     eax, [ebp+Buffer]
.text:0040205F		       jmp     short loc_4020AA
.text:00402061 ; ---------------------------------------------------------------------------
.text:00402061
.text:00402061 loc_402061:			       ; CODE XREF: sub_401FBA+9Dj
.text:00402061		       lea     eax, [ebp+Filename]
.text:00402067		       push    104h	       ; nSize
.text:0040206C		       push    eax	       ; lpFilename
.text:0040206D		       push    ebx	       ; hModule
.text:0040206E		       call    ds:GetModuleFileNameA
.text:00402074		       cmp     [ebp+Filename], bl
.text:0040207A		       lea     ecx, [ebp+Filename]
.text:00402080		       jz      short loc_402095
.text:00402082
.text:00402082 loc_402082:			       ; CODE XREF: sub_401FBA+D9j
.text:00402082		       mov     al, [ecx]
.text:00402084		       cmp     al, 61h
.text:00402086		       jl      short loc_402090
.text:00402088		       cmp     al, 7Ah
.text:0040208A		       jg      short loc_402090
.text:0040208C		       sub     al, 20h
.text:0040208E		       mov     [ecx], al
.text:00402090
.text:00402090 loc_402090:			       ; CODE XREF: sub_401FBA+CCj
.text:00402090					       ; sub_401FBA+D0j
.text:00402090		       inc     ecx
.text:00402091		       cmp     [ecx], bl
.text:00402093		       jnz     short loc_402082
.text:00402095
.text:00402095 loc_402095:			       ; CODE XREF: sub_401FBA+C6j
.text:00402095		       lea     eax, [ebp+Filename]
.text:0040209B		       push    eax	       ; char *
.text:0040209C		       lea     eax, [ebp+Buffer]
.text:004020A2		       push    eax	       ; char *
.text:004020A3		       call    _strstr
.text:004020A8		       pop     ecx
.text:004020A9		       pop     ecx
.text:004020AA
.text:004020AA loc_4020AA:			       ; CODE XREF: sub_401FBA+A5j
.text:004020AA		       cmp     eax, ebx
.text:004020AC		       jz      short loc_4020EC
.text:004020AE		       push    2Ch	       ; int
.text:004020B0		       push    eax	       ; char *
.text:004020B1		       call    _strchr
.text:004020B6		       pop     ecx
.text:004020B7		       cmp     eax, ebx
.text:004020B9		       pop     ecx
.text:004020BA		       jz      short loc_4020EC
.text:004020BC		       inc     eax
.text:004020BD		       mov     ecx, eax
.text:004020BF		       cmp     [eax], bl
.text:004020C1		       jz      short loc_4020D1
.text:004020C3
.text:004020C3 loc_4020C3:			       ; CODE XREF: sub_401FBA+115j
.text:004020C3		       cmp     byte ptr	[ecx], 3Bh
.text:004020C6		       jnz     short loc_4020CC
.text:004020C8		       mov     [ecx], bl
.text:004020CA		       jmp     short loc_4020CD
.text:004020CC ; ---------------------------------------------------------------------------
.text:004020CC
.text:004020CC loc_4020CC:			       ; CODE XREF: sub_401FBA+10Cj
.text:004020CC		       inc     ecx
.text:004020CD
.text:004020CD loc_4020CD:			       ; CODE XREF: sub_401FBA+110j
.text:004020CD		       cmp     [ecx], bl
.text:004020CF		       jnz     short loc_4020C3
.text:004020D1
.text:004020D1 loc_4020D1:			       ; CODE XREF: sub_401FBA+107j
.text:004020D1		       push    0Ah	       ; int
.text:004020D3		       push    ebx	       ; char **
.text:004020D4		       push    eax	       ; char *
.text:004020D5		       call    _strtol
.text:004020DA		       add     esp, 0Ch
.text:004020DD		       cmp     eax, 2
.text:004020E0		       jz      short loc_4020FF
.text:004020E2		       cmp     eax, 3
.text:004020E5		       jz      short loc_4020FF
.text:004020E7		       cmp     eax, 1
.text:004020EA		       jz      short loc_4020FF
.text:004020EC
.text:004020EC loc_4020EC:			       ; CODE XREF: sub_401FBA+5Cj
.text:004020EC					       ; sub_401FBA+F2j ...
.text:004020EC		       lea     eax, [ebp+var_4]
.text:004020EF		       push    eax
.text:004020F0		       call    sub_401F8D
.text:004020F5		       cmp     [ebp+var_4], 6
.text:004020F9		       pop     ecx
.text:004020FA		       sbb     eax, eax
.text:004020FC		       add     eax, 3
.text:004020FF
.text:004020FF loc_4020FF:			       ; CODE XREF: sub_401FBA+3Ej
.text:004020FF					       ; sub_401FBA+126j ...
.text:004020FF		       pop     ebx
.text:00402100		       leave
.text:00402101		       retn
.text:00402101 sub_401FBA      endp
.text:00402101
.text:00402102
.text:00402102 ; =============== S U B R O U T I N E =======================================
.text:00402102
.text:00402102
.text:00402102 sub_402102      proc near	       ; CODE XREF: start+59p
.text:00402102
.text:00402102 arg_0	       = dword ptr  4
.text:00402102
.text:00402102		       xor     eax, eax
.text:00402104		       push    0	       ; dwMaximumSize
.text:00402106		       cmp     [esp+4+arg_0], eax
.text:0040210A		       push    1000h	       ; dwInitialSize
.text:0040210F		       setz    al
.text:00402112		       push    eax	       ; flOptions
.text:00402113		       call    ds:HeapCreate
.text:00402119		       test    eax, eax
.text:0040211B		       mov     hHeap, eax
.text:00402120		       jz      short loc_402158
.text:00402122		       call    sub_401FBA
.text:00402127		       cmp     eax, 3
.text:0040212A		       mov     dword_40A2E4, eax
.text:0040212F		       jnz     short loc_40213E
.text:00402131		       push    3F8h
.text:00402136		       call    ___sbh_heap_init
.text:0040213B		       pop     ecx
.text:0040213C		       jmp     short loc_402148
.text:0040213E ; ---------------------------------------------------------------------------
.text:0040213E
.text:0040213E loc_40213E:			       ; CODE XREF: sub_402102+2Dj
.text:0040213E		       cmp     eax, 2
.text:00402141		       jnz     short loc_40215B
.text:00402143		       call    sub_4029B0
.text:00402148
.text:00402148 loc_402148:			       ; CODE XREF: sub_402102+3Aj
.text:00402148		       test    eax, eax
.text:0040214A		       jnz     short loc_40215B
.text:0040214C		       push    hHeap	       ; hHeap
.text:00402152		       call    ds:HeapDestroy
.text:00402158
.text:00402158 loc_402158:			       ; CODE XREF: sub_402102+1Ej
.text:00402158		       xor     eax, eax
.text:0040215A		       retn
.text:0040215B ; ---------------------------------------------------------------------------
.text:0040215B
.text:0040215B loc_40215B:			       ; CODE XREF: sub_402102+3Fj
.text:0040215B					       ; sub_402102+48j
.text:0040215B		       push    1
.text:0040215D		       pop     eax
.text:0040215E		       retn
.text:0040215E sub_402102      endp
.text:0040215E
.text:0040215F ; [00000048 BYTES: COLLAPSED FUNCTION ___sbh_heap_init. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004021A7 ; [0000002B BYTES: COLLAPSED FUNCTION ___sbh_find_block.	PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004021D2
.text:004021D2 ; =============== S U B R O U T I N E =======================================
.text:004021D2
.text:004021D2 ; Attributes: bp-based frame
.text:004021D2
.text:004021D2 sub_4021D2      proc near	       ; CODE XREF: sub_401B7A+54p
.text:004021D2
.text:004021D2 var_10	       = dword ptr -10h
.text:004021D2 var_C	       = dword ptr -0Ch
.text:004021D2 var_8	       = dword ptr -8
.text:004021D2 var_4	       = dword ptr -4
.text:004021D2 arg_0	       = dword ptr  8
.text:004021D2 arg_4	       = dword ptr  0Ch
.text:004021D2
.text:004021D2		       push    ebp
.text:004021D3		       mov     ebp, esp
.text:004021D5		       sub     esp, 10h
.text:004021D8		       mov     ecx, [ebp+arg_0]
.text:004021DB		       push    ebx
.text:004021DC		       push    esi
.text:004021DD		       mov     esi, [ebp+arg_4]
.text:004021E0		       mov     eax, [ecx+10h]
.text:004021E3		       push    edi
.text:004021E4		       mov     edi, esi
.text:004021E6		       add     esi, 0FFFFFFFCh
.text:004021E9		       sub     edi, [ecx+0Ch]
.text:004021EC		       shr     edi, 0Fh
.text:004021EF		       mov     ecx, edi
.text:004021F1		       imul    ecx, 204h
.text:004021F7		       lea     ecx, [ecx+eax+144h]
.text:004021FE		       mov     [ebp+var_10], ecx
.text:00402201		       mov     ecx, [esi]
.text:00402203		       dec     ecx
.text:00402204		       test    cl, 1
.text:00402207		       mov     [ebp+var_4], ecx
.text:0040220A		       jnz     loc_4024F6
.text:00402210		       mov     edx, [ecx+esi]
.text:00402213		       lea     ebx, [ecx+esi]
.text:00402216		       mov     [ebp+var_C], edx
.text:00402219		       mov     edx, [esi-4]
.text:0040221C		       mov     [ebp+var_8], edx
.text:0040221F		       mov     edx, [ebp+var_C]
.text:00402222		       test    dl, 1
.text:00402225		       mov     [ebp+arg_4], ebx
.text:00402228		       jnz     short loc_4022A8
.text:0040222A		       sar     edx, 4
.text:0040222D		       dec     edx
.text:0040222E		       cmp     edx, 3Fh
.text:00402231		       jbe     short loc_402236
.text:00402233		       push    3Fh
.text:00402235		       pop     edx
.text:00402236
.text:00402236 loc_402236:			       ; CODE XREF: sub_4021D2+5Fj
.text:00402236		       mov     ecx, [ebx+4]
.text:00402239		       cmp     ecx, [ebx+8]
.text:0040223C		       jnz     short loc_40228A
.text:0040223E		       cmp     edx, 20h
.text:00402241		       jnb     short loc_402261
.text:00402243		       mov     ebx, 80000000h
.text:00402248		       mov     ecx, edx
.text:0040224A		       shr     ebx, cl
.text:0040224C		       lea     ecx, [edx+eax+4]
.text:00402250		       not     ebx
.text:00402252		       and     [eax+edi*4+44h],	ebx
.text:00402256		       dec     byte ptr	[ecx]
.text:00402258		       jnz     short loc_402282
.text:0040225A		       mov     ecx, [ebp+arg_0]
.text:0040225D		       and     [ecx], ebx
.text:0040225F		       jmp     short loc_402282
.text:00402261 ; ---------------------------------------------------------------------------
.text:00402261
.text:00402261 loc_402261:			       ; CODE XREF: sub_4021D2+6Fj
.text:00402261		       lea     ecx, [edx-20h]
.text:00402264		       mov     ebx, 80000000h
.text:00402269		       shr     ebx, cl
.text:0040226B		       lea     ecx, [edx+eax+4]
.text:0040226F		       not     ebx
.text:00402271		       and     [eax+edi*4+0C4h], ebx
.text:00402278		       dec     byte ptr	[ecx]
.text:0040227A		       jnz     short loc_402282
.text:0040227C		       mov     ecx, [ebp+arg_0]
.text:0040227F		       and     [ecx+4],	ebx
.text:00402282
.text:00402282 loc_402282:			       ; CODE XREF: sub_4021D2+86j
.text:00402282					       ; sub_4021D2+8Dj ...
.text:00402282		       mov     ecx, [ebp+var_4]
.text:00402285		       mov     ebx, [ebp+arg_4]
.text:00402288		       jmp     short loc_40228D
.text:0040228A ; ---------------------------------------------------------------------------
.text:0040228A
.text:0040228A loc_40228A:			       ; CODE XREF: sub_4021D2+6Aj
.text:0040228A		       mov     ecx, [ebp+var_4]
.text:0040228D
.text:0040228D loc_40228D:			       ; CODE XREF: sub_4021D2+B6j
.text:0040228D		       mov     edx, [ebx+8]
.text:00402290		       mov     ebx, [ebx+4]
.text:00402293		       add     ecx, [ebp+var_C]
.text:00402296		       mov     [edx+4],	ebx
.text:00402299		       mov     edx, [ebp+arg_4]
.text:0040229C		       mov     [ebp+var_4], ecx
.text:0040229F		       mov     ebx, [edx+4]
.text:004022A2		       mov     edx, [edx+8]
.text:004022A5		       mov     [ebx+8],	edx
.text:004022A8
.text:004022A8 loc_4022A8:			       ; CODE XREF: sub_4021D2+56j
.text:004022A8		       mov     edx, ecx
.text:004022AA		       sar     edx, 4
.text:004022AD		       dec     edx
.text:004022AE		       cmp     edx, 3Fh
.text:004022B1		       jbe     short loc_4022B6
.text:004022B3		       push    3Fh
.text:004022B5		       pop     edx
.text:004022B6
.text:004022B6 loc_4022B6:			       ; CODE XREF: sub_4021D2+DFj
.text:004022B6		       mov     ebx, [ebp+var_8]
.text:004022B9		       and     ebx, 1
.text:004022BC		       mov     [ebp+var_C], ebx
.text:004022BF		       jnz     loc_402359
.text:004022C5		       sub     esi, [ebp+var_8]
.text:004022C8		       mov     ebx, [ebp+var_8]
.text:004022CB		       sar     ebx, 4
.text:004022CE		       push    3Fh
.text:004022D0		       mov     [ebp+arg_4], esi
.text:004022D3		       dec     ebx
.text:004022D4		       pop     esi
.text:004022D5		       cmp     ebx, esi
.text:004022D7		       jbe     short loc_4022DB
.text:004022D9		       mov     ebx, esi
.text:004022DB
.text:004022DB loc_4022DB:			       ; CODE XREF: sub_4021D2+105j
.text:004022DB		       add     ecx, [ebp+var_8]
.text:004022DE		       mov     edx, ecx
.text:004022E0		       mov     [ebp+var_4], ecx
.text:004022E3		       sar     edx, 4
.text:004022E6		       dec     edx
.text:004022E7		       cmp     edx, esi
.text:004022E9		       jbe     short loc_4022ED
.text:004022EB		       mov     edx, esi
.text:004022ED
.text:004022ED loc_4022ED:			       ; CODE XREF: sub_4021D2+117j
.text:004022ED		       cmp     ebx, edx
.text:004022EF		       jz      short loc_402354
.text:004022F1		       mov     ecx, [ebp+arg_4]
.text:004022F4		       mov     esi, [ecx+4]
.text:004022F7		       cmp     esi, [ecx+8]
.text:004022FA		       jnz     short loc_40233C
.text:004022FC		       cmp     ebx, 20h
.text:004022FF		       jnb     short loc_40231D
.text:00402301		       mov     esi, 80000000h
.text:00402306		       mov     ecx, ebx
.text:00402308		       shr     esi, cl
.text:0040230A		       not     esi
.text:0040230C		       and     [eax+edi*4+44h],	esi
.text:00402310		       dec     byte ptr	[ebx+eax+4]
.text:00402314		       jnz     short loc_40233C
.text:00402316		       mov     ecx, [ebp+arg_0]
.text:00402319		       and     [ecx], esi
.text:0040231B		       jmp     short loc_40233C
.text:0040231D ; ---------------------------------------------------------------------------
.text:0040231D
.text:0040231D loc_40231D:			       ; CODE XREF: sub_4021D2+12Dj
.text:0040231D		       lea     ecx, [ebx-20h]
.text:00402320		       mov     esi, 80000000h
.text:00402325		       shr     esi, cl
.text:00402327		       not     esi
.text:00402329		       and     [eax+edi*4+0C4h], esi
.text:00402330		       dec     byte ptr	[ebx+eax+4]
.text:00402334		       jnz     short loc_40233C
.text:00402336		       mov     ecx, [ebp+arg_0]
.text:00402339		       and     [ecx+4],	esi
.text:0040233C
.text:0040233C loc_40233C:			       ; CODE XREF: sub_4021D2+128j
.text:0040233C					       ; sub_4021D2+142j ...
.text:0040233C		       mov     ecx, [ebp+arg_4]
.text:0040233F		       mov     esi, [ecx+8]
.text:00402342		       mov     ecx, [ecx+4]
.text:00402345		       mov     [esi+4],	ecx
.text:00402348		       mov     ecx, [ebp+arg_4]
.text:0040234B		       mov     esi, [ecx+4]
.text:0040234E		       mov     ecx, [ecx+8]
.text:00402351		       mov     [esi+8],	ecx
.text:00402354
.text:00402354 loc_402354:			       ; CODE XREF: sub_4021D2+11Dj
.text:00402354		       mov     esi, [ebp+arg_4]
.text:00402357		       jmp     short loc_40235C
.text:00402359 ; ---------------------------------------------------------------------------
.text:00402359
.text:00402359 loc_402359:			       ; CODE XREF: sub_4021D2+EDj
.text:00402359		       mov     ebx, [ebp+arg_0]
.text:0040235C
.text:0040235C loc_40235C:			       ; CODE XREF: sub_4021D2+185j
.text:0040235C		       cmp     [ebp+var_C], 0
.text:00402360		       jnz     short loc_40236A
.text:00402362		       cmp     ebx, edx
.text:00402364		       jz      loc_4023EB
.text:0040236A
.text:0040236A loc_40236A:			       ; CODE XREF: sub_4021D2+18Ej
.text:0040236A		       mov     ecx, [ebp+var_10]
.text:0040236D		       mov     ebx, [ecx+edx*8+4]
.text:00402371		       lea     ecx, [ecx+edx*8]
.text:00402374		       mov     [esi+4],	ebx
.text:00402377		       mov     [esi+8],	ecx
.text:0040237A		       mov     [ecx+4],	esi
.text:0040237D		       mov     ecx, [esi+4]
.text:00402380		       mov     [ecx+8],	esi
.text:00402383		       mov     ecx, [esi+4]
.text:00402386		       cmp     ecx, [esi+8]
.text:00402389		       jnz     short loc_4023EB
.text:0040238B		       mov     cl, [edx+eax+4]
.text:0040238F		       cmp     edx, 20h
.text:00402392		       mov     byte ptr	[ebp+arg_4+3], cl
.text:00402395		       inc     cl
.text:00402397		       mov     [edx+eax+4], cl
.text:0040239B		       jnb     short loc_4023C2
.text:0040239D		       cmp     byte ptr	[ebp+arg_4+3], 0
.text:004023A1		       jnz     short loc_4023B1
.text:004023A3		       mov     ebx, 80000000h
.text:004023A8		       mov     ecx, edx
.text:004023AA		       shr     ebx, cl
.text:004023AC		       mov     ecx, [ebp+arg_0]
.text:004023AF		       or      [ecx], ebx
.text:004023B1
.text:004023B1 loc_4023B1:			       ; CODE XREF: sub_4021D2+1CFj
.text:004023B1		       mov     ebx, 80000000h
.text:004023B6		       mov     ecx, edx
.text:004023B8		       shr     ebx, cl
.text:004023BA		       lea     eax, [eax+edi*4+44h]
.text:004023BE		       or      [eax], ebx
.text:004023C0		       jmp     short loc_4023EB
.text:004023C2 ; ---------------------------------------------------------------------------
.text:004023C2
.text:004023C2 loc_4023C2:			       ; CODE XREF: sub_4021D2+1C9j
.text:004023C2		       cmp     byte ptr	[ebp+arg_4+3], 0
.text:004023C6		       jnz     short loc_4023D8
.text:004023C8		       lea     ecx, [edx-20h]
.text:004023CB		       mov     ebx, 80000000h
.text:004023D0		       shr     ebx, cl
.text:004023D2		       mov     ecx, [ebp+arg_0]
.text:004023D5		       or      [ecx+4],	ebx
.text:004023D8
.text:004023D8 loc_4023D8:			       ; CODE XREF: sub_4021D2+1F4j
.text:004023D8		       lea     ecx, [edx-20h]
.text:004023DB		       mov     edx, 80000000h
.text:004023E0		       shr     edx, cl
.text:004023E2		       lea     eax, [eax+edi*4+0C4h]
.text:004023E9		       or      [eax], edx
.text:004023EB
.text:004023EB loc_4023EB:			       ; CODE XREF: sub_4021D2+192j
.text:004023EB					       ; sub_4021D2+1B7j ...
.text:004023EB		       mov     eax, [ebp+var_4]
.text:004023EE		       mov     [esi], eax
.text:004023F0		       mov     [eax+esi-4], eax
.text:004023F4		       mov     eax, [ebp+var_10]
.text:004023F7		       dec     dword ptr [eax]
.text:004023F9		       jnz     loc_4024F6
.text:004023FF		       mov     eax, dword_40A2D0
.text:00402404		       test    eax, eax
.text:00402406		       jz      loc_4024E8
.text:0040240C		       mov     ecx, dword_40A2C8
.text:00402412		       mov     esi, ds:VirtualFree
.text:00402418		       shl     ecx, 0Fh
.text:0040241B		       add     ecx, [eax+0Ch]
.text:0040241E		       mov     ebx, 8000h
.text:00402423		       push    4000h	       ; dwFreeType
.text:00402428		       push    ebx	       ; dwSize
.text:00402429		       push    ecx	       ; lpAddress
.text:0040242A		       call    esi ; VirtualFree
.text:0040242C		       mov     ecx, dword_40A2C8
.text:00402432		       mov     eax, dword_40A2D0
.text:00402437		       mov     edx, 80000000h
.text:0040243C		       shr     edx, cl
.text:0040243E		       or      [eax+8],	edx
.text:00402441		       mov     eax, dword_40A2D0
.text:00402446		       mov     ecx, dword_40A2C8
.text:0040244C		       mov     eax, [eax+10h]
.text:0040244F		       and     dword ptr [eax+ecx*4+0C4h], 0
.text:00402457		       mov     eax, dword_40A2D0
.text:0040245C		       mov     eax, [eax+10h]
.text:0040245F		       dec     byte ptr	[eax+43h]
.text:00402462		       mov     eax, dword_40A2D0
.text:00402467		       mov     ecx, [eax+10h]
.text:0040246A		       cmp     byte ptr	[ecx+43h], 0
.text:0040246E		       jnz     short loc_402479
.text:00402470		       and     dword ptr [eax+4], 0FFFFFFFEh
.text:00402474		       mov     eax, dword_40A2D0
.text:00402479
.text:00402479 loc_402479:			       ; CODE XREF: sub_4021D2+29Cj
.text:00402479		       cmp     dword ptr [eax+8], 0FFFFFFFFh
.text:0040247D		       jnz     short loc_4024E8
.text:0040247F		       push    ebx	       ; dwFreeType
.text:00402480		       push    0	       ; dwSize
.text:00402482		       push    dword ptr [eax+0Ch] ; lpAddress
.text:00402485		       call    esi ; VirtualFree
.text:00402487		       mov     eax, dword_40A2D0
.text:0040248C		       push    dword ptr [eax+10h] ; lpMem
.text:0040248F		       push    0	       ; dwFlags
.text:00402491		       push    hHeap	       ; hHeap
.text:00402497		       call    ds:HeapFree
.text:0040249D		       mov     eax, dword_40A2D4
.text:004024A2		       mov     edx, lpMem
.text:004024A8		       lea     eax, [eax+eax*4]
.text:004024AB		       shl     eax, 2
.text:004024AE		       mov     ecx, eax
.text:004024B0		       mov     eax, dword_40A2D0
.text:004024B5		       sub     ecx, eax
.text:004024B7		       lea     ecx, [ecx+edx-14h]
.text:004024BB		       push    ecx	       ; size_t
.text:004024BC		       lea     ecx, [eax+14h]
.text:004024BF		       push    ecx	       ; void *
.text:004024C0		       push    eax	       ; void *
.text:004024C1		       call    _memcpy
.text:004024C6		       mov     eax, [ebp+arg_0]
.text:004024C9		       add     esp, 0Ch
.text:004024CC		       dec     dword_40A2D4
.text:004024D2		       cmp     eax, dword_40A2D0
.text:004024D8		       jbe     short loc_4024DE
.text:004024DA		       sub     [ebp+arg_0], 14h
.text:004024DE
.text:004024DE loc_4024DE:			       ; CODE XREF: sub_4021D2+306j
.text:004024DE		       mov     eax, lpMem
.text:004024E3		       mov     dword_40A2CC, eax
.text:004024E8
.text:004024E8 loc_4024E8:			       ; CODE XREF: sub_4021D2+234j
.text:004024E8					       ; sub_4021D2+2ABj
.text:004024E8		       mov     eax, [ebp+arg_0]
.text:004024EB		       mov     dword_40A2C8, edi
.text:004024F1		       mov     dword_40A2D0, eax
.text:004024F6
.text:004024F6 loc_4024F6:			       ; CODE XREF: sub_4021D2+38j
.text:004024F6					       ; sub_4021D2+227j
.text:004024F6		       pop     edi
.text:004024F7		       pop     esi
.text:004024F8		       pop     ebx
.text:004024F9		       leave
.text:004024FA		       retn
.text:004024FA sub_4021D2      endp
.text:004024FA
.text:004024FB ; [00000309 BYTES: COLLAPSED FUNCTION ___sbh_alloc_block. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402804 ; [000000B1 BYTES: COLLAPSED FUNCTION ___sbh_alloc_new_region. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004028B5 ; [000000FB BYTES: COLLAPSED FUNCTION ___sbh_alloc_new_group. PRESS CTRL-NUMPAD+	TO EXPAND]
.text:004029B0
.text:004029B0 ; =============== S U B R O U T I N E =======================================
.text:004029B0
.text:004029B0
.text:004029B0 sub_4029B0      proc near	       ; CODE XREF: sub_402102+41p
.text:004029B0					       ; sub_402CA8:loc_402E77p
.text:004029B0		       cmp     dword_4072F0, 0FFFFFFFFh
.text:004029B7		       push    ebx
.text:004029B8		       push    ebp
.text:004029B9		       push    esi
.text:004029BA		       push    edi
.text:004029BB		       jnz     short loc_4029C4
.text:004029BD		       mov     esi, offset off_4072E0
.text:004029C2		       jmp     short loc_4029E1
.text:004029C4 ; ---------------------------------------------------------------------------
.text:004029C4
.text:004029C4 loc_4029C4:			       ; CODE XREF: sub_4029B0+Bj
.text:004029C4		       push    2020h	       ; dwBytes
.text:004029C9		       push    0	       ; dwFlags
.text:004029CB		       push    hHeap	       ; hHeap
.text:004029D1		       call    ds:HeapAlloc
.text:004029D7		       mov     esi, eax
.text:004029D9		       test    esi, esi
.text:004029DB		       jz      loc_402AED
.text:004029E1
.text:004029E1 loc_4029E1:			       ; CODE XREF: sub_4029B0+12j
.text:004029E1		       mov     ebp, ds:VirtualAlloc
.text:004029E7		       push    4	       ; flProtect
.text:004029E9		       push    2000h	       ; flAllocationType
.text:004029EE		       push    400000h	       ; dwSize
.text:004029F3		       push    0	       ; lpAddress
.text:004029F5		       call    ebp ; VirtualAlloc
.text:004029F7		       mov     edi, eax
.text:004029F9		       test    edi, edi
.text:004029FB		       jz      loc_402AD6
.text:00402A01		       push    4	       ; flProtect
.text:00402A03		       mov     ebx, 10000h
.text:00402A08		       push    1000h	       ; flAllocationType
.text:00402A0D		       push    ebx	       ; dwSize
.text:00402A0E		       push    edi	       ; lpAddress
.text:00402A0F		       call    ebp ; VirtualAlloc
.text:00402A11		       test    eax, eax
.text:00402A13		       jz      loc_402AC8
.text:00402A19		       mov     eax, offset off_4072E0
.text:00402A1E		       cmp     esi, eax
.text:00402A20		       jnz     short loc_402A40
.text:00402A22		       cmp     off_4072E0, 0
.text:00402A29		       jnz     short loc_402A30
.text:00402A2B		       mov     off_4072E0, eax
.text:00402A30
.text:00402A30 loc_402A30:			       ; CODE XREF: sub_4029B0+79j
.text:00402A30		       cmp     off_4072E4, 0
.text:00402A37		       jnz     short loc_402A55
.text:00402A39		       mov     off_4072E4, eax
.text:00402A3E		       jmp     short loc_402A55
.text:00402A40 ; ---------------------------------------------------------------------------
.text:00402A40
.text:00402A40 loc_402A40:			       ; CODE XREF: sub_4029B0+70j
.text:00402A40		       mov     [esi], eax
.text:00402A42		       mov     eax, off_4072E4
.text:00402A47		       mov     [esi+4],	eax
.text:00402A4A		       mov     off_4072E4, esi
.text:00402A50		       mov     eax, [esi+4]
.text:00402A53		       mov     [eax], esi
.text:00402A55
.text:00402A55 loc_402A55:			       ; CODE XREF: sub_4029B0+87j
.text:00402A55					       ; sub_4029B0+8Ej
.text:00402A55		       lea     eax, [edi+400000h]
.text:00402A5B		       lea     ecx, [esi+98h]
.text:00402A61		       mov     [esi+14h], eax
.text:00402A64		       lea     eax, [esi+18h]
.text:00402A67		       mov     [esi+0Ch], ecx
.text:00402A6A		       mov     [esi+10h], edi
.text:00402A6D		       mov     [esi+8],	eax
.text:00402A70		       xor     ebp, ebp
.text:00402A72		       mov     ecx, 0F1h
.text:00402A77
.text:00402A77 loc_402A77:			       ; CODE XREF: sub_4029B0+E2j
.text:00402A77		       xor     edx, edx
.text:00402A79		       cmp     ebp, 10h
.text:00402A7C		       setnl   dl
.text:00402A7F		       dec     edx
.text:00402A80		       and     edx, ecx
.text:00402A82		       dec     edx
.text:00402A83		       inc     ebp
.text:00402A84		       mov     [eax], edx
.text:00402A86		       mov     [eax+4],	ecx
.text:00402A89		       add     eax, 8
.text:00402A8C		       cmp     ebp, 400h
.text:00402A92		       jl      short loc_402A77
.text:00402A94		       push    ebx	       ; size_t
.text:00402A95		       push    0	       ; int
.text:00402A97		       push    edi	       ; void *
.text:00402A98		       call    _memset
.text:00402A9D		       add     esp, 0Ch
.text:00402AA0
.text:00402AA0 loc_402AA0:			       ; CODE XREF: sub_4029B0+112j
.text:00402AA0		       mov     eax, [esi+10h]
.text:00402AA3		       add     eax, ebx
.text:00402AA5		       cmp     edi, eax
.text:00402AA7		       jnb     short loc_402AC4
.text:00402AA9		       or      byte ptr	[edi+0F8h], 0FFh
.text:00402AB0		       lea     eax, [edi+8]
.text:00402AB3		       mov     [edi], eax
.text:00402AB5		       mov     dword ptr [edi+4], 0F0h
.text:00402ABC		       add     edi, 1000h
.text:00402AC2		       jmp     short loc_402AA0
.text:00402AC4 ; ---------------------------------------------------------------------------
.text:00402AC4
.text:00402AC4 loc_402AC4:			       ; CODE XREF: sub_4029B0+F7j
.text:00402AC4		       mov     eax, esi
.text:00402AC6		       jmp     short loc_402AEF
.text:00402AC8 ; ---------------------------------------------------------------------------
.text:00402AC8
.text:00402AC8 loc_402AC8:			       ; CODE XREF: sub_4029B0+63j
.text:00402AC8		       push    8000h	       ; dwFreeType
.text:00402ACD		       push    0	       ; dwSize
.text:00402ACF		       push    edi	       ; lpAddress
.text:00402AD0		       call    ds:VirtualFree
.text:00402AD6
.text:00402AD6 loc_402AD6:			       ; CODE XREF: sub_4029B0+4Bj
.text:00402AD6		       cmp     esi, offset off_4072E0
.text:00402ADC		       jz      short loc_402AED
.text:00402ADE		       push    esi	       ; lpMem
.text:00402ADF		       push    0	       ; dwFlags
.text:00402AE1		       push    hHeap	       ; hHeap
.text:00402AE7		       call    ds:HeapFree
.text:00402AED
.text:00402AED loc_402AED:			       ; CODE XREF: sub_4029B0+2Bj
.text:00402AED					       ; sub_4029B0+12Cj
.text:00402AED		       xor     eax, eax
.text:00402AEF
.text:00402AEF loc_402AEF:			       ; CODE XREF: sub_4029B0+116j
.text:00402AEF		       pop     edi
.text:00402AF0		       pop     esi
.text:00402AF1		       pop     ebp
.text:00402AF2		       pop     ebx
.text:00402AF3		       retn
.text:00402AF3 sub_4029B0      endp
.text:00402AF3
.text:00402AF4
.text:00402AF4 ; =============== S U B R O U T I N E =======================================
.text:00402AF4
.text:00402AF4
.text:00402AF4 ; int __cdecl sub_402AF4(LPVOID lpMem)
.text:00402AF4 sub_402AF4      proc near	       ; CODE XREF: sub_402B4A+A5p
.text:00402AF4
.text:00402AF4 lpMem	       = dword ptr  4
.text:00402AF4
.text:00402AF4		       push    esi
.text:00402AF5		       mov     esi, [esp+4+lpMem]
.text:00402AF9		       push    8000h	       ; dwFreeType
.text:00402AFE		       push    0	       ; dwSize
.text:00402B00		       push    dword ptr [esi+10h] ; lpAddress
.text:00402B03		       call    ds:VirtualFree
.text:00402B09		       cmp     off_409300, esi
.text:00402B0F		       jnz     short loc_402B19
.text:00402B11		       mov     eax, [esi+4]
.text:00402B14		       mov     off_409300, eax
.text:00402B19
.text:00402B19 loc_402B19:			       ; CODE XREF: sub_402AF4+1Bj
.text:00402B19		       cmp     esi, offset off_4072E0
.text:00402B1F		       jz      short loc_402B41
.text:00402B21		       mov     eax, [esi+4]
.text:00402B24		       mov     ecx, [esi]
.text:00402B26		       push    esi	       ; lpMem
.text:00402B27		       push    0	       ; dwFlags
.text:00402B29		       mov     [eax], ecx
.text:00402B2B		       mov     eax, [esi]
.text:00402B2D		       mov     ecx, [esi+4]
.text:00402B30		       mov     [eax+4],	ecx
.text:00402B33		       push    hHeap	       ; hHeap
.text:00402B39		       call    ds:HeapFree
.text:00402B3F		       pop     esi
.text:00402B40		       retn
.text:00402B41 ; ---------------------------------------------------------------------------
.text:00402B41
.text:00402B41 loc_402B41:			       ; CODE XREF: sub_402AF4+2Bj
.text:00402B41		       or      dword_4072F0, 0FFFFFFFFh
.text:00402B48		       pop     esi
.text:00402B49		       retn
.text:00402B49 sub_402AF4      endp
.text:00402B49
.text:00402B4A
.text:00402B4A ; =============== S U B R O U T I N E =======================================
.text:00402B4A
.text:00402B4A ; Attributes: bp-based frame
.text:00402B4A
.text:00402B4A sub_402B4A      proc near	       ; CODE XREF: sub_402C63+3Ep
.text:00402B4A
.text:00402B4A var_4	       = dword ptr -4
.text:00402B4A arg_0	       = dword ptr  8
.text:00402B4A
.text:00402B4A		       push    ebp
.text:00402B4B		       mov     ebp, esp
.text:00402B4D		       push    ecx
.text:00402B4E		       push    ebx
.text:00402B4F		       push    esi
.text:00402B50		       mov     esi, off_4072E4
.text:00402B56		       push    edi
.text:00402B57
.text:00402B57 loc_402B57:			       ; CODE XREF: sub_402B4A+B7j
.text:00402B57		       cmp     dword ptr [esi+10h], 0FFFFFFFFh
.text:00402B5B		       jz      loc_402BF5
.text:00402B61		       and     [ebp+var_4], 0
.text:00402B65		       lea     edi, [esi+2010h]
.text:00402B6B		       mov     ebx, 3FF000h
.text:00402B70
.text:00402B70 loc_402B70:			       ; CODE XREF: sub_402B4A+72j
.text:00402B70		       cmp     dword ptr [edi],	0F0h
.text:00402B76		       jnz     short loc_402BB1
.text:00402B78		       mov     eax, ebx
.text:00402B7A		       push    4000h	       ; dwFreeType
.text:00402B7F		       add     eax, [esi+10h]
.text:00402B82		       push    1000h	       ; dwSize
.text:00402B87		       push    eax	       ; lpAddress
.text:00402B88		       call    ds:VirtualFree
.text:00402B8E		       test    eax, eax
.text:00402B90		       jz      short loc_402BB1
.text:00402B92		       or      dword ptr [edi],	0FFFFFFFFh
.text:00402B95		       dec     dword_409CD0
.text:00402B9B		       mov     eax, [esi+0Ch]
.text:00402B9E		       test    eax, eax
.text:00402BA0		       jz      short loc_402BA6
.text:00402BA2		       cmp     eax, edi
.text:00402BA4		       jbe     short loc_402BA9
.text:00402BA6
.text:00402BA6 loc_402BA6:			       ; CODE XREF: sub_402B4A+56j
.text:00402BA6		       mov     [esi+0Ch], edi
.text:00402BA9
.text:00402BA9 loc_402BA9:			       ; CODE XREF: sub_402B4A+5Aj
.text:00402BA9		       inc     [ebp+var_4]
.text:00402BAC		       dec     [ebp+arg_0]
.text:00402BAF		       jz      short loc_402BBE
.text:00402BB1
.text:00402BB1 loc_402BB1:			       ; CODE XREF: sub_402B4A+2Cj
.text:00402BB1					       ; sub_402B4A+46j
.text:00402BB1		       sub     ebx, 1000h
.text:00402BB7		       sub     edi, 8
.text:00402BBA		       test    ebx, ebx
.text:00402BBC		       jge     short loc_402B70
.text:00402BBE
.text:00402BBE loc_402BBE:			       ; CODE XREF: sub_402B4A+65j
.text:00402BBE		       cmp     [ebp+var_4], 0
.text:00402BC2		       mov     ecx, esi
.text:00402BC4		       mov     esi, [esi+4]
.text:00402BC7		       jz      short loc_402BF5
.text:00402BC9		       cmp     dword ptr [ecx+18h], 0FFFFFFFFh
.text:00402BCD		       jnz     short loc_402BF5
.text:00402BCF		       push    1
.text:00402BD1		       lea     eax, [ecx+20h]
.text:00402BD4		       pop     edx
.text:00402BD5
.text:00402BD5 loc_402BD5:			       ; CODE XREF: sub_402B4A+9Aj
.text:00402BD5		       cmp     dword ptr [eax],	0FFFFFFFFh
.text:00402BD8		       jnz     short loc_402BE6
.text:00402BDA		       inc     edx
.text:00402BDB		       add     eax, 8
.text:00402BDE		       cmp     edx, 400h
.text:00402BE4		       jl      short loc_402BD5
.text:00402BE6
.text:00402BE6 loc_402BE6:			       ; CODE XREF: sub_402B4A+8Ej
.text:00402BE6		       cmp     edx, 400h
.text:00402BEC		       jnz     short loc_402BF5
.text:00402BEE		       push    ecx	       ; lpMem
.text:00402BEF		       call    sub_402AF4
.text:00402BF4		       pop     ecx
.text:00402BF5
.text:00402BF5 loc_402BF5:			       ; CODE XREF: sub_402B4A+11j
.text:00402BF5					       ; sub_402B4A+7Dj ...
.text:00402BF5		       cmp     esi, off_4072E4
.text:00402BFB		       jz      short loc_402C07
.text:00402BFD		       cmp     [ebp+arg_0], 0
.text:00402C01		       jg      loc_402B57
.text:00402C07
.text:00402C07 loc_402C07:			       ; CODE XREF: sub_402B4A+B1j
.text:00402C07		       pop     edi
.text:00402C08		       pop     esi
.text:00402C09		       pop     ebx
.text:00402C0A		       leave
.text:00402C0B		       retn
.text:00402C0B sub_402B4A      endp
.text:00402C0B
.text:00402C0C
.text:00402C0C ; =============== S U B R O U T I N E =======================================
.text:00402C0C
.text:00402C0C
.text:00402C0C sub_402C0C      proc near	       ; CODE XREF: sub_401B7A+90p
.text:00402C0C
.text:00402C0C arg_0	       = dword ptr  4
.text:00402C0C arg_4	       = dword ptr  8
.text:00402C0C arg_8	       = dword ptr  0Ch
.text:00402C0C
.text:00402C0C		       mov     eax, [esp+arg_0]
.text:00402C10		       mov     edx, offset off_4072E0
.text:00402C15		       push    esi
.text:00402C16		       mov     ecx, edx
.text:00402C18
.text:00402C18 loc_402C18:			       ; CODE XREF: sub_402C0C+1Cj
.text:00402C18		       cmp     eax, [ecx+10h]
.text:00402C1B		       jbe     short loc_402C22
.text:00402C1D		       cmp     eax, [ecx+14h]
.text:00402C20		       jb      short loc_402C2A
.text:00402C22
.text:00402C22 loc_402C22:			       ; CODE XREF: sub_402C0C+Fj
.text:00402C22		       mov     ecx, [ecx]
.text:00402C24		       cmp     ecx, edx
.text:00402C26		       jz      short loc_402C5F
.text:00402C28		       jmp     short loc_402C18
.text:00402C2A ; ---------------------------------------------------------------------------
.text:00402C2A
.text:00402C2A loc_402C2A:			       ; CODE XREF: sub_402C0C+14j
.text:00402C2A		       test    al, 0Fh
.text:00402C2C		       jnz     short loc_402C5F
.text:00402C2E		       mov     esi, eax
.text:00402C30		       mov     edx, 100h
.text:00402C35		       and     esi, 0FFFh
.text:00402C3B		       cmp     esi, edx
.text:00402C3D		       jb      short loc_402C5F
.text:00402C3F		       mov     esi, [esp+4+arg_4]
.text:00402C43		       mov     [esi], ecx
.text:00402C45		       mov     esi, [esp+4+arg_8]
.text:00402C49		       mov     ecx, eax
.text:00402C4B		       and     cx, 0F000h
.text:00402C50		       sub     eax, ecx
.text:00402C52		       mov     [esi], ecx
.text:00402C54		       sub     eax, edx
.text:00402C56		       pop     esi
.text:00402C57		       sar     eax, 4
.text:00402C5A		       lea     eax, [eax+ecx+8]
.text:00402C5E		       retn
.text:00402C5F ; ---------------------------------------------------------------------------
.text:00402C5F
.text:00402C5F loc_402C5F:			       ; CODE XREF: sub_402C0C+1Aj
.text:00402C5F					       ; sub_402C0C+20j ...
.text:00402C5F		       xor     eax, eax
.text:00402C61		       pop     esi
.text:00402C62		       retn
.text:00402C62 sub_402C0C      endp
.text:00402C62
.text:00402C63
.text:00402C63 ; =============== S U B R O U T I N E =======================================
.text:00402C63
.text:00402C63
.text:00402C63 sub_402C63      proc near	       ; CODE XREF: sub_401B7A+A6p
.text:00402C63
.text:00402C63 arg_0	       = dword ptr  4
.text:00402C63 arg_4	       = dword ptr  8
.text:00402C63 arg_8	       = dword ptr  0Ch
.text:00402C63
.text:00402C63		       mov     eax, [esp+arg_0]
.text:00402C67		       mov     ecx, [esp+arg_4]
.text:00402C6B		       sub     ecx, [eax+10h]
.text:00402C6E		       sar     ecx, 0Ch
.text:00402C71		       lea     eax, [eax+ecx*8+18h]
.text:00402C75		       mov     ecx, [esp+arg_8]
.text:00402C79		       movzx   edx, byte ptr [ecx]
.text:00402C7C		       add     [eax], edx
.text:00402C7E		       and     byte ptr	[ecx], 0
.text:00402C81		       cmp     dword ptr [eax],	0F0h
.text:00402C87		       mov     dword ptr [eax+4], 0F1h
.text:00402C8E		       jnz     short locret_402CA7
.text:00402C90		       inc     dword_409CD0
.text:00402C96		       cmp     dword_409CD0, 20h
.text:00402C9D		       jnz     short locret_402CA7
.text:00402C9F		       push    10h
.text:00402CA1		       call    sub_402B4A
.text:00402CA6		       pop     ecx
.text:00402CA7
.text:00402CA7 locret_402CA7:			       ; CODE XREF: sub_402C63+2Bj
.text:00402CA7					       ; sub_402C63+3Aj
.text:00402CA7		       retn
.text:00402CA7 sub_402C63      endp
.text:00402CA7
.text:00402CA8
.text:00402CA8 ; =============== S U B R O U T I N E =======================================
.text:00402CA8
.text:00402CA8 ; Attributes: bp-based frame
.text:00402CA8
.text:00402CA8 sub_402CA8      proc near	       ; CODE XREF: sub_401CA1+A7p
.text:00402CA8					       ; sub_404BA5+C4p
.text:00402CA8
.text:00402CA8 var_8	       = dword ptr -8
.text:00402CA8 var_4	       = dword ptr -4
.text:00402CA8 arg_0	       = dword ptr  8
.text:00402CA8
.text:00402CA8		       push    ebp
.text:00402CA9		       mov     ebp, esp
.text:00402CAB		       push    ecx
.text:00402CAC		       push    ecx
.text:00402CAD		       push    ebx
.text:00402CAE		       push    esi
.text:00402CAF		       mov     esi, off_409300
.text:00402CB5		       push    edi
.text:00402CB6
.text:00402CB6 loc_402CB6:			       ; CODE XREF: sub_402CA8+C6j
.text:00402CB6		       mov     edx, [esi+10h]
.text:00402CB9		       cmp     edx, 0FFFFFFFFh
.text:00402CBC		       jz      loc_402D61
.text:00402CC2		       mov     edi, [esi+8]
.text:00402CC5		       lea     ecx, [esi+2018h]
.text:00402CCB		       mov     eax, edi
.text:00402CCD		       sub     eax, esi
.text:00402CCF		       sub     eax, 18h
.text:00402CD2		       sar     eax, 3
.text:00402CD5		       shl     eax, 0Ch
.text:00402CD8		       add     eax, edx
.text:00402CDA		       cmp     edi, ecx
.text:00402CDC		       mov     [ebp+var_4], eax
.text:00402CDF		       jnb     short loc_402D1B
.text:00402CE1
.text:00402CE1 loc_402CE1:			       ; CODE XREF: sub_402CA8+6Fj
.text:00402CE1		       mov     ecx, [edi]
.text:00402CE3		       mov     ebx, [ebp+arg_0]
.text:00402CE6		       cmp     ecx, ebx
.text:00402CE8		       jl      short loc_402D04
.text:00402CEA		       cmp     [edi+4],	ebx
.text:00402CED		       jbe     short loc_402D04
.text:00402CEF		       push    ebx
.text:00402CF0		       push    ecx
.text:00402CF1		       push    eax
.text:00402CF2		       call    sub_402EB0
.text:00402CF7		       add     esp, 0Ch
.text:00402CFA		       test    eax, eax
.text:00402CFC		       jnz     short loc_402D73
.text:00402CFE		       mov     eax, [ebp+var_4]
.text:00402D01		       mov     [edi+4],	ebx
.text:00402D04
.text:00402D04 loc_402D04:			       ; CODE XREF: sub_402CA8+40j
.text:00402D04					       ; sub_402CA8+45j
.text:00402D04		       add     edi, 8
.text:00402D07		       lea     ecx, [esi+2018h]
.text:00402D0D		       add     eax, 1000h
.text:00402D12		       cmp     edi, ecx
.text:00402D14		       mov     [ebp+var_4], eax
.text:00402D17		       jb      short loc_402CE1
.text:00402D19		       jmp     short loc_402D1E
.text:00402D1B ; ---------------------------------------------------------------------------
.text:00402D1B
.text:00402D1B loc_402D1B:			       ; CODE XREF: sub_402CA8+37j
.text:00402D1B		       mov     ebx, [ebp+arg_0]
.text:00402D1E
.text:00402D1E loc_402D1E:			       ; CODE XREF: sub_402CA8+71j
.text:00402D1E		       mov     eax, [esi+8]
.text:00402D21		       mov     ecx, [esi+10h]
.text:00402D24		       lea     edi, [esi+18h]
.text:00402D27		       mov     [ebp+var_8], eax
.text:00402D2A		       cmp     edi, eax
.text:00402D2C		       mov     [ebp+var_4], ecx
.text:00402D2F		       jnb     short loc_402D64
.text:00402D31
.text:00402D31 loc_402D31:			       ; CODE XREF: sub_402CA8+B5j
.text:00402D31		       mov     eax, [edi]
.text:00402D33		       cmp     eax, ebx
.text:00402D35		       jl      short loc_402D50
.text:00402D37		       cmp     [edi+4],	ebx
.text:00402D3A		       jbe     short loc_402D50
.text:00402D3C		       push    ebx
.text:00402D3D		       push    eax
.text:00402D3E		       push    [ebp+var_4]
.text:00402D41		       call    sub_402EB0
.text:00402D46		       add     esp, 0Ch
.text:00402D49		       test    eax, eax
.text:00402D4B		       jnz     short loc_402D73
.text:00402D4D		       mov     [edi+4],	ebx
.text:00402D50
.text:00402D50 loc_402D50:			       ; CODE XREF: sub_402CA8+8Dj
.text:00402D50					       ; sub_402CA8+92j
.text:00402D50		       add     [ebp+var_4], 1000h
.text:00402D57		       add     edi, 8
.text:00402D5A		       cmp     edi, [ebp+var_8]
.text:00402D5D		       jb      short loc_402D31
.text:00402D5F		       jmp     short loc_402D64
.text:00402D61 ; ---------------------------------------------------------------------------
.text:00402D61
.text:00402D61 loc_402D61:			       ; CODE XREF: sub_402CA8+14j
.text:00402D61		       mov     ebx, [ebp+arg_0]
.text:00402D64
.text:00402D64 loc_402D64:			       ; CODE XREF: sub_402CA8+87j
.text:00402D64					       ; sub_402CA8+B7j
.text:00402D64		       mov     esi, [esi]
.text:00402D66		       cmp     esi, off_409300
.text:00402D6C		       jz      short loc_402D83
.text:00402D6E		       jmp     loc_402CB6
.text:00402D73 ; ---------------------------------------------------------------------------
.text:00402D73
.text:00402D73 loc_402D73:			       ; CODE XREF: sub_402CA8+54j
.text:00402D73					       ; sub_402CA8+A3j
.text:00402D73		       mov     off_409300, esi
.text:00402D79		       sub     [edi], ebx
.text:00402D7B		       mov     [esi+8],	edi
.text:00402D7E		       jmp     loc_402EAB
.text:00402D83 ; ---------------------------------------------------------------------------
.text:00402D83
.text:00402D83 loc_402D83:			       ; CODE XREF: sub_402CA8+C4j
.text:00402D83		       mov     eax, offset off_4072E0
.text:00402D88		       mov     edi, eax
.text:00402D8A
.text:00402D8A loc_402D8A:			       ; CODE XREF: sub_402CA8+F8j
.text:00402D8A		       cmp     dword ptr [edi+10h], 0FFFFFFFFh
.text:00402D8E		       jz      short loc_402D96
.text:00402D90		       cmp     dword ptr [edi+0Ch], 0
.text:00402D94		       jnz     short loc_402DA2
.text:00402D96
.text:00402D96 loc_402D96:			       ; CODE XREF: sub_402CA8+E6j
.text:00402D96		       mov     edi, [edi]
.text:00402D98		       cmp     edi, eax
.text:00402D9A		       jz      loc_402E77
.text:00402DA0		       jmp     short loc_402D8A
.text:00402DA2 ; ---------------------------------------------------------------------------
.text:00402DA2
.text:00402DA2 loc_402DA2:			       ; CODE XREF: sub_402CA8+ECj
.text:00402DA2		       mov     ebx, [edi+0Ch]
.text:00402DA5		       and     [ebp+var_4], 0
.text:00402DA9		       mov     esi, ebx
.text:00402DAB		       mov     eax, ebx
.text:00402DAD		       sub     esi, edi
.text:00402DAF		       sub     esi, 18h
.text:00402DB2		       sar     esi, 3
.text:00402DB5		       shl     esi, 0Ch
.text:00402DB8		       add     esi, [edi+10h]
.text:00402DBB		       cmp     dword ptr [ebx],	0FFFFFFFFh
.text:00402DBE		       jnz     short loc_402DD1
.text:00402DC0
.text:00402DC0 loc_402DC0:			       ; CODE XREF: sub_402CA8+127j
.text:00402DC0		       cmp     [ebp+var_4], 10h
.text:00402DC4		       jge     short loc_402DD1
.text:00402DC6		       add     eax, 8
.text:00402DC9		       inc     [ebp+var_4]
.text:00402DCC		       cmp     dword ptr [eax],	0FFFFFFFFh
.text:00402DCF		       jz      short loc_402DC0
.text:00402DD1
.text:00402DD1 loc_402DD1:			       ; CODE XREF: sub_402CA8+116j
.text:00402DD1					       ; sub_402CA8+11Cj
.text:00402DD1		       mov     eax, [ebp+var_4]
.text:00402DD4		       push    4	       ; flProtect
.text:00402DD6		       shl     eax, 0Ch
.text:00402DD9		       push    1000h	       ; flAllocationType
.text:00402DDE		       push    eax	       ; dwSize
.text:00402DDF		       push    esi	       ; lpAddress
.text:00402DE0		       mov     [ebp+var_8], eax
.text:00402DE3		       call    ds:VirtualAlloc
.text:00402DE9		       cmp     eax, esi
.text:00402DEB		       jnz     loc_402EA9
.text:00402DF1		       push    0	       ; size_t
.text:00402DF3		       push    [ebp+var_8]     ; int
.text:00402DF6		       push    esi	       ; void *
.text:00402DF7		       call    _memset
.text:00402DFC		       mov     edx, [ebp+var_4]
.text:00402DFF		       add     esp, 0Ch
.text:00402E02		       test    edx, edx
.text:00402E04		       mov     ecx, ebx
.text:00402E06		       jle     short loc_402E38
.text:00402E08		       lea     eax, [esi+4]
.text:00402E0B		       mov     [ebp+var_4], edx
.text:00402E0E
.text:00402E0E loc_402E0E:			       ; CODE XREF: sub_402CA8+18Ej
.text:00402E0E		       or      byte ptr	[eax+0F4h], 0FFh
.text:00402E15		       lea     edx, [eax+4]
.text:00402E18		       mov     [eax-4],	edx
.text:00402E1B		       mov     edx, 0F0h
.text:00402E20		       mov     [eax], edx
.text:00402E22		       mov     [ecx], edx
.text:00402E24		       mov     dword ptr [ecx+4], 0F1h
.text:00402E2B		       add     eax, 1000h
.text:00402E30		       add     ecx, 8
.text:00402E33		       dec     [ebp+var_4]
.text:00402E36		       jnz     short loc_402E0E
.text:00402E38
.text:00402E38 loc_402E38:			       ; CODE XREF: sub_402CA8+15Ej
.text:00402E38		       mov     off_409300, edi
.text:00402E3E		       lea     eax, [edi+2018h]
.text:00402E44
.text:00402E44 loc_402E44:			       ; CODE XREF: sub_402CA8+1A8j
.text:00402E44		       cmp     ecx, eax
.text:00402E46		       jnb     short loc_402E54
.text:00402E48		       cmp     dword ptr [ecx],	0FFFFFFFFh
.text:00402E4B		       jz      short loc_402E52
.text:00402E4D		       add     ecx, 8
.text:00402E50		       jmp     short loc_402E44
.text:00402E52 ; ---------------------------------------------------------------------------
.text:00402E52
.text:00402E52 loc_402E52:			       ; CODE XREF: sub_402CA8+1A3j
.text:00402E52		       cmp     ecx, eax
.text:00402E54
.text:00402E54 loc_402E54:			       ; CODE XREF: sub_402CA8+19Ej
.text:00402E54		       sbb     eax, eax
.text:00402E56		       and     eax, ecx
.text:00402E58		       mov     [edi+0Ch], eax
.text:00402E5B		       mov     eax, [ebp+arg_0]
.text:00402E5E		       mov     [esi+8],	al
.text:00402E61		       mov     [edi+8],	ebx
.text:00402E64		       sub     [ebx], eax
.text:00402E66		       sub     [esi+4],	eax
.text:00402E69		       lea     ecx, [esi+eax+8]
.text:00402E6D		       lea     eax, [esi+100h]
.text:00402E73		       mov     [esi], ecx
.text:00402E75		       jmp     short loc_402EAB
.text:00402E77 ; ---------------------------------------------------------------------------
.text:00402E77
.text:00402E77 loc_402E77:			       ; CODE XREF: sub_402CA8+F2j
.text:00402E77		       call    sub_4029B0
.text:00402E7C		       test    eax, eax
.text:00402E7E		       jz      short loc_402EA9
.text:00402E80		       mov     ecx, [eax+10h]
.text:00402E83		       mov     [ecx+8],	bl
.text:00402E86		       lea     edx, [ecx+ebx+8]
.text:00402E8A		       mov     off_409300, eax
.text:00402E8F		       mov     [ecx], edx
.text:00402E91		       mov     edx, 0F0h
.text:00402E96		       sub     edx, ebx
.text:00402E98		       mov     [ecx+4],	edx
.text:00402E9B		       movzx   edx, bl
.text:00402E9E		       sub     [eax+18h], edx
.text:00402EA1		       lea     eax, [ecx+100h]
.text:00402EA7		       jmp     short loc_402EAB
.text:00402EA9 ; ---------------------------------------------------------------------------
.text:00402EA9
.text:00402EA9 loc_402EA9:			       ; CODE XREF: sub_402CA8+143j
.text:00402EA9					       ; sub_402CA8+1D6j
.text:00402EA9		       xor     eax, eax
.text:00402EAB
.text:00402EAB loc_402EAB:			       ; CODE XREF: sub_402CA8+D6j
.text:00402EAB					       ; sub_402CA8+1CDj ...
.text:00402EAB		       pop     edi
.text:00402EAC		       pop     esi
.text:00402EAD		       pop     ebx
.text:00402EAE		       leave
.text:00402EAF		       retn
.text:00402EAF sub_402CA8      endp
.text:00402EAF
.text:00402EB0
.text:00402EB0 ; =============== S U B R O U T I N E =======================================
.text:00402EB0
.text:00402EB0 ; Attributes: bp-based frame
.text:00402EB0
.text:00402EB0 sub_402EB0      proc near	       ; CODE XREF: sub_402CA8+4Ap
.text:00402EB0					       ; sub_402CA8+99p
.text:00402EB0
.text:00402EB0 var_4	       = dword ptr -4
.text:00402EB0 arg_0	       = dword ptr  8
.text:00402EB0 arg_4	       = dword ptr  0Ch
.text:00402EB0 arg_8	       = dword ptr  10h
.text:00402EB0
.text:00402EB0		       push    ebp
.text:00402EB1		       mov     ebp, esp
.text:00402EB3		       push    ecx
.text:00402EB4		       mov     ecx, [ebp+arg_0]
.text:00402EB7		       mov     edx, [ebp+arg_8]
.text:00402EBA		       push    ebx
.text:00402EBB		       push    esi
.text:00402EBC		       mov     esi, [ecx+4]
.text:00402EBF		       push    edi
.text:00402EC0		       mov     edi, [ecx]
.text:00402EC2		       lea     ebx, [ecx+0F8h]
.text:00402EC8		       cmp     esi, edx
.text:00402ECA		       mov     [ebp+var_4], edi
.text:00402ECD		       mov     eax, edi
.text:00402ECF		       mov     [ebp+arg_0], ebx
.text:00402ED2		       jb      short loc_402EF5
.text:00402ED4		       lea     eax, [edi+edx]
.text:00402ED7		       mov     [edi], dl
.text:00402ED9		       cmp     eax, ebx
.text:00402EDB		       jnb     short loc_402EE4
.text:00402EDD		       add     [ecx], edx
.text:00402EDF		       sub     [ecx+4],	edx
.text:00402EE2		       jmp     short loc_402EED
.text:00402EE4 ; ---------------------------------------------------------------------------
.text:00402EE4
.text:00402EE4 loc_402EE4:			       ; CODE XREF: sub_402EB0+2Bj
.text:00402EE4		       and     dword ptr [ecx+4], 0
.text:00402EE8		       lea     eax, [ecx+8]
.text:00402EEB		       mov     [ecx], eax
.text:00402EED
.text:00402EED loc_402EED:			       ; CODE XREF: sub_402EB0+32j
.text:00402EED		       lea     eax, [edi+8]
.text:00402EF0		       jmp     loc_402FC3
.text:00402EF5 ; ---------------------------------------------------------------------------
.text:00402EF5
.text:00402EF5 loc_402EF5:			       ; CODE XREF: sub_402EB0+22j
.text:00402EF5		       add     esi, edi
.text:00402EF7		       cmp     byte ptr	[esi], 0
.text:00402EFA		       jz      short loc_402EFE
.text:00402EFC		       mov     eax, esi
.text:00402EFE
.text:00402EFE loc_402EFE:			       ; CODE XREF: sub_402EB0+4Aj
.text:00402EFE		       lea     esi, [eax+edx]
.text:00402F01		       cmp     esi, ebx
.text:00402F03		       jnb     short loc_402F48
.text:00402F05
.text:00402F05 loc_402F05:			       ; CODE XREF: sub_402EB0+96j
.text:00402F05		       mov     bl, [eax]
.text:00402F07		       test    bl, bl
.text:00402F09		       jnz     short loc_402F3B
.text:00402F0B		       push    1
.text:00402F0D		       lea     ebx, [eax+1]
.text:00402F10		       pop     esi
.text:00402F11
.text:00402F11 loc_402F11:			       ; CODE XREF: sub_402EB0+68j
.text:00402F11		       cmp     byte ptr	[ebx], 0
.text:00402F14		       jnz     short loc_402F1A
.text:00402F16		       inc     ebx
.text:00402F17		       inc     esi
.text:00402F18		       jmp     short loc_402F11
.text:00402F1A ; ---------------------------------------------------------------------------
.text:00402F1A
.text:00402F1A loc_402F1A:			       ; CODE XREF: sub_402EB0+64j
.text:00402F1A		       cmp     esi, edx
.text:00402F1C		       jnb     short loc_402F6C
.text:00402F1E		       cmp     eax, [ebp+var_4]
.text:00402F21		       jnz     short loc_402F28
.text:00402F23		       mov     [ecx+4],	esi
.text:00402F26		       jmp     short loc_402F34
.text:00402F28 ; ---------------------------------------------------------------------------
.text:00402F28
.text:00402F28 loc_402F28:			       ; CODE XREF: sub_402EB0+71j
.text:00402F28		       sub     [ebp+arg_4], esi
.text:00402F2B		       cmp     [ebp+arg_4], edx
.text:00402F2E		       jb      loc_402FCD
.text:00402F34
.text:00402F34 loc_402F34:			       ; CODE XREF: sub_402EB0+76j
.text:00402F34		       mov     edi, [ebp+var_4]
.text:00402F37		       mov     eax, ebx
.text:00402F39		       jmp     short loc_402F40
.text:00402F3B ; ---------------------------------------------------------------------------
.text:00402F3B
.text:00402F3B loc_402F3B:			       ; CODE XREF: sub_402EB0+59j
.text:00402F3B		       movzx   esi, bl
.text:00402F3E		       add     eax, esi
.text:00402F40
.text:00402F40 loc_402F40:			       ; CODE XREF: sub_402EB0+89j
.text:00402F40		       lea     esi, [eax+edx]
.text:00402F43		       cmp     esi, [ebp+arg_0]
.text:00402F46		       jb      short loc_402F05
.text:00402F48
.text:00402F48 loc_402F48:			       ; CODE XREF: sub_402EB0+53j
.text:00402F48		       lea     esi, [ecx+8]
.text:00402F4B
.text:00402F4B loc_402F4B:			       ; CODE XREF: sub_402EB0+EBj
.text:00402F4B					       ; sub_402EB0+F2j
.text:00402F4B		       cmp     esi, edi
.text:00402F4D		       jnb     short loc_402FCD
.text:00402F4F		       lea     eax, [esi+edx]
.text:00402F52		       cmp     eax, [ebp+arg_0]
.text:00402F55		       jnb     short loc_402FCD
.text:00402F57		       mov     al, [esi]
.text:00402F59		       test    al, al
.text:00402F5B		       jnz     short loc_402F9D
.text:00402F5D		       push    1
.text:00402F5F		       lea     ebx, [esi+1]
.text:00402F62		       pop     eax
.text:00402F63
.text:00402F63 loc_402F63:			       ; CODE XREF: sub_402EB0+BAj
.text:00402F63		       cmp     byte ptr	[ebx], 0
.text:00402F66		       jnz     short loc_402F8D
.text:00402F68		       inc     ebx
.text:00402F69		       inc     eax
.text:00402F6A		       jmp     short loc_402F63
.text:00402F6C ; ---------------------------------------------------------------------------
.text:00402F6C
.text:00402F6C loc_402F6C:			       ; CODE XREF: sub_402EB0+6Cj
.text:00402F6C		       lea     ebx, [eax+edx]
.text:00402F6F		       cmp     ebx, [ebp+arg_0]
.text:00402F72		       jnb     short loc_402F7D
.text:00402F74		       sub     esi, edx
.text:00402F76		       mov     [ecx], ebx
.text:00402F78		       mov     [ecx+4],	esi
.text:00402F7B		       jmp     short loc_402F86
.text:00402F7D ; ---------------------------------------------------------------------------
.text:00402F7D
.text:00402F7D loc_402F7D:			       ; CODE XREF: sub_402EB0+C2j
.text:00402F7D		       and     dword ptr [ecx+4], 0
.text:00402F81		       lea     esi, [ecx+8]
.text:00402F84		       mov     [ecx], esi
.text:00402F86
.text:00402F86 loc_402F86:			       ; CODE XREF: sub_402EB0+CBj
.text:00402F86		       mov     [eax], dl
.text:00402F88		       add     eax, 8
.text:00402F8B		       jmp     short loc_402FC3
.text:00402F8D ; ---------------------------------------------------------------------------
.text:00402F8D
.text:00402F8D loc_402F8D:			       ; CODE XREF: sub_402EB0+B6j
.text:00402F8D		       cmp     eax, edx
.text:00402F8F		       jnb     short loc_402FA4
.text:00402F91		       sub     [ebp+arg_4], eax
.text:00402F94		       cmp     [ebp+arg_4], edx
.text:00402F97		       jb      short loc_402FCD
.text:00402F99		       mov     esi, ebx
.text:00402F9B		       jmp     short loc_402F4B
.text:00402F9D ; ---------------------------------------------------------------------------
.text:00402F9D
.text:00402F9D loc_402F9D:			       ; CODE XREF: sub_402EB0+ABj
.text:00402F9D		       movzx   eax, al
.text:00402FA0		       add     esi, eax
.text:00402FA2		       jmp     short loc_402F4B
.text:00402FA4 ; ---------------------------------------------------------------------------
.text:00402FA4
.text:00402FA4 loc_402FA4:			       ; CODE XREF: sub_402EB0+DFj
.text:00402FA4		       lea     ebx, [esi+edx]
.text:00402FA7		       cmp     ebx, [ebp+arg_0]
.text:00402FAA		       jnb     short loc_402FB5
.text:00402FAC		       sub     eax, edx
.text:00402FAE		       mov     [ecx], ebx
.text:00402FB0		       mov     [ecx+4],	eax
.text:00402FB3		       jmp     short loc_402FBE
.text:00402FB5 ; ---------------------------------------------------------------------------
.text:00402FB5
.text:00402FB5 loc_402FB5:			       ; CODE XREF: sub_402EB0+FAj
.text:00402FB5		       and     dword ptr [ecx+4], 0
.text:00402FB9		       lea     eax, [ecx+8]
.text:00402FBC		       mov     [ecx], eax
.text:00402FBE
.text:00402FBE loc_402FBE:			       ; CODE XREF: sub_402EB0+103j
.text:00402FBE		       mov     [esi], dl
.text:00402FC0		       lea     eax, [esi+8]
.text:00402FC3
.text:00402FC3 loc_402FC3:			       ; CODE XREF: sub_402EB0+40j
.text:00402FC3					       ; sub_402EB0+DBj
.text:00402FC3		       imul    ecx, 0Fh
.text:00402FC6		       shl     eax, 4
.text:00402FC9		       sub     eax, ecx
.text:00402FCB		       jmp     short loc_402FCF
.text:00402FCD ; ---------------------------------------------------------------------------
.text:00402FCD
.text:00402FCD loc_402FCD:			       ; CODE XREF: sub_402EB0+7Ej
.text:00402FCD					       ; sub_402EB0+9Dj ...
.text:00402FCD		       xor     eax, eax
.text:00402FCF
.text:00402FCF loc_402FCF:			       ; CODE XREF: sub_402EB0+11Bj
.text:00402FCF		       pop     edi
.text:00402FD0		       pop     esi
.text:00402FD1		       pop     ebx
.text:00402FD2		       leave
.text:00402FD3		       retn
.text:00402FD3 sub_402EB0      endp
.text:00402FD3
.text:00402FD4 ; [00000020 BYTES: COLLAPSED FUNCTION __global_unwind2. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00402FF4 ; [00000022 BYTES: COLLAPSED FUNCTION __unwind_handler. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403016 ; [00000068 BYTES: COLLAPSED FUNCTION __local_unwind2. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040307E ; [00000023 BYTES: COLLAPSED FUNCTION __abnormal_termination. PRESS CTRL-NUMPAD+	TO EXPAND]
.text:004030A1 ; ---------------------------------------------------------------------------
.text:004030A1
.text:004030A1 __NLG_Notify1:
.text:004030A1		       push    ebx
.text:004030A2		       push    ecx
.text:004030A3		       mov     ebx, offset dword_409308
.text:004030A8		       jmp     short __NLG_Go
.text:004030AA ; [00000018 BYTES: COLLAPSED FUNCTION __NLG_Notify. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004030C2		       align 4
.text:004030C4		       push    esi
.text:004030C5		       inc     ebx
.text:004030C6		       xor     dh, [eax]
.text:004030C8		       pop     eax
.text:004030C9		       inc     ebx
.text:004030CA		       xor     [eax], dh
.text:004030CC ; [000000BD BYTES: COLLAPSED FUNCTION __except_handler3.	PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403189 ; [0000001B BYTES: COLLAPSED FUNCTION _seh_longjmp_unwind(x). PRESS CTRL-NUMPAD+	TO EXPAND]
.text:004031A4 ; [0000001B BYTES: COLLAPSED FUNCTION __callnewh. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004031BF ; [0000013E BYTES: COLLAPSED FUNCTION __XcptFilter. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004032FD ; [0000003A BYTES: COLLAPSED FUNCTION _xcptlookup. PRESS	CTRL-NUMPAD+ TO	EXPAND]
.text:00403337 ; [00000058 BYTES: COLLAPSED FUNCTION __wincmdln. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040338F ; [000000B9 BYTES: COLLAPSED FUNCTION __setenvp.	PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403448 ; [00000099 BYTES: COLLAPSED FUNCTION __setargv.	PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004034E1 ; [000001B4 BYTES: COLLAPSED FUNCTION _parse_cmdline. PRESS CTRL-NUMPAD+	TO EXPAND]
.text:00403695 ; [00000132 BYTES: COLLAPSED FUNCTION ___crtGetEnvironmentStringsA. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004037C7 ; [000001BC BYTES: COLLAPSED FUNCTION __ioinit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403983 ; [00000054 BYTES: COLLAPSED FUNCTION __mtinit. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004039D7 ; [00000013 BYTES: COLLAPSED FUNCTION __initptd.	PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004039EA ; [00000067 BYTES: COLLAPSED FUNCTION __getptd. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403A51 ; [00000039 BYTES: COLLAPSED FUNCTION __FF_MSGBANNER. PRESS CTRL-NUMPAD+	TO EXPAND]
.text:00403A8A ; [00000153 BYTES: COLLAPSED FUNCTION __NMSG_WRITE. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403BDD ; [00000017 BYTES: COLLAPSED FUNCTION _strtol. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403BF4 ; [00000205 BYTES: COLLAPSED FUNCTION _strtoxl. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403DF9		       align 10h
.text:00403E00 ; [00000005 BYTES: COLLAPSED CHUNK OF FUNCTION _strchr. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403E05		       align 10h
.text:00403E10 ; [000000BC BYTES: COLLAPSED FUNCTION _strchr. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403ECC		       align 10h
.text:00403ED0 ; [00000080 BYTES: COLLAPSED FUNCTION _strstr. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403F50 ; [00000038 BYTES: COLLAPSED FUNCTION _strncmp. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00403F88		       align 10h
.text:00403F90 ; [00000335 BYTES: COLLAPSED FUNCTION _memcpy. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004042C5 ; [00000011 BYTES: COLLAPSED FUNCTION __ismbblead. PRESS	CTRL-NUMPAD+ TO	EXPAND]
.text:004042D6 ; [00000031 BYTES: COLLAPSED FUNCTION _x_ismbbtype. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00404307 ; [000001AD BYTES: COLLAPSED FUNCTION __setmbcp.	PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004044B4 ; [0000004A BYTES: COLLAPSED FUNCTION _getSystemCP. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004044FE ; [00000033 BYTES: COLLAPSED FUNCTION _CPtoLCID.	PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00404531 ; [00000029 BYTES: COLLAPSED FUNCTION _setSBCS. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040455A ; [00000185 BYTES: COLLAPSED FUNCTION _setSBUpLow. PRESS	CTRL-NUMPAD+ TO	EXPAND]
.text:004046DF ; [0000001C BYTES: COLLAPSED FUNCTION ___initmbctable. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004046FB		       align 10h
.text:00404700 ; [00000007 BYTES: COLLAPSED FUNCTION _strcpy. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00404707		       align 10h
.text:00404710 ; [000000E0 BYTES: COLLAPSED FUNCTION _strcat. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004047F0 ; [0000007B BYTES: COLLAPSED FUNCTION _strlen. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040486B		       align 10h
.text:00404870 ; [00000335 BYTES: COLLAPSED FUNCTION _memcpy_0.	PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00404BA5
.text:00404BA5 ; =============== S U B R O U T I N E =======================================
.text:00404BA5
.text:00404BA5 ; Attributes: bp-based frame
.text:00404BA5
.text:00404BA5 sub_404BA5      proc near	       ; CODE XREF: __mtinit+1Ap
.text:00404BA5					       ; __getptd+20p
.text:00404BA5
.text:00404BA5 var_20	       = dword ptr -20h
.text:00404BA5 var_1C	       = dword ptr -1Ch
.text:00404BA5 ms_exc	       = CPPEH_RECORD ptr -18h
.text:00404BA5 arg_0	       = dword ptr  8
.text:00404BA5 arg_4	       = dword ptr  0Ch
.text:00404BA5
.text:00404BA5 ; FUNCTION CHUNK	AT .text:00404C47 SIZE 0000009B	BYTES
.text:00404BA5
.text:00404BA5		       push    ebp
.text:00404BA6		       mov     ebp, esp
.text:00404BA8		       push    0FFFFFFFFh
.text:00404BAA		       push    offset stru_4064A8
.text:00404BAF		       push    offset __except_handler3
.text:00404BB4		       mov     eax, large fs:0
.text:00404BBA		       push    eax
.text:00404BBB		       mov     large fs:0, esp
.text:00404BC2		       sub     esp, 18h
.text:00404BC5		       push    ebx
.text:00404BC6		       push    esi
.text:00404BC7		       push    edi
.text:00404BC8		       mov     esi, [ebp+arg_0]
.text:00404BCB		       imul    esi, [ebp+arg_4]
.text:00404BCF		       mov     [ebp+arg_4], esi
.text:00404BD2		       mov     [ebp+var_1C], esi
.text:00404BD5		       cmp     esi, 0FFFFFFE0h
.text:00404BD8		       ja      short loc_404BEE
.text:00404BDA		       xor     ebx, ebx
.text:00404BDC		       cmp     esi, ebx
.text:00404BDE		       jnz     short loc_404BE3
.text:00404BE0		       push    1
.text:00404BE2		       pop     esi
.text:00404BE3
.text:00404BE3 loc_404BE3:			       ; CODE XREF: sub_404BA5+39j
.text:00404BE3		       add     esi, 0Fh
.text:00404BE6		       and     esi, 0FFFFFFF0h
.text:00404BE9		       mov     [ebp+arg_4], esi
.text:00404BEC		       jmp     short loc_404BF0
.text:00404BEE ; ---------------------------------------------------------------------------
.text:00404BEE
.text:00404BEE loc_404BEE:			       ; CODE XREF: sub_404BA5+33j
.text:00404BEE		       xor     ebx, ebx
.text:00404BF0
.text:00404BF0 loc_404BF0:			       ; CODE XREF: sub_404BA5+47j
.text:00404BF0					       ; sub_404BA5+115j
.text:00404BF0		       mov     [ebp+var_20], ebx
.text:00404BF3		       cmp     esi, 0FFFFFFE0h
.text:00404BF6		       ja      loc_404CA4
.text:00404BFC		       mov     eax, dword_40A2E4
.text:00404C01		       cmp     eax, 3
.text:00404C04		       jnz     short loc_404C47
.text:00404C06		       mov     edi, [ebp+var_1C]
.text:00404C09		       cmp     edi, dword_40A2DC
.text:00404C0F		       ja      short loc_404C8D
.text:00404C11		       push    9
.text:00404C13		       call    __lock
.text:00404C18		       pop     ecx
.text:00404C19		       mov     [ebp+ms_exc.registration.TryLevel], ebx
.text:00404C1C		       push    edi
.text:00404C1D		       call    ___sbh_alloc_block
.text:00404C22		       pop     ecx
.text:00404C23		       mov     [ebp+var_20], eax
.text:00404C26		       or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
.text:00404C2A		       call    loc_404C3E
.text:00404C2F ; ---------------------------------------------------------------------------
.text:00404C2F
.text:00404C2F loc_404C2F:			       ; CODE XREF: sub_404BA5+A1j
.text:00404C2F		       cmp     [ebp+var_20], ebx
.text:00404C32		       jz      short loc_404C92
.text:00404C34		       push    [ebp+var_1C]
.text:00404C37		       jmp     short loc_404C81
.text:00404C39 ; ---------------------------------------------------------------------------
.text:00404C39
.text:00404C39 loc_404C39:			       ; DATA XREF: .rdata:stru_4064A8o
.text:00404C39		       xor     ebx, ebx	       ; Finally handler 0 for function	404BA5
.text:00404C3B		       mov     esi, [ebp+arg_4]
.text:00404C3E
.text:00404C3E loc_404C3E:			       ; CODE XREF: sub_404BA5+85j
.text:00404C3E		       push    9
.text:00404C40		       call    __unlock
.text:00404C45		       pop     ecx
.text:00404C46		       retn
.text:00404C46 sub_404BA5      endp
.text:00404C46
.text:00404C47 ; ---------------------------------------------------------------------------
.text:00404C47 ; START OF FUNCTION CHUNK FOR sub_404BA5
.text:00404C47
.text:00404C47 loc_404C47:			       ; CODE XREF: sub_404BA5+5Fj
.text:00404C47		       cmp     eax, 2
.text:00404C4A		       jnz     short loc_404C8D
.text:00404C4C		       cmp     esi, dword_409304
.text:00404C52		       ja      short loc_404C8D
.text:00404C54		       push    9
.text:00404C56		       call    __lock
.text:00404C5B		       pop     ecx
.text:00404C5C		       mov     [ebp+ms_exc.registration.TryLevel], 1
.text:00404C63		       mov     eax, esi
.text:00404C65		       shr     eax, 4
.text:00404C68		       push    eax
.text:00404C69		       call    sub_402CA8
.text:00404C6E		       pop     ecx
.text:00404C6F		       mov     [ebp+var_20], eax
.text:00404C72		       or      [ebp+ms_exc.registration.TryLevel], 0FFFFFFFFh
.text:00404C76		       call    loc_404CC7
.text:00404C7B ; ---------------------------------------------------------------------------
.text:00404C7B
.text:00404C7B loc_404C7B:			       ; CODE XREF: sub_404BA5+12Aj
.text:00404C7B		       cmp     [ebp+var_20], ebx
.text:00404C7E		       jz      short loc_404C92
.text:00404C80		       push    esi	       ; size_t
.text:00404C81
.text:00404C81 loc_404C81:			       ; CODE XREF: sub_404BA5+92j
.text:00404C81		       push    ebx	       ; int
.text:00404C82		       push    [ebp+var_20]    ; void *
.text:00404C85		       call    _memset
.text:00404C8A		       add     esp, 0Ch
.text:00404C8D
.text:00404C8D loc_404C8D:			       ; CODE XREF: sub_404BA5+6Aj
.text:00404C8D					       ; sub_404BA5+A5j ...
.text:00404C8D		       cmp     [ebp+var_20], ebx
.text:00404C90		       jnz     short loc_404CD0
.text:00404C92
.text:00404C92 loc_404C92:			       ; CODE XREF: sub_404BA5+8Dj
.text:00404C92					       ; sub_404BA5+D9j
.text:00404C92		       push    esi	       ; dwBytes
.text:00404C93		       push    8	       ; dwFlags
.text:00404C95		       push    hHeap	       ; hHeap
.text:00404C9B		       call    ds:HeapAlloc
.text:00404CA1		       mov     [ebp+var_20], eax
.text:00404CA4
.text:00404CA4 loc_404CA4:			       ; CODE XREF: sub_404BA5+51j
.text:00404CA4		       cmp     [ebp+var_20], ebx
.text:00404CA7		       jnz     short loc_404CD0
.text:00404CA9		       cmp     dword_409CD4, ebx
.text:00404CAF		       jz      short loc_404CD0
.text:00404CB1		       push    esi
.text:00404CB2		       call    __callnewh
.text:00404CB7		       pop     ecx
.text:00404CB8		       test    eax, eax
.text:00404CBA		       jnz     loc_404BF0
.text:00404CC0		       jmp     short loc_404CD3
.text:00404CC2 ; ---------------------------------------------------------------------------
.text:00404CC2
.text:00404CC2 loc_404CC2:			       ; DATA XREF: .rdata:stru_4064A8o
.text:00404CC2		       xor     ebx, ebx	       ; Finally handler 1 for function	404BA5
.text:00404CC4		       mov     esi, [ebp+arg_4]
.text:00404CC7
.text:00404CC7 loc_404CC7:			       ; CODE XREF: sub_404BA5+D1j
.text:00404CC7		       push    9
.text:00404CC9		       call    __unlock
.text:00404CCE		       pop     ecx
.text:00404CCF		       retn
.text:00404CD0 ; ---------------------------------------------------------------------------
.text:00404CD0
.text:00404CD0 loc_404CD0:			       ; CODE XREF: sub_404BA5+EBj
.text:00404CD0					       ; sub_404BA5+102j ...
.text:00404CD0		       mov     eax, [ebp+var_20]
.text:00404CD3
.text:00404CD3 loc_404CD3:			       ; CODE XREF: sub_404BA5+11Bj
.text:00404CD3		       mov     ecx, [ebp+ms_exc.registration.Next]
.text:00404CD6		       mov     large fs:0, ecx
.text:00404CDD		       pop     edi
.text:00404CDE		       pop     esi
.text:00404CDF		       pop     ebx
.text:00404CE0		       leave
.text:00404CE1		       retn
.text:00404CE1 ; END OF	FUNCTION CHUNK FOR sub_404BA5
.text:00404CE2 ; [00000089 BYTES: COLLAPSED FUNCTION ___crtMessageBoxA.	PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00404D6B		       align 10h
.text:00404D70 ; [000000FE BYTES: COLLAPSED FUNCTION _strncpy. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00404E6E ; [00000009 BYTES: COLLAPSED FUNCTION __errno. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00404E77 ; [0000006F BYTES: COLLAPSED FUNCTION _toupper. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00404EE6 ; [000000CC BYTES: COLLAPSED FUNCTION _toupper_0. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00404FB2 ; [00000075 BYTES: COLLAPSED FUNCTION __isctype.	PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405027 ; [00000224 BYTES: COLLAPSED FUNCTION ___crtLCMapStringA. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040524B ; [0000002B BYTES: COLLAPSED FUNCTION _strncnt. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405276 ; [00000149 BYTES: COLLAPSED FUNCTION ___crtGetStringTypeA. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004053BF		       align 10h
.text:004053C0 ; [00000084 BYTES: COLLAPSED FUNCTION _strcmp. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405444		       align 10h
.text:00405450 ; [0000003E BYTES: COLLAPSED FUNCTION _strcspn. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040548E		       align 10h
.text:00405490 ; [0000003A BYTES: COLLAPSED FUNCTION _strpbrk. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004054CA		       align 10h
.text:004054D0 ; [000000D0 BYTES: COLLAPSED FUNCTION __strcmpi.	PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004055A0 ; [00000101 BYTES: COLLAPSED FUNCTION __strnicmp. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:004056A1		       align 10h
.text:004056B0
.text:004056B0 __aulldiv:
.text:004056B0		       push    ebx
.text:004056B1		       push    esi
.text:004056B2		       mov     eax, [esp+18h]
.text:004056B6		       or      eax, eax
.text:004056B8		       jnz     short loc_4056D2
.text:004056BA		       mov     ecx, [esp+14h]
.text:004056BE		       mov     eax, [esp+10h]
.text:004056C2		       xor     edx, edx
.text:004056C4		       div     ecx
.text:004056C6		       mov     ebx, eax
.text:004056C8		       mov     eax, [esp+0Ch]
.text:004056CC		       div     ecx
.text:004056CE		       mov     edx, ebx
.text:004056D0		       jmp     short loc_405713
.text:004056D2 ; ---------------------------------------------------------------------------
.text:004056D2
.text:004056D2 loc_4056D2:			       ; CODE XREF: .text:004056B8j
.text:004056D2		       mov     ecx, eax
.text:004056D4		       mov     ebx, [esp+14h]
.text:004056D8		       mov     edx, [esp+10h]
.text:004056DC		       mov     eax, [esp+0Ch]
.text:004056E0
.text:004056E0 loc_4056E0:			       ; CODE XREF: .text:004056EAj
.text:004056E0		       shr     ecx, 1
.text:004056E2		       rcr     ebx, 1
.text:004056E4		       shr     edx, 1
.text:004056E6		       rcr     eax, 1
.text:004056E8		       or      ecx, ecx
.text:004056EA		       jnz     short loc_4056E0
.text:004056EC		       div     ebx
.text:004056EE		       mov     esi, eax
.text:004056F0		       mul     dword ptr [esp+18h]
.text:004056F4		       mov     ecx, eax
.text:004056F6		       mov     eax, [esp+14h]
.text:004056FA		       mul     esi
.text:004056FC		       add     edx, ecx
.text:004056FE		       jb      short loc_40570E
.text:00405700		       cmp     edx, [esp+10h]
.text:00405704		       ja      short loc_40570E
.text:00405706		       jb      short loc_40570F
.text:00405708		       cmp     eax, [esp+0Ch]
.text:0040570C		       jbe     short loc_40570F
.text:0040570E
.text:0040570E loc_40570E:			       ; CODE XREF: .text:004056FEj
.text:0040570E					       ; .text:00405704j
.text:0040570E		       dec     esi
.text:0040570F
.text:0040570F loc_40570F:			       ; CODE XREF: .text:00405706j
.text:0040570F					       ; .text:0040570Cj
.text:0040570F		       xor     edx, edx
.text:00405711		       mov     eax, esi
.text:00405713
.text:00405713 loc_405713:			       ; CODE XREF: .text:004056D0j
.text:00405713		       pop     esi
.text:00405714		       pop     ebx
.text:00405715		       retn    10h
.text:00405715 ; ---------------------------------------------------------------------------
.text:00405718		       align 10h
.text:00405720
.text:00405720 __aullrem:
.text:00405720		       push    ebx
.text:00405721		       mov     eax, [esp+14h]
.text:00405725		       or      eax, eax
.text:00405727		       jnz     short loc_405741
.text:00405729		       mov     ecx, [esp+10h]
.text:0040572D		       mov     eax, [esp+0Ch]
.text:00405731		       xor     edx, edx
.text:00405733		       div     ecx
.text:00405735		       mov     eax, [esp+8]
.text:00405739		       div     ecx
.text:0040573B		       mov     eax, edx
.text:0040573D		       xor     edx, edx
.text:0040573F		       jmp     short loc_405791
.text:00405741 ; ---------------------------------------------------------------------------
.text:00405741
.text:00405741 loc_405741:			       ; CODE XREF: .text:00405727j
.text:00405741		       mov     ecx, eax
.text:00405743		       mov     ebx, [esp+10h]
.text:00405747		       mov     edx, [esp+0Ch]
.text:0040574B		       mov     eax, [esp+8]
.text:0040574F
.text:0040574F loc_40574F:			       ; CODE XREF: .text:00405759j
.text:0040574F		       shr     ecx, 1
.text:00405751		       rcr     ebx, 1
.text:00405753		       shr     edx, 1
.text:00405755		       rcr     eax, 1
.text:00405757		       or      ecx, ecx
.text:00405759		       jnz     short loc_40574F
.text:0040575B		       div     ebx
.text:0040575D		       mov     ecx, eax
.text:0040575F		       mul     dword ptr [esp+14h]
.text:00405763		       xchg    eax, ecx
.text:00405764		       mul     dword ptr [esp+10h]
.text:00405768		       add     edx, ecx
.text:0040576A		       jb      short loc_40577A
.text:0040576C		       cmp     edx, [esp+0Ch]
.text:00405770		       ja      short loc_40577A
.text:00405772		       jb      short loc_405782
.text:00405774		       cmp     eax, [esp+8]
.text:00405778		       jbe     short loc_405782
.text:0040577A
.text:0040577A loc_40577A:			       ; CODE XREF: .text:0040576Aj
.text:0040577A					       ; .text:00405770j
.text:0040577A		       sub     eax, [esp+10h]
.text:0040577E		       sbb     edx, [esp+14h]
.text:00405782
.text:00405782 loc_405782:			       ; CODE XREF: .text:00405772j
.text:00405782					       ; .text:00405778j
.text:00405782		       sub     eax, [esp+8]
.text:00405786		       sbb     edx, [esp+0Ch]
.text:0040578A		       neg     edx
.text:0040578C		       neg     eax
.text:0040578E		       sbb     edx, 0
.text:00405791
.text:00405791 loc_405791:			       ; CODE XREF: .text:0040573Fj
.text:00405791		       pop     ebx
.text:00405792		       retn    10h
.text:00405795 ; [000000CB BYTES: COLLAPSED FUNCTION _tolower. PRESS CTRL-NUMPAD+ TO EXPAND]
.text:00405860 ; ---------------------------------------------------------------------------
.text:00405860
.text:00405860 __allmul:
.text:00405860		       mov     eax, [esp+8]
.text:00405864		       mov     ecx, [esp+10h]
.text:00405868		       or      ecx, eax
.text:0040586A		       mov     ecx, [esp+0Ch]
.text:0040586E		       jnz     short hard
.text:00405870		       mov     eax, [esp+4]
.text:00405874		       mul     ecx
.text:00405876		       retn    10h
.text:00405879 ; ---------------------------------------------------------------------------
.text:00405879
.text:00405879 hard:				       ; CODE XREF: .text:0040586Ej
.text:00405879		       push    ebx
.text:0040587A		       mul     ecx
.text:0040587C		       mov     ebx, eax
.text:0040587E		       mov     eax, [esp+8]
.text:00405882		       mul     dword ptr [esp+14h]
.text:00405886		       add     ebx, eax
.text:00405888		       mov     eax, [esp+8]
.text:0040588C		       mul     ecx
.text:0040588E		       add     edx, ebx
.text:00405890		       pop     ebx
.text:00405891		       retn    10h
.text:00405894 ; [00000006 BYTES: COLLAPSED FUNCTION RtlUnwind.	PRESS CTRL-NUMPAD+ TO EXPAND]
.text:0040589A		       align 800h
.text:0040589A _text	       ends
.text:0040589A
.idata:00406000	; Section 2. (virtual address 00006000)
.idata:00406000	; Virtual size			: 00000D64 (   3428.)
.idata:00406000	; Section size in file		: 00001000 (   4096.)
.idata:00406000	; Offset to raw	data for section: 00006000
.idata:00406000	; Flags	40000040: Data Readable
.idata:00406000	; Alignment	: default
.idata:00406000	;
.idata:00406000	; Imports from KERNEL32.dll
.idata:00406000	;
.idata:00406000	; ===========================================================================
.idata:00406000
.idata:00406000	; Segment type:	Externs
.idata:00406000	; _idata
.idata:00406000	; int __stdcall	lstrcmpiA(LPCSTR lpString1, LPCSTR lpString2)
.idata:00406000			extrn lstrcmpiA:dword	; CODE XREF: WinMain(x,x,x,x)+137p
.idata:00406000						; DATA XREF: WinMain(x,x,x,x)+137r ...
.idata:00406004	; LPSTR	__stdcall lstrcpyA(LPSTR lpString1, LPCSTR lpString2)
.idata:00406004			extrn lstrcpyA:dword	; CODE XREF: WinMain(x,x,x,x)+65p
.idata:00406004						; WinMain(x,x,x,x)+A7p	...
.idata:00406008	; int __stdcall	lstrlenA(LPCSTR	lpString)
.idata:00406008			extrn lstrlenA:dword	; CODE XREF: WinMain(x,x,x,x)+55p
.idata:00406008						; WinMain(x,x,x,x)+D3p	...
.idata:0040600C	; HFILE	__stdcall lclose(HFILE hFile)
.idata:0040600C			extrn _lclose:dword	; CODE XREF: sub_401203+12p
.idata:0040600C						; sub_401674+B6p
.idata:0040600C						; DATA XREF: ...
.idata:00406010	; BOOL __stdcall RemoveDirectoryA(LPCSTR lpPathName)
.idata:00406010			extrn RemoveDirectoryA:dword ; CODE XREF: sub_40121C+56p
.idata:00406010						; sub_4013E3+138p
.idata:00406010						; DATA XREF: ...
.idata:00406014	; BOOL __stdcall DeleteFileA(LPCSTR lpFileName)
.idata:00406014			extrn DeleteFileA:dword	; CODE XREF: sub_40121C+49p
.idata:00406014						; sub_4013E3+E6p ...
.idata:00406018	; DWORD	__stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename,	DWORD nSize)
.idata:00406018			extrn GetModuleFileNameA:dword ; CODE XREF: sub_40127D+Ep
.idata:00406018						; sub_401FBA+B4p ...
.idata:0040601C	; UINT __stdcall lread(HFILE hFile, LPVOID lpBuffer, UINT uBytes)
.idata:0040601C			extrn _lread:dword	; CODE XREF: sub_401292+96p
.idata:0040601C						; sub_401292+119p ...
.idata:00406020	; LONG __stdcall llseek(HFILE hFile, LONG lOffset, int iOrigin)
.idata:00406020			extrn _llseek:dword	; CODE XREF: sub_401292+86p
.idata:00406020						; sub_401292+108p ...
.idata:00406024	; HFILE	__stdcall lopen(LPCSTR lpPathName, int iReadWrite)
.idata:00406024			extrn _lopen:dword	; CODE XREF: sub_401292+15p
.idata:00406024						; DATA XREF: sub_401292+15r
.idata:00406028	; BOOL __stdcall GetDiskFreeSpaceA(LPCSTR lpRootPathName, LPDWORD lpSectorsPerCluster, LPDWORD lpBytesPerSector, LPDWORD lpNumberOfFreeClusters, LPDWORD lpTotalNumberOfClusters)
.idata:00406028			extrn GetDiskFreeSpaceA:dword ;	CODE XREF: sub_4013E3+249p
.idata:00406028						; DATA XREF: sub_4013E3+249r
.idata:0040602C	; BOOL __stdcall SetCurrentDirectoryA(LPCSTR lpPathName)
.idata:0040602C			extrn SetCurrentDirectoryA:dword
.idata:0040602C						; CODE XREF: sub_4013E3+180p
.idata:0040602C						; sub_4013E3+1A6p ...
.idata:00406030	; BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
.idata:00406030			extrn CreateDirectoryA:dword ; CODE XREF: sub_4013E3+15Bp
.idata:00406030						; sub_4013E3+19Dp ...
.idata:00406034	; DWORD	__stdcall GetFileAttributesA(LPCSTR lpFileName)
.idata:00406034			extrn GetFileAttributesA:dword ; CODE XREF: sub_4013E3+141p
.idata:00406034						; DATA XREF: sub_4013E3+141r
.idata:00406038	; LPSTR	__stdcall lstrcatA(LPSTR lpString1, LPCSTR lpString2)
.idata:00406038			extrn lstrcatA:dword	; CODE XREF: sub_4013E3+95p
.idata:00406038						; sub_4013E3+1E4p ...
.idata:0040603C	; DWORD	__stdcall GetTempPathA(DWORD nBufferLength, LPSTR lpBuffer)
.idata:0040603C			extrn GetTempPathA:dword ; CODE	XREF: sub_4013E3+42p
.idata:0040603C						; DATA XREF: sub_4013E3+42r
.idata:00406040	; DWORD	__stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer)
.idata:00406040			extrn GetCurrentDirectoryA:dword ; CODE	XREF: sub_4013E3+22p
.idata:00406040						; DATA XREF: sub_4013E3+22r
.idata:00406044	; UINT __stdcall lwrite(HFILE hFile, LPCCH lpBuffer, UINT uBytes)
.idata:00406044			extrn _lwrite:dword	; CODE XREF: sub_401674+89p
.idata:00406044						; DATA XREF: sub_401674+89r
.idata:00406048	; HFILE	__stdcall lcreat(LPCSTR	lpPathName, int	iAttribute)
.idata:00406048			extrn _lcreat:dword	; CODE XREF: sub_401674+4Ap
.idata:00406048						; DATA XREF: sub_401674+4Ar
.idata:0040604C	; BOOL __stdcall CloseHandle(HANDLE hObject)
.idata:0040604C			extrn CloseHandle:dword	; CODE XREF: sub_4017EE+1BDp
.idata:0040604C						; sub_4017EE+1C2p
.idata:0040604C						; DATA XREF: ...
.idata:00406050	; BOOL __stdcall GetExitCodeProcess(HANDLE hProcess, LPDWORD lpExitCode)
.idata:00406050			extrn GetExitCodeProcess:dword ; CODE XREF: sub_4017EE+1ACp
.idata:00406050						; DATA XREF: sub_4017EE+1ACr
.idata:00406054	; BOOL __stdcall CreateProcessA(LPCSTR lpApplicationName, LPSTR	lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES	lpThreadAttributes, BOOL bInheritHandles, DWORD	dwCreationFlags, LPVOID	lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo,	LPPROCESS_INFORMATION lpProcessInformation)
.idata:00406054			extrn CreateProcessA:dword ; CODE XREF:	sub_4017EE+12Ep
.idata:00406054						; DATA XREF: sub_4017EE+12Er
.idata:00406058	; void __stdcall __noreturn ExitProcess(UINT uExitCode)
.idata:00406058			extrn ExitProcess:dword	; CODE XREF: _doexit+9Dp
.idata:00406058						; _fast_error_exit+1Dp
.idata:00406058						; DATA XREF: ...
.idata:0040605C	; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
.idata:0040605C			extrn TerminateProcess:dword ; CODE XREF: _doexit+1Cp
.idata:0040605C						; DATA XREF: _doexit+1Cr
.idata:00406060	; HANDLE __stdcall GetCurrentProcess()
.idata:00406060			extrn GetCurrentProcess:dword ;	CODE XREF: _doexit+15p
.idata:00406060						; DATA XREF: _doexit+15r
.idata:00406064	; BOOL __stdcall HeapFree(HANDLE hHeap,	DWORD dwFlags, LPVOID lpMem)
.idata:00406064			extrn HeapFree:dword	; CODE XREF: sub_401B7A+D4p
.idata:00406064						; sub_4021D2+2C5p ...
.idata:00406068	; LPVOID __stdcall HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)
.idata:00406068			extrn HeapAlloc:dword	; CODE XREF: sub_401CA1+E7p
.idata:00406068						; ___sbh_heap_init+Dp ...
.idata:0040606C	; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
.idata:0040606C			extrn GetModuleHandleA:dword ; CODE XREF: start+D4p
.idata:0040606C						; sub_401F8D+Ap
.idata:0040606C						; DATA XREF: ...
.idata:00406070	; void __stdcall GetStartupInfoA(LPSTARTUPINFOA	lpStartupInfo)
.idata:00406070			extrn GetStartupInfoA:dword ; CODE XREF: start+B1p
.idata:00406070						; __ioinit+5Ep
.idata:00406070						; DATA XREF: ...
.idata:00406074	; LPSTR	__stdcall GetCommandLineA()
.idata:00406074			extrn GetCommandLineA:dword ; CODE XREF: start+86p
.idata:00406074						; DATA XREF: start+86r
.idata:00406078	; DWORD	__stdcall GetVersion()
.idata:00406078			extrn GetVersion:dword	; CODE XREF: start+26p
.idata:00406078						; DATA XREF: start+26r
.idata:0040607C	; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
.idata:0040607C			extrn InitializeCriticalSection:dword
.idata:0040607C						; CODE XREF: __mtinitlocks+Dp
.idata:0040607C						; __mtinitlocks+15p ...
.idata:00406080	; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
.idata:00406080			extrn EnterCriticalSection:dword ; CODE	XREF: __lock+58p
.idata:00406080						; DATA XREF: __lock+58r
.idata:00406084	; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
.idata:00406084			extrn LeaveCriticalSection:dword ; CODE	XREF: __unlock+Dp
.idata:00406084						; DATA XREF: __unlock+Dr
.idata:00406088	; DWORD	__stdcall GetEnvironmentVariableA(LPCSTR lpName, LPSTR lpBuffer, DWORD nSize)
.idata:00406088			extrn GetEnvironmentVariableA:dword
.idata:00406088						; CODE XREF: sub_401FBA+54p
.idata:00406088						; DATA XREF: sub_401FBA+54r
.idata:0040608C	; BOOL __stdcall GetVersionExA(LPOSVERSIONINFOA	lpVersionInformation)
.idata:0040608C			extrn GetVersionExA:dword ; CODE XREF: sub_401FBA+1Fp
.idata:0040608C						; DATA XREF: sub_401FBA+1Fr
.idata:00406090	; BOOL __stdcall HeapDestroy(HANDLE hHeap)
.idata:00406090			extrn HeapDestroy:dword	; CODE XREF: sub_402102+50p
.idata:00406090						; DATA XREF: sub_402102+50r
.idata:00406094	; HANDLE __stdcall HeapCreate(DWORD flOptions, SIZE_T dwInitialSize, SIZE_T dwMaximumSize)
.idata:00406094			extrn HeapCreate:dword	; CODE XREF: sub_402102+11p
.idata:00406094						; DATA XREF: sub_402102+11r
.idata:00406098	; BOOL __stdcall VirtualFree(LPVOID lpAddress, SIZE_T dwSize, DWORD dwFreeType)
.idata:00406098			extrn VirtualFree:dword	; CODE XREF: sub_4021D2+258p
.idata:00406098						; sub_4021D2+2B3p ...
.idata:0040609C	; LPVOID __stdcall VirtualAlloc(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect)
.idata:0040609C			extrn VirtualAlloc:dword
.idata:0040609C						; CODE XREF: ___sbh_alloc_new_region+76p
.idata:0040609C						; ___sbh_alloc_new_group+51p ...
.idata:004060A0	; LPVOID __stdcall HeapReAlloc(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem, SIZE_T dwBytes)
.idata:004060A0			extrn HeapReAlloc:dword	; CODE XREF: ___sbh_alloc_new_region+28p
.idata:004060A0						; DATA XREF: ___sbh_alloc_new_region+28r
.idata:004060A4	; void __stdcall RtlUnwind(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD	ExceptionRecord, PVOID ReturnValue)
.idata:004060A4			extrn __imp_RtlUnwind:dword ; DATA XREF: RtlUnwindr
.idata:004060A8	; LONG __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
.idata:004060A8			extrn UnhandledExceptionFilter:dword
.idata:004060A8						; CODE XREF: __XcptFilter+134p
.idata:004060A8						; DATA XREF: __XcptFilter+134r
.idata:004060AC	; BOOL __stdcall FreeEnvironmentStringsA(LPCH)
.idata:004060AC			extrn FreeEnvironmentStringsA:dword
.idata:004060AC						; CODE XREF: ___crtGetEnvironmentStringsA+11Fp
.idata:004060AC						; DATA XREF: ___crtGetEnvironmentStringsA+11Fr
.idata:004060B0	; BOOL __stdcall FreeEnvironmentStringsW(LPWCH)
.idata:004060B0			extrn FreeEnvironmentStringsW:dword
.idata:004060B0						; CODE XREF: ___crtGetEnvironmentStringsA+CEp
.idata:004060B0						; DATA XREF: ___crtGetEnvironmentStringsA+CEr
.idata:004060B4	; int __stdcall	WideCharToMultiByte(UINT CodePage, DWORD dwFlags, LPCWSTR lpWideCharStr, int cchWideChar, LPSTR	lpMultiByteStr,	int cbMultiByte, LPCSTR	lpDefaultChar, LPBOOL lpUsedDefaultChar)
.idata:004060B4			extrn WideCharToMultiByte:dword
.idata:004060B4						; CODE XREF: ___crtGetEnvironmentStringsA+93p
.idata:004060B4						; ___crtGetEnvironmentStringsA+B5p ...
.idata:004060B8	; LPCH __stdcall GetEnvironmentStrings()
.idata:004060B8			extrn GetEnvironmentStrings:dword
.idata:004060B8						; CODE XREF: ___crtGetEnvironmentStringsA:loc_4036C4p
.idata:004060B8						; ___crtGetEnvironmentStringsA+E1p
.idata:004060B8						; DATA XREF: ...
.idata:004060BC	; LPWCH	__stdcall GetEnvironmentStringsW()
.idata:004060BC			extrn GetEnvironmentStringsW:dword
.idata:004060BC						; CODE XREF: ___crtGetEnvironmentStringsA+1Bp
.idata:004060BC						; ___crtGetEnvironmentStringsA+5Bp
.idata:004060BC						; DATA XREF: ...
.idata:004060C0	; UINT __stdcall SetHandleCount(UINT uNumber)
.idata:004060C0			extrn SetHandleCount:dword ; CODE XREF:	__ioinit+1B1p
.idata:004060C0						; DATA XREF: __ioinit+1B1r
.idata:004060C4	; HANDLE __stdcall GetStdHandle(DWORD nStdHandle)
.idata:004060C4			extrn GetStdHandle:dword ; CODE	XREF: __ioinit+16Cp
.idata:004060C4						; __NMSG_WRITE+143p
.idata:004060C4						; DATA XREF: ...
.idata:004060C8	; DWORD	__stdcall GetFileType(HANDLE hFile)
.idata:004060C8			extrn GetFileType:dword	; CODE XREF: __ioinit+109p
.idata:004060C8						; __ioinit+17Ap
.idata:004060C8						; DATA XREF: ...
.idata:004060CC	; DWORD	__stdcall GetCurrentThreadId()
.idata:004060CC			extrn GetCurrentThreadId:dword ; CODE XREF: __mtinit+3Fp
.idata:004060CC						; __getptd+45p
.idata:004060CC						; DATA XREF: ...
.idata:004060D0	; BOOL __stdcall TlsSetValue(DWORD dwTlsIndex, LPVOID lpTlsValue)
.idata:004060D0			extrn TlsSetValue:dword	; CODE XREF: __mtinit+2Ep
.idata:004060D0						; __getptd+34p
.idata:004060D0						; DATA XREF: ...
.idata:004060D4	; DWORD	__stdcall TlsAlloc()
.idata:004060D4			extrn TlsAlloc:dword	; CODE XREF: __mtinit+6p
.idata:004060D4						; DATA XREF: __mtinit+6r
.idata:004060D8	; void __stdcall SetLastError(DWORD dwErrCode)
.idata:004060D8			extrn SetLastError:dword ; CODE	XREF: __getptd+5Cp
.idata:004060D8						; DATA XREF: __getptd+5Cr
.idata:004060DC	; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
.idata:004060DC			extrn TlsGetValue:dword	; CODE XREF: __getptd+10p
.idata:004060DC						; DATA XREF: __getptd+10r
.idata:004060E0	; DWORD	__stdcall GetLastError()
.idata:004060E0			extrn GetLastError:dword ; CODE	XREF: __getptd+2p
.idata:004060E0						; DATA XREF: __getptd+2r
.idata:004060E4	; BOOL __stdcall WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite,	LPDWORD	lpNumberOfBytesWritten,	LPOVERLAPPED lpOverlapped)
.idata:004060E4			extrn WriteFile:dword	; CODE XREF: __NMSG_WRITE+14Ap
.idata:004060E4						; DATA XREF: __NMSG_WRITE+14Ar
.idata:004060E8	; BOOL __stdcall GetCPInfo(UINT	CodePage, LPCPINFO lpCPInfo)
.idata:004060E8			extrn GetCPInfo:dword	; CODE XREF: __setmbcp+51p
.idata:004060E8						; _setSBUpLow+14p
.idata:004060E8						; DATA XREF: ...
.idata:004060EC	; UINT __stdcall GetACP()
.idata:004060EC			extrn GetACP:dword	; DATA XREF: _getSystemCP+2Fr
.idata:004060F0	; UINT __stdcall GetOEMCP()
.idata:004060F0			extrn GetOEMCP:dword	; DATA XREF: _getSystemCP+1Ar
.idata:004060F4	; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
.idata:004060F4			extrn GetProcAddress:dword
.idata:004060F4						; CODE XREF: ___crtMessageBoxA+2Ap
.idata:004060F4						; ___crtMessageBoxA+3Bp ...
.idata:004060F8	; HMODULE __stdcall LoadLibraryA(LPCSTR	lpLibFileName)
.idata:004060F8			extrn LoadLibraryA:dword ; CODE	XREF: ___crtMessageBoxA+12p
.idata:004060F8						; DATA XREF: ___crtMessageBoxA+12r
.idata:004060FC	; LONG __stdcall InterlockedDecrement(volatile LONG *lpAddend)
.idata:004060FC			extrn InterlockedDecrement:dword ; CODE	XREF: _toupper+3Bp
.idata:004060FC						; _toupper+65p
.idata:004060FC						; DATA XREF: ...
.idata:00406100	; LONG __stdcall InterlockedIncrement(volatile LONG *lpAddend)
.idata:00406100			extrn InterlockedIncrement:dword ; CODE	XREF: _toupper+26p
.idata:00406100						; DATA XREF: _toupper+26r
.idata:00406104	; int __stdcall	MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCSTR lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr,	int cchWideChar)
.idata:00406104			extrn MultiByteToWideChar:dword
.idata:00406104						; CODE XREF: ___crtLCMapStringA+DFp
.idata:00406104						; ___crtLCMapStringA+137p ...
.idata:00406108	; int __stdcall	LCMapStringA(LCID Locale, DWORD	dwMapFlags, LPCSTR lpSrcStr, int cchSrc, LPSTR lpDestStr, int cchDest)
.idata:00406108			extrn LCMapStringA:dword ; CODE	XREF: ___crtLCMapStringA+5Ep
.idata:00406108						; ___crtLCMapStringA+A7p
.idata:00406108						; DATA XREF: ...
.idata:0040610C	; int __stdcall	LCMapStringW(LCID Locale, DWORD	dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int	cchDest)
.idata:0040610C			extrn LCMapStringW:dword ; CODE	XREF: ___crtLCMapStringA+42p
.idata:0040610C						; ___crtLCMapStringA+14Dp ...
.idata:00406110	; BOOL __stdcall GetStringTypeA(LCID Locale, DWORD dwInfoType, LPCSTR lpSrcStr,	int cchSrc, LPWORD lpCharType)
.idata:00406110			extrn GetStringTypeA:dword
.idata:00406110						; CODE XREF: ___crtGetStringTypeA+59p
.idata:00406110						; ___crtGetStringTypeA+8Dp
.idata:00406110						; DATA XREF: ...
.idata:00406114	; BOOL __stdcall GetStringTypeW(DWORD dwInfoType, LPCWSTR lpSrcStr, int	cchSrc,	LPWORD lpCharType)
.idata:00406114			extrn GetStringTypeW:dword
.idata:00406114						; CODE XREF: ___crtGetStringTypeA+3Fp
.idata:00406114						; ___crtGetStringTypeA+12Dp
.idata:00406114						; DATA XREF: ...
.idata:00406118
.idata:0040611C	;
.idata:0040611C	; Imports from USER32.dll
.idata:0040611C	;
.idata:0040611C	; BOOL __stdcall TranslateMessage(const	MSG *lpMsg)
.idata:0040611C			extrn TranslateMessage:dword ; CODE XREF: sub_4017EE+169p
.idata:0040611C						; DATA XREF: sub_4017EE+169r ...
.idata:00406120	; LRESULT __stdcall DispatchMessageA(const MSG *lpMsg)
.idata:00406120			extrn DispatchMessageA:dword ; CODE XREF: sub_4017EE+173p
.idata:00406120						; DATA XREF: sub_4017EE+173r
.idata:00406124	; BOOL __stdcall PeekMessageA(LPMSG lpMsg, HWND	hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg)
.idata:00406124			extrn PeekMessageA:dword ; CODE	XREF: sub_4017EE+181p
.idata:00406124						; DATA XREF: sub_4017EE+181r
.idata:00406128	; DWORD	__stdcall MsgWaitForMultipleObjects(DWORD nCount, const	HANDLE *pHandles, BOOL fWaitAll, DWORD dwMilliseconds, DWORD dwWakeMask)
.idata:00406128			extrn MsgWaitForMultipleObjects:dword
.idata:00406128						; CODE XREF: sub_4017EE+198p
.idata:00406128						; DATA XREF: sub_4017EE+198r
.idata:0040612C	; int wsprintfA(LPSTR, LPCSTR, ...)
.idata:0040612C			extrn wsprintfA:dword	; CODE XREF: sub_4013E3+BFp
.idata:0040612C						; sub_4013E3+D4p ...
.idata:00406130	; HCURSOR __stdcall LoadCursorA(HINSTANCE hInstance, LPCSTR lpCursorName)
.idata:00406130			extrn LoadCursorA:dword	; CODE XREF: WinMain(x,x,x,x)+1Ep
.idata:00406130						; DATA XREF: WinMain(x,x,x,x)+1Er
.idata:00406134	; HCURSOR __stdcall SetCursor(HCURSOR hCursor)
.idata:00406134			extrn SetCursor:dword	; CODE XREF: WinMain(x,x,x,x)+25p
.idata:00406134						; DATA XREF: WinMain(x,x,x,x)+25r
.idata:00406138	; int __stdcall	MessageBoxA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption,	UINT uType)
.idata:00406138			extrn MessageBoxA:dword	; CODE XREF: WinMain(x,x,x,x)+183p
.idata:00406138						; sub_4017EE+FCp
.idata:00406138						; DATA XREF: ...
.idata:0040613C
.idata:0040613C
.rdata:00406140	; ===========================================================================
.rdata:00406140
.rdata:00406140	; Segment type:	Pure data
.rdata:00406140	; Segment permissions: Read
.rdata:00406140	_rdata		segment	para public 'DATA' use32
.rdata:00406140			assume cs:_rdata
.rdata:00406140			;org 406140h
.rdata:00406140	off_406140	dd offset sub_4011E7	; DATA XREF: sub_40119D+13o
.rdata:00406140						; sub_401203o
.rdata:00406144			align 8
.rdata:00406148	stru_406148	_SCOPETABLE_ENTRY <0FFFFFFFFh, 0, offset loc_401BE4>
.rdata:00406148						; DATA XREF: sub_401B7A+5o
.rdata:00406148			_SCOPETABLE_ENTRY <0FFFFFFFFh, 0, offset loc_401C3C> ; SEH scope table for function 401B7A
.rdata:00406160	stru_406160	_SCOPETABLE_ENTRY <0FFFFFFFFh, 0, offset loc_401D08>
.rdata:00406160						; DATA XREF: sub_401CA1+5o
.rdata:00406160			_SCOPETABLE_ENTRY <0FFFFFFFFh, 0, offset loc_401D64> ; SEH scope table for function 401CA1
.rdata:00406178	stru_406178	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_401E86, offset loc_401E9A>
.rdata:00406178						; DATA XREF: start+5o
.rdata:00406178						; SEH scope table for function 401D9D
.rdata:00406184	; char a__global_heap_[]
.rdata:00406184	a__global_heap_	db '__GLOBAL_HEAP_SELECTED',0 ; DATA XREF: sub_401FBA+8Eo
.rdata:0040619B			align 4
.rdata:0040619C	; CHAR Name[]
.rdata:0040619C	Name		db '__MSVCRT_HEAP_SELECT',0 ; DATA XREF: sub_401FBA+4Fo
.rdata:004061B1			align 4
.rdata:004061B4	aRuntimeError	db 'runtime error ',0
.rdata:004061C3			align 4
.rdata:004061C4			db 0Dh,0Ah,0
.rdata:004061C7			align 4
.rdata:004061C8	aTlossError	db 'TLOSS error',0Dh,0Ah,0
.rdata:004061D6			align 4
.rdata:004061D8	aSingError	db 'SING error',0Dh,0Ah,0
.rdata:004061E5			align 4
.rdata:004061E8	aDomainError	db 'DOMAIN error',0Dh,0Ah,0
.rdata:004061F7			align 4
.rdata:004061F8	aR6028UnableToI	db 'R6028',0Dh,0Ah
.rdata:004061F8			db '- unable to initialize heap',0Dh,0Ah,0
.rdata:0040621D			align 10h
.rdata:00406220	aR6027NotEnough	db 'R6027',0Dh,0Ah
.rdata:00406220			db '- not enough space for lowio initialization',0Dh,0Ah,0
.rdata:00406255			align 4
.rdata:00406258	aR6026NotEnough	db 'R6026',0Dh,0Ah
.rdata:00406258			db '- not enough space for stdio initialization',0Dh,0Ah,0
.rdata:0040628D			align 10h
.rdata:00406290	aR6025PureVirtu	db 'R6025',0Dh,0Ah
.rdata:00406290			db '- pure virtual function call',0Dh,0Ah,0
.rdata:004062B6			align 4
.rdata:004062B8	aR6024NotEnough	db 'R6024',0Dh,0Ah
.rdata:004062B8			db '- not enough space for _onexit/atexit table',0Dh,0Ah,0
.rdata:004062ED			align 10h
.rdata:004062F0	aR6019UnableToO	db 'R6019',0Dh,0Ah
.rdata:004062F0			db '- unable to open console device',0Dh,0Ah,0
.rdata:00406319			align 4
.rdata:0040631C	aR6018Unexpecte	db 'R6018',0Dh,0Ah
.rdata:0040631C			db '- unexpected heap error',0Dh,0Ah,0
.rdata:0040633D			align 10h
.rdata:00406340	aR6017Unexpecte	db 'R6017',0Dh,0Ah
.rdata:00406340			db '- unexpected multithread lock error',0Dh,0Ah,0
.rdata:0040636D			align 10h
.rdata:00406370	aR6016NotEnough	db 'R6016',0Dh,0Ah
.rdata:00406370			db '- not enough space for thread data',0Dh,0Ah,0
.rdata:0040639C	aAbnormalProgra	db 0Dh,0Ah
.rdata:0040639C			db 'abnormal program termination',0Dh,0Ah,0
.rdata:004063BD			align 10h
.rdata:004063C0	aR6009NotEnough	db 'R6009',0Dh,0Ah
.rdata:004063C0			db '- not enough space for environment',0Dh,0Ah,0
.rdata:004063EC	aR6008NotEnough	db 'R6008',0Dh,0Ah
.rdata:004063EC			db '- not enough space for arguments',0Dh,0Ah,0
.rdata:00406416			align 4
.rdata:00406418	aR6002FloatingP	db 'R6002',0Dh,0Ah      ; DATA XREF: .data:off_4093CCo
.rdata:00406418			db '- floating point not loaded',0Dh,0Ah,0
.rdata:0040643D			align 10h
.rdata:00406440	aMicrosoftVisua	db 'Microsoft Visual C++ Runtime Library',0
.rdata:00406440						; DATA XREF: __NMSG_WRITE+119o
.rdata:00406465			align 4
.rdata:00406468	; char asc_406468[]
.rdata:00406468	asc_406468	db 0Ah			; DATA XREF: __NMSG_WRITE+F1o
.rdata:00406468			db 0Ah,0
.rdata:0040646B			align 4
.rdata:0040646C	; char aRuntimeErrorPr[]
.rdata:0040646C	aRuntimeErrorPr	db 'Runtime Error!',0Ah ; DATA XREF: __NMSG_WRITE+D3o
.rdata:0040646C			db 0Ah
.rdata:0040646C			db 'Program: ',0
.rdata:00406486			align 4
.rdata:00406488	; char a___[]
.rdata:00406488	a___		db '...',0              ; DATA XREF: __NMSG_WRITE+BFo
.rdata:0040648C	; char aProgramNameUnk[]
.rdata:0040648C	aProgramNameUnk	db '<program name unknown>',0 ; DATA XREF: __NMSG_WRITE+7Do
.rdata:004064A3			align 8
.rdata:004064A8	stru_4064A8	_SCOPETABLE_ENTRY <0FFFFFFFFh, 0, offset loc_404C39>
.rdata:004064A8						; DATA XREF: sub_404BA5+5o
.rdata:004064A8			_SCOPETABLE_ENTRY <0FFFFFFFFh, 0, offset loc_404CC2> ; SEH scope table for function 404BA5
.rdata:004064C0	; CHAR aGetlastactivep[]
.rdata:004064C0	aGetlastactivep	db 'GetLastActivePopup',0 ; DATA XREF: ___crtMessageBoxA+3Do
.rdata:004064D3			align 4
.rdata:004064D4	; CHAR aGetactivewindo[]
.rdata:004064D4	aGetactivewindo	db 'GetActiveWindow',0  ; DATA XREF: ___crtMessageBoxA+35o
.rdata:004064E4	; CHAR ProcName[]
.rdata:004064E4	ProcName	db 'MessageBoxA',0      ; DATA XREF: ___crtMessageBoxA+24o
.rdata:004064F0	; CHAR LibFileName[]
.rdata:004064F0	LibFileName	db 'user32.dll',0       ; DATA XREF: ___crtMessageBoxA+Do
.rdata:004064FB			align 4
.rdata:004064FC	; CHAR byte_4064FC[4]
.rdata:004064FC	byte_4064FC	db 4 dup(0)		; DATA XREF: ___crtLCMapStringA+57o
.rdata:004064FC						; ___crtGetStringTypeA+52o
.rdata:00406500	; const	WCHAR SrcStr
.rdata:00406500	SrcStr		dw 0			; DATA XREF: ___crtLCMapStringA+36o
.rdata:00406500						; ___crtGetStringTypeA+39o
.rdata:00406502			align 8
.rdata:00406508	stru_406508	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_405137, offset loc_40513B>
.rdata:00406508						; DATA XREF: ___crtLCMapStringA+5o
.rdata:00406508			_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_4051EB, offset loc_4051EF> ; SEH scope table for function 405027
.rdata:00406520	stru_406520	_SCOPETABLE_ENTRY <0FFFFFFFFh, offset loc_40536F, offset loc_405373>
.rdata:00406520						; DATA XREF: ___crtGetStringTypeA+5o
.rdata:00406520						; SEH scope table for function 405276
.rdata:0040652C	aHMmSs		db 'H:mm:ss',0          ; DATA XREF: .data:00409AA0o
.rdata:00406534	aDdddMmmmDdYyyy	db 'dddd, MMMM dd, yyyy',0 ; DATA XREF: .data:00409A9Co
.rdata:00406548	aMDYy		db 'M/d/yy',0           ; DATA XREF: .data:00409A98o
.rdata:0040654F			align 10h
.rdata:00406550	aPm		db 'PM',0               ; DATA XREF: .data:00409A94o
.rdata:00406553			align 4
.rdata:00406554	aAm		db 'AM',0               ; DATA XREF: .data:00409A90o
.rdata:00406557			align 4
.rdata:00406558	aDecember	db 'December',0         ; DATA XREF: .data:00409A8Co
.rdata:00406561			align 4
.rdata:00406564	aNovember	db 'November',0         ; DATA XREF: .data:00409A88o
.rdata:0040656D			align 10h
.rdata:00406570	aOctober	db 'October',0          ; DATA XREF: .data:00409A84o
.rdata:00406578	aSeptember	db 'September',0        ; DATA XREF: .data:00409A80o
.rdata:00406582			align 4
.rdata:00406584	aAugust		db 'August',0           ; DATA XREF: .data:00409A7Co
.rdata:0040658B			align 4
.rdata:0040658C	aJuly		db 'July',0             ; DATA XREF: .data:00409A78o
.rdata:00406591			align 4
.rdata:00406594	aJune		db 'June',0             ; DATA XREF: .data:00409A74o
.rdata:00406599			align 4
.rdata:0040659C	aApril		db 'April',0            ; DATA XREF: .data:00409A6Co
.rdata:004065A2			align 4
.rdata:004065A4	aMarch		db 'March',0            ; DATA XREF: .data:00409A68o
.rdata:004065AA			align 4
.rdata:004065AC	aFebruary	db 'February',0         ; DATA XREF: .data:00409A64o
.rdata:004065B5			align 4
.rdata:004065B8	aJanuary	db 'January',0          ; DATA XREF: .data:00409A60o
.rdata:004065C0	aDec		db 'Dec',0              ; DATA XREF: .data:00409A5Co
.rdata:004065C4	aNov		db 'Nov',0              ; DATA XREF: .data:00409A58o
.rdata:004065C8	aOct		db 'Oct',0              ; DATA XREF: .data:00409A54o
.rdata:004065CC	aSep		db 'Sep',0              ; DATA XREF: .data:00409A50o
.rdata:004065D0	aAug		db 'Aug',0              ; DATA XREF: .data:00409A4Co
.rdata:004065D4	aJul		db 'Jul',0              ; DATA XREF: .data:00409A48o
.rdata:004065D8	aJun		db 'Jun',0              ; DATA XREF: .data:00409A44o
.rdata:004065DC	aMay		db 'May',0              ; DATA XREF: .data:00409A40o
.rdata:004065DC						; .data:00409A70o
.rdata:004065E0	aApr		db 'Apr',0              ; DATA XREF: .data:00409A3Co
.rdata:004065E4	aMar		db 'Mar',0              ; DATA XREF: .data:00409A38o
.rdata:004065E8	aFeb		db 'Feb',0              ; DATA XREF: .data:00409A34o
.rdata:004065EC	aJan		db 'Jan',0              ; DATA XREF: .data:00409A30o
.rdata:004065F0	aSaturday	db 'Saturday',0         ; DATA XREF: .data:00409A2Co
.rdata:004065F9			align 4
.rdata:004065FC	aFriday		db 'Friday',0           ; DATA XREF: .data:00409A28o
.rdata:00406603			align 4
.rdata:00406604	aThursday	db 'Thursday',0         ; DATA XREF: .data:00409A24o
.rdata:0040660D			align 10h
.rdata:00406610	aWednesday	db 'Wednesday',0        ; DATA XREF: .data:00409A20o
.rdata:0040661A			align 4
.rdata:0040661C	aTuesday	db 'Tuesday',0          ; DATA XREF: .data:00409A1Co
.rdata:00406624	aMonday		db 'Monday',0           ; DATA XREF: .data:00409A18o
.rdata:0040662B			align 4
.rdata:0040662C	aSunday		db 'Sunday',0           ; DATA XREF: .data:00409A14o
.rdata:00406633			align 4
.rdata:00406634	aSat		db 'Sat',0              ; DATA XREF: .data:00409A10o
.rdata:00406638	aFri		db 'Fri',0              ; DATA XREF: .data:00409A0Co
.rdata:0040663C	aThu		db 'Thu',0              ; DATA XREF: .data:00409A08o
.rdata:00406640	aWed		db 'Wed',0              ; DATA XREF: .data:00409A04o
.rdata:00406644	aTue		db 'Tue',0              ; DATA XREF: .data:00409A00o
.rdata:00406648	aMon		db 'Mon',0              ; DATA XREF: .data:004099FCo
.rdata:0040664C	aSun		db 'Sun',0              ; DATA XREF: .data:off_4099F8o
.rdata:00406650	aSunmontuewedth	db 'SunMonTueWedThuFriSat',0
.rdata:00406666			align 4
.rdata:00406668	aJanfebmaraprma	db 'JanFebMarAprMayJunJulAugSepOctNovDec',0
.rdata:0040668D			align 10h
.rdata:00406690	__IMPORT_DESCRIPTOR_KERNEL32 dd	rva off_4066CC ; Import	Name Table
.rdata:00406694			dd 0			; Time stamp
.rdata:00406698			dd 0			; Forwarder Chain
.rdata:0040669C			dd rva aKernel32_dll	; DLL Name
.rdata:004066A0			dd rva lstrcmpiA	; Import Address Table
.rdata:004066A4	__IMPORT_DESCRIPTOR_USER32 dd rva off_4067E8 ; Import Name Table
.rdata:004066A8			dd 0			; Time stamp
.rdata:004066AC			dd 0			; Forwarder Chain
.rdata:004066B0			dd rva aUser32_dll	; DLL Name
.rdata:004066B4			dd rva TranslateMessage	; Import Address Table
.rdata:004066B8			dd 5 dup(0)
.rdata:004066CC	;
.rdata:004066CC	; Import names for KERNEL32.dll
.rdata:004066CC	;
.rdata:004066CC	off_4066CC	dd rva word_40680C	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_KERNEL32o
.rdata:004066D0			dd rva word_406818
.rdata:004066D4			dd rva word_406824
.rdata:004066D8			dd rva word_406830
.rdata:004066DC			dd rva word_40683A
.rdata:004066E0			dd rva word_40684E
.rdata:004066E4			dd rva word_40685C
.rdata:004066E8			dd rva word_406872
.rdata:004066EC			dd rva word_40687C
.rdata:004066F0			dd rva word_406886
.rdata:004066F4			dd rva word_406890
.rdata:004066F8			dd rva word_4068A4
.rdata:004066FC			dd rva word_4068BC
.rdata:00406700			dd rva word_4068D0
.rdata:00406704			dd rva word_4068E6
.rdata:00406708			dd rva word_4068F2
.rdata:0040670C			dd rva word_406902
.rdata:00406710			dd rva word_40691A
.rdata:00406714			dd rva word_406924
.rdata:00406718			dd rva word_40692E
.rdata:0040671C			dd rva word_40693C
.rdata:00406720			dd rva word_406952
.rdata:00406724			dd rva word_406A06
.rdata:00406728			dd rva word_406A14
.rdata:0040672C			dd rva word_406A28
.rdata:00406730			dd rva word_406A3C
.rdata:00406734			dd rva word_406A48
.rdata:00406738			dd rva word_406A54
.rdata:0040673C			dd rva word_406A68
.rdata:00406740			dd rva word_406A7A
.rdata:00406744			dd rva word_406A8C
.rdata:00406748			dd rva word_406A9A
.rdata:0040674C			dd rva word_406AB6
.rdata:00406750			dd rva word_406ACE
.rdata:00406754			dd rva word_406AE6
.rdata:00406758			dd rva word_406B00
.rdata:0040675C			dd rva word_406B10
.rdata:00406760			dd rva word_406B1E
.rdata:00406764			dd rva word_406B2C
.rdata:00406768			dd rva word_406B3A
.rdata:0040676C			dd rva word_406B4A
.rdata:00406770			dd rva word_406B58
.rdata:00406774			dd rva word_406B64
.rdata:00406778			dd rva word_406B80
.rdata:0040677C			dd rva word_406B9A
.rdata:00406780			dd rva word_406BB4
.rdata:00406784			dd rva word_406BCA
.rdata:00406788			dd rva word_406BE2
.rdata:0040678C			dd rva word_406BFC
.rdata:00406790			dd rva word_406C0E
.rdata:00406794			dd rva word_406C1E
.rdata:00406798			dd rva word_406C2C
.rdata:0040679C			dd rva word_406C42
.rdata:004067A0			dd rva word_406C50
.rdata:004067A4			dd rva word_406C5C
.rdata:004067A8			dd rva word_406C6C
.rdata:004067AC			dd rva word_406C7A
.rdata:004067B0			dd rva word_406C8A
.rdata:004067B4			dd rva word_406C96
.rdata:004067B8			dd rva word_406CA2
.rdata:004067BC			dd rva word_406CAC
.rdata:004067C0			dd rva word_406CB8
.rdata:004067C4			dd rva word_406CCA
.rdata:004067C8			dd rva word_406CDA
.rdata:004067CC			dd rva word_406CF2
.rdata:004067D0			dd rva word_406D0A
.rdata:004067D4			dd rva word_406D20
.rdata:004067D8			dd rva word_406D30
.rdata:004067DC			dd rva word_406D40
.rdata:004067E0			dd rva word_406D52
.rdata:004067E4			dd 0
.rdata:004067E8	;
.rdata:004067E8	; Import names for USER32.dll
.rdata:004067E8	;
.rdata:004067E8	off_4067E8	dd rva word_4069E6	; DATA XREF: .rdata:__IMPORT_DESCRIPTOR_USER32o
.rdata:004067EC			dd rva word_4069D2
.rdata:004067F0			dd rva word_4069C2
.rdata:004067F4			dd rva word_4069A6
.rdata:004067F8			dd rva word_40699A
.rdata:004067FC			dd rva word_40698C
.rdata:00406800			dd rva word_406980
.rdata:00406804			dd rva word_406972
.rdata:00406808			dd 0
.rdata:0040680C	word_40680C	dw 2FFh			; DATA XREF: .rdata:off_4066CCo
.rdata:0040680E			db 'lstrcmpiA',0
.rdata:00406818	word_406818	dw 302h			; DATA XREF: .rdata:004066D0o
.rdata:0040681A			db 'lstrcpyA',0
.rdata:00406823			align 4
.rdata:00406824	word_406824	dw 308h			; DATA XREF: .rdata:004066D4o
.rdata:00406826			db 'lstrlenA',0
.rdata:0040682F			align 10h
.rdata:00406830	word_406830	dw 2F2h			; DATA XREF: .rdata:004066D8o
.rdata:00406832			db '_lclose',0
.rdata:0040683A	word_40683A	dw 227h			; DATA XREF: .rdata:004066DCo
.rdata:0040683C			db 'RemoveDirectoryA',0
.rdata:0040684D			align 2
.rdata:0040684E	word_40684E	dw 57h			; DATA XREF: .rdata:004066E0o
.rdata:00406850			db 'DeleteFileA',0
.rdata:0040685C	word_40685C	dw 124h			; DATA XREF: .rdata:004066E4o
.rdata:0040685E			db 'GetModuleFileNameA',0
.rdata:00406871			align 2
.rdata:00406872	word_406872	dw 2F6h			; DATA XREF: .rdata:004066E8o
.rdata:00406874			db '_lread',0
.rdata:0040687B			align 4
.rdata:0040687C	word_40687C	dw 2F4h			; DATA XREF: .rdata:004066ECo
.rdata:0040687E			db '_llseek',0
.rdata:00406886	word_406886	dw 2F5h			; DATA XREF: .rdata:004066F0o
.rdata:00406888			db '_lopen',0
.rdata:0040688F			align 10h
.rdata:00406890	word_406890	dw 100h			; DATA XREF: .rdata:004066F4o
.rdata:00406892			db 'GetDiskFreeSpaceA',0
.rdata:004068A4	word_4068A4	dw 25Dh			; DATA XREF: .rdata:004066F8o
.rdata:004068A6			db 'SetCurrentDirectoryA',0
.rdata:004068BB			align 4
.rdata:004068BC	word_4068BC	dw 2Dh			; DATA XREF: .rdata:004066FCo
.rdata:004068BE			db 'CreateDirectoryA',0
.rdata:004068CF			align 10h
.rdata:004068D0	word_4068D0	dw 10Dh			; DATA XREF: .rdata:00406700o
.rdata:004068D2			db 'GetFileAttributesA',0
.rdata:004068E5			align 2
.rdata:004068E6	word_4068E6	dw 2F9h			; DATA XREF: .rdata:00406704o
.rdata:004068E8			db 'lstrcatA',0
.rdata:004068F1			align 2
.rdata:004068F2	word_4068F2	dw 165h			; DATA XREF: .rdata:00406708o
.rdata:004068F4			db 'GetTempPathA',0
.rdata:00406901			align 2
.rdata:00406902	word_406902	dw 0F5h			; DATA XREF: .rdata:0040670Co
.rdata:00406904			db 'GetCurrentDirectoryA',0
.rdata:00406919			align 2
.rdata:0040691A	word_40691A	dw 2F7h			; DATA XREF: .rdata:00406710o
.rdata:0040691C			db '_lwrite',0
.rdata:00406924	word_406924	dw 2F3h			; DATA XREF: .rdata:00406714o
.rdata:00406926			db '_lcreat',0
.rdata:0040692E	word_40692E	dw 1Bh			; DATA XREF: .rdata:00406718o
.rdata:00406930			db 'CloseHandle',0
.rdata:0040693C	word_40693C	dw 10Bh			; DATA XREF: .rdata:0040671Co
.rdata:0040693E			db 'GetExitCodeProcess',0
.rdata:00406951			align 2
.rdata:00406952	word_406952	dw 44h			; DATA XREF: .rdata:00406720o
.rdata:00406954			db 'CreateProcessA',0
.rdata:00406963			align 4
.rdata:00406964	aKernel32_dll	db 'KERNEL32.dll',0     ; DATA XREF: .rdata:0040669Co
.rdata:00406971			align 2
.rdata:00406972	word_406972	dw 1BEh			; DATA XREF: .rdata:00406804o
.rdata:00406974			db 'MessageBoxA',0
.rdata:00406980	word_406980	dw 226h			; DATA XREF: .rdata:00406800o
.rdata:00406982			db 'SetCursor',0
.rdata:0040698C	word_40698C	dw 19Ah			; DATA XREF: .rdata:004067FCo
.rdata:0040698E			db 'LoadCursorA',0
.rdata:0040699A	word_40699A	dw 2ACh			; DATA XREF: .rdata:004067F8o
.rdata:0040699C			db 'wsprintfA',0
.rdata:004069A6	word_4069A6	dw 1CAh			; DATA XREF: .rdata:004067F4o
.rdata:004069A8			db 'MsgWaitForMultipleObjects',0
.rdata:004069C2	word_4069C2	dw 1DCh			; DATA XREF: .rdata:004067F0o
.rdata:004069C4			db 'PeekMessageA',0
.rdata:004069D1			align 2
.rdata:004069D2	word_4069D2	dw 95h			; DATA XREF: .rdata:004067ECo
.rdata:004069D4			db 'DispatchMessageA',0
.rdata:004069E5			align 2
.rdata:004069E6	word_4069E6	dw 282h			; DATA XREF: .rdata:off_4067E8o
.rdata:004069E8			db 'TranslateMessage',0
.rdata:004069F9			align 2
.rdata:004069FA	aUser32_dll	db 'USER32.dll',0       ; DATA XREF: .rdata:004066B0o
.rdata:00406A05			align 2
.rdata:00406A06	word_406A06	dw 7Dh			; DATA XREF: .rdata:00406724o
.rdata:00406A08			db 'ExitProcess',0
.rdata:00406A14	word_406A14	dw 29Eh			; DATA XREF: .rdata:00406728o
.rdata:00406A16			db 'TerminateProcess',0
.rdata:00406A27			align 4
.rdata:00406A28	word_406A28	dw 0F7h			; DATA XREF: .rdata:0040672Co
.rdata:00406A2A			db 'GetCurrentProcess',0
.rdata:00406A3C	word_406A3C	dw 19Fh			; DATA XREF: .rdata:00406730o
.rdata:00406A3E			db 'HeapFree',0
.rdata:00406A47			align 4
.rdata:00406A48	word_406A48	dw 199h			; DATA XREF: .rdata:00406734o
.rdata:00406A4A			db 'HeapAlloc',0
.rdata:00406A54	word_406A54	dw 126h			; DATA XREF: .rdata:00406738o
.rdata:00406A56			db 'GetModuleHandleA',0
.rdata:00406A67			align 4
.rdata:00406A68	word_406A68	dw 150h			; DATA XREF: .rdata:0040673Co
.rdata:00406A6A			db 'GetStartupInfoA',0
.rdata:00406A7A	word_406A7A	dw 0CAh			; DATA XREF: .rdata:00406740o
.rdata:00406A7C			db 'GetCommandLineA',0
.rdata:00406A8C	word_406A8C	dw 174h			; DATA XREF: .rdata:00406744o
.rdata:00406A8E			db 'GetVersion',0
.rdata:00406A99			align 2
.rdata:00406A9A	word_406A9A	dw 1AAh			; DATA XREF: .rdata:00406748o
.rdata:00406A9C			db 'InitializeCriticalSection',0
.rdata:00406AB6	word_406AB6	dw 66h			; DATA XREF: .rdata:0040674Co
.rdata:00406AB8			db 'EnterCriticalSection',0
.rdata:00406ACD			align 2
.rdata:00406ACE	word_406ACE	dw 1C1h			; DATA XREF: .rdata:00406750o
.rdata:00406AD0			db 'LeaveCriticalSection',0
.rdata:00406AE5			align 2
.rdata:00406AE6	word_406AE6	dw 109h			; DATA XREF: .rdata:00406754o
.rdata:00406AE8			db 'GetEnvironmentVariableA',0
.rdata:00406B00	word_406B00	dw 175h			; DATA XREF: .rdata:00406758o
.rdata:00406B02			db 'GetVersionExA',0
.rdata:00406B10	word_406B10	dw 19Dh			; DATA XREF: .rdata:0040675Co
.rdata:00406B12			db 'HeapDestroy',0
.rdata:00406B1E	word_406B1E	dw 19Bh			; DATA XREF: .rdata:00406760o
.rdata:00406B20			db 'HeapCreate',0
.rdata:00406B2B			align 4
.rdata:00406B2C	word_406B2C	dw 2BFh			; DATA XREF: .rdata:00406764o
.rdata:00406B2E			db 'VirtualFree',0
.rdata:00406B3A	word_406B3A	dw 2BBh			; DATA XREF: .rdata:00406768o
.rdata:00406B3C			db 'VirtualAlloc',0
.rdata:00406B49			align 2
.rdata:00406B4A	word_406B4A	dw 1A2h			; DATA XREF: .rdata:0040676Co
.rdata:00406B4C			db 'HeapReAlloc',0
.rdata:00406B58	word_406B58	dw 22Fh			; DATA XREF: .rdata:00406770o
.rdata:00406B5A			db 'RtlUnwind',0
.rdata:00406B64	word_406B64	dw 2ADh			; DATA XREF: .rdata:00406774o
.rdata:00406B66			db 'UnhandledExceptionFilter',0
.rdata:00406B7F			align 10h
.rdata:00406B80	word_406B80	dw 0B2h			; DATA XREF: .rdata:00406778o
.rdata:00406B82			db 'FreeEnvironmentStringsA',0
.rdata:00406B9A	word_406B9A	dw 0B3h			; DATA XREF: .rdata:0040677Co
.rdata:00406B9C			db 'FreeEnvironmentStringsW',0
.rdata:00406BB4	word_406BB4	dw 2D2h			; DATA XREF: .rdata:00406780o
.rdata:00406BB6			db 'WideCharToMultiByte',0
.rdata:00406BCA	word_406BCA	dw 106h			; DATA XREF: .rdata:00406784o
.rdata:00406BCC			db 'GetEnvironmentStrings',0
.rdata:00406BE2	word_406BE2	dw 108h			; DATA XREF: .rdata:00406788o
.rdata:00406BE4			db 'GetEnvironmentStringsW',0
.rdata:00406BFB			align 4
.rdata:00406BFC	word_406BFC	dw 26Dh			; DATA XREF: .rdata:0040678Co
.rdata:00406BFE			db 'SetHandleCount',0
.rdata:00406C0D			align 2
.rdata:00406C0E	word_406C0E	dw 152h			; DATA XREF: .rdata:00406790o
.rdata:00406C10			db 'GetStdHandle',0
.rdata:00406C1D			align 2
.rdata:00406C1E	word_406C1E	dw 115h			; DATA XREF: .rdata:00406794o
.rdata:00406C20			db 'GetFileType',0
.rdata:00406C2C	word_406C2C	dw 0FAh			; DATA XREF: .rdata:00406798o
.rdata:00406C2E			db 'GetCurrentThreadId',0
.rdata:00406C41			align 2
.rdata:00406C42	word_406C42	dw 2A5h			; DATA XREF: .rdata:0040679Co
.rdata:00406C44			db 'TlsSetValue',0
.rdata:00406C50	word_406C50	dw 2A2h			; DATA XREF: .rdata:004067A0o
.rdata:00406C52			db 'TlsAlloc',0
.rdata:00406C5B			align 4
.rdata:00406C5C	word_406C5C	dw 271h			; DATA XREF: .rdata:004067A4o
.rdata:00406C5E			db 'SetLastError',0
.rdata:00406C6B			align 4
.rdata:00406C6C	word_406C6C	dw 2A4h			; DATA XREF: .rdata:004067A8o
.rdata:00406C6E			db 'TlsGetValue',0
.rdata:00406C7A	word_406C7A	dw 11Ah			; DATA XREF: .rdata:004067ACo
.rdata:00406C7C			db 'GetLastError',0
.rdata:00406C89			align 2
.rdata:00406C8A	word_406C8A	dw 2DFh			; DATA XREF: .rdata:004067B0o
.rdata:00406C8C			db 'WriteFile',0
.rdata:00406C96	word_406C96	dw 0BFh			; DATA XREF: .rdata:004067B4o
.rdata:00406C98			db 'GetCPInfo',0
.rdata:00406CA2	word_406CA2	dw 0B9h			; DATA XREF: .rdata:004067B8o
.rdata:00406CA4			db 'GetACP',0
.rdata:00406CAB			align 4
.rdata:00406CAC	word_406CAC	dw 131h			; DATA XREF: .rdata:004067BCo
.rdata:00406CAE			db 'GetOEMCP',0
.rdata:00406CB7			align 4
.rdata:00406CB8	word_406CB8	dw 13Eh			; DATA XREF: .rdata:004067C0o
.rdata:00406CBA			db 'GetProcAddress',0
.rdata:00406CC9			align 2
.rdata:00406CCA	word_406CCA	dw 1C2h			; DATA XREF: .rdata:004067C4o
.rdata:00406CCC			db 'LoadLibraryA',0
.rdata:00406CD9			align 2
.rdata:00406CDA	word_406CDA	dw 1ADh			; DATA XREF: .rdata:004067C8o
.rdata:00406CDC			db 'InterlockedDecrement',0
.rdata:00406CF1			align 2
.rdata:00406CF2	word_406CF2	dw 1B0h			; DATA XREF: .rdata:004067CCo
.rdata:00406CF4			db 'InterlockedIncrement',0
.rdata:00406D09			align 2
.rdata:00406D0A	word_406D0A	dw 1E4h			; DATA XREF: .rdata:004067D0o
.rdata:00406D0C			db 'MultiByteToWideChar',0
.rdata:00406D20	word_406D20	dw 1BFh			; DATA XREF: .rdata:004067D4o
.rdata:00406D22			db 'LCMapStringA',0
.rdata:00406D2F			align 10h
.rdata:00406D30	word_406D30	dw 1C0h			; DATA XREF: .rdata:004067D8o
.rdata:00406D32			db 'LCMapStringW',0
.rdata:00406D3F			align 10h
.rdata:00406D40	word_406D40	dw 153h			; DATA XREF: .rdata:004067DCo
.rdata:00406D42			db 'GetStringTypeA',0
.rdata:00406D51			align 2
.rdata:00406D52	word_406D52	dw 156h			; DATA XREF: .rdata:004067E0o
.rdata:00406D54			db 'GetStringTypeW',0
.rdata:00406D63			align 400h
.rdata:00406D63	_rdata		ends
.rdata:00406D63
.data:00407000 ; Section 3. (virtual address 00007000)
.data:00407000 ; Virtual size		       : 00003300 (  13056.)
.data:00407000 ; Section size in file	       : 00003000 (  12288.)
.data:00407000 ; Offset	to raw data for	section: 00007000
.data:00407000 ; Flags C0000040: Data Readable Writable
.data:00407000 ; Alignment     : default
.data:00407000 ; ===========================================================================
.data:00407000
.data:00407000 ; Segment type: Pure data
.data:00407000 ; Segment permissions: Read/Write
.data:00407000 _data	       segment para public 'DATA' use32
.data:00407000		       assume cs:_data
.data:00407000		       ;org 407000h
.data:00407000 dword_407000    dd 0		       ; DATA XREF: __cinit+1Fo
.data:00407004 dword_407004    dd 0		       ; DATA XREF: __cinit+1Ao
.data:00407008 dword_407008    dd 0		       ; DATA XREF: __cinit+10o
.data:0040700C		       dd offset ___initmbctable
.data:00407010 dword_407010    dd 0		       ; DATA XREF: __cinit:loc_4019C4o
.data:00407014 dword_407014    dd 0		       ; DATA XREF: _doexit+6Ao
.data:00407018 dword_407018    dd 0		       ; DATA XREF: _doexit:loc_401A6Do
.data:0040701C dword_40701C    dd 0		       ; DATA XREF: _doexit+7Bo
.data:00407020 dword_407020    dd 4 dup(0)	       ; DATA XREF: _doexit:loc_401A7Eo
.data:00407030 ; CHAR Caption[]
.data:00407030 Caption	       db 'Launcher Error',0   ; DATA XREF: WinMain(x,x,x,x)+17Co
.data:0040703F		       align 10h
.data:00407040 ; CHAR String2[]
.data:00407040 String2	       db '/~DBG',0            ; DATA XREF: WinMain(x,x,x,x)+131o
.data:00407046		       align 4
.data:00407048 ; CHAR aCouldNotFindSe[]
.data:00407048 aCouldNotFindSe db 'Could not find setup size',0 ; DATA XREF: sub_401292+123o
.data:00407062		       align 4
.data:00407064 ; CHAR aCouldNotFindDa[]
.data:00407064 aCouldNotFindDa db 'Could not find data segment',0
.data:00407064					       ; DATA XREF: sub_401292+DDo
.data:00407080 ; CHAR aUnableToAlloca[]
.data:00407080 aUnableToAlloca db 'Unable to allocate memory buffer',0
.data:00407080					       ; DATA XREF: sub_401292+5Bo
.data:004070A1		       align 4
.data:004070A4 ; CHAR aUnableToOpenAr[]
.data:004070A4 aUnableToOpenAr db 'Unable to open archive file',0
.data:004070A4					       ; DATA XREF: sub_401292+29o
.data:004070C0 ; CHAR aYouMustHaveAtL[]
.data:004070C0 aYouMustHaveAtL db 'You must have at least 2MB of free space on your TEMP drive!',0
.data:004070C0					       ; DATA XREF: sub_4013E3+26Do
.data:004070FD		       align 10h
.data:00407100 ; CHAR aIrsetup_exe[]
.data:00407100 aIrsetup_exe    db 'irsetup.exe',0      ; DATA XREF: sub_4013E3+20Ao
.data:0040710C		       align 10h
.data:00407110 ; CHAR aCouldNotDeterm[]
.data:00407110 aCouldNotDeterm db 'Could not determine a temp directory name.  Try running setup.exe'
.data:00407110					       ; DATA XREF: sub_4013E3+1B2o
.data:00407110		       db ' /T:<Path>',0
.data:0040715C ; CHAR aCTemp[]
.data:0040715C aCTemp	       db 'c:\temp',0          ; DATA XREF: sub_4013E3+18Co
.data:00407164 ; CHAR aSIrsetup_exe[]
.data:00407164 aSIrsetup_exe   db '%s\irsetup.exe',0   ; DATA XREF: sub_4013E3+CEo
.data:00407164					       ; sub_4013E3+11Do
.data:00407173		       align 4
.data:00407174 ; CHAR aSS_D[]
.data:00407174 aSS_D	       db '%s%s_%d',0          ; DATA XREF: sub_4013E3+B9o
.data:00407174					       ; sub_4013E3+108o
.data:0040717C a_ir_sf7_temp   db '_ir_sf7_temp',0     ; DATA XREF: sub_4013E3+ADo
.data:0040717C					       ; sub_4013E3+FCo
.data:00407189		       align 4
.data:0040718C ; CHAR asc_40718C[]
.data:0040718C asc_40718C      db '\',0                ; DATA XREF: sub_4013E3+8Fo
.data:0040718C					       ; sub_4013E3+1DEo ...
.data:0040718E		       align 10h
.data:00407190 ; CHAR aFailedToReadSe[]
.data:00407190 aFailedToReadSe db 'Failed to read setup engine',0
.data:00407190					       ; DATA XREF: sub_401674+94o
.data:004071AC ; CHAR aUnableToOpenSe[]
.data:004071AC aUnableToOpenSe db 'Unable to open setup file',0 ; DATA XREF: sub_401674+5Eo
.data:004071C6		       align 4
.data:004071C8 ; CHAR aCouldNotStartT[]
.data:004071C8 aCouldNotStartT db 'Could not start the setup',0 ; DATA XREF: sub_4017EE+13Bo
.data:004071E2		       align 4
.data:004071E4 ; CHAR a__irafnS[]
.data:004071E4 a__irafnS       db '"__IRAFN:%s"',0     ; DATA XREF: sub_4017EE+B7o
.data:004071F1		       align 4
.data:004071F4 ; CHAR asc_4071F4[]
.data:004071F4 asc_4071F4      db ' ',0                ; DATA XREF: sub_4017EE+92o
.data:004071F4					       ; sub_4017EE+CCo
.data:004071F6		       align 4
.data:004071F8 ; CHAR a__iraoffU[]
.data:004071F8 a__iraoffU      db '__IRAOFF:%u',0      ; DATA XREF: sub_4017EE+60o
.data:00407204		       align 10h
.data:00407210 off_407210      dd offset __exit	       ; DATA XREF: __amsg_exit+1Cr
.data:00407214 dword_407214    dd 2		       ; DATA XREF: __FF_MSGBANNER+Er
.data:00407214					       ; __NMSG_WRITE+46r
.data:00407218 ; LPCRITICAL_SECTION dword_407218
.data:00407218 dword_407218    dd 0		       ; DATA XREF: __lock+7r
.data:00407218					       ; __unlock+6r
.data:0040721C ; LPCRITICAL_SECTION off_40721C
.data:0040721C off_40721C      dd offset dword_409C70  ; DATA XREF: __mtinitlocks+1Fr
.data:00407220		       dd 7 dup(0)
.data:0040723C ; LPCRITICAL_SECTION off_40723C
.data:0040723C off_40723C      dd offset dword_409CA0  ; DATA XREF: __mtinitlocks+17r
.data:00407240		       dd 3 dup(0)
.data:0040724C ; LPCRITICAL_SECTION off_40724C
.data:0040724C off_40724C      dd offset dword_409CB8  ; DATA XREF: __mtinitlocks+Fr
.data:00407250		       dd 3 dup(0)
.data:0040725C ; LPCRITICAL_SECTION lpCriticalSection
.data:0040725C lpCriticalSection dd offset dword_409C88	; DATA XREF: __mtinitlocks+7r
.data:00407260		       dd 1Eh dup(0)
.data:004072D8		       dd 10h, 0
.data:004072E0 off_4072E0      dd offset off_4072E0    ; DATA XREF: sub_4029B0+Do
.data:004072E0					       ; sub_4029B0+69o ...
.data:004072E4 ; LPVOID	off_4072E4
.data:004072E4 off_4072E4      dd offset off_4072E0    ; DATA XREF: sub_4029B0:loc_402A30r
.data:004072E4					       ; sub_4029B0+89w ...
.data:004072E8		       dd offset dword_4072F8
.data:004072EC		       dd offset dword_4072F8
.data:004072F0 dword_4072F0    dd 0FFFFFFFFh	       ; DATA XREF: sub_4029B0r
.data:004072F0					       ; sub_402AF4:loc_402B41w
.data:004072F4		       dd 0FFFFFFFFh
.data:004072F8 dword_4072F8    dd 0F0h,	0F1h, 800h dup(0) ; DATA XREF: .data:004072E8o
.data:004072F8					       ; .data:004072ECo
.data:00409300 off_409300      dd offset off_4072E0    ; DATA XREF: sub_402AF4+15r
.data:00409300					       ; sub_402AF4+20w ...
.data:00409304 dword_409304    dd 1E0h		       ; DATA XREF: sub_401CA1+8Ar
.data:00409304					       ; sub_404BA5+A7r
.data:00409308 dword_409308    dd 19930520h, 3 dup(0)  ; DATA XREF: .text:004030A3o
.data:00409308					       ; __NLG_Notify+2o
.data:00409318 dword_409318    dd 0C0000005h, 0Bh, 0   ; DATA XREF: __initptd+4o
.data:00409324		       dd 0C000001Dh, 4, 0
.data:00409330		       dd 0C0000096h, 4, 0
.data:0040933C		       dd 0C000008Dh, 8, 0
.data:00409348		       dd 0C000008Eh, 8, 0
.data:00409354		       dd 0C000008Fh, 8, 0
.data:00409360		       dd 0C0000090h, 8, 0
.data:0040936C		       dd 0C0000091h, 8, 0
.data:00409378		       dd 0C0000092h, 8, 0
.data:00409384		       dd 0C0000093h, 8, 0
.data:00409390 dword_409390    dd 3		       ; DATA XREF: __XcptFilter+62r
.data:00409390					       ; __XcptFilter+86r
.data:00409394 dword_409394    dd 7		       ; DATA XREF: __XcptFilter+68r
.data:00409394					       ; __XcptFilter+8Cr
.data:00409398		       dd 78h
.data:0040939C dword_40939C    dd 0Ah		       ; DATA XREF: _xcptlookup+4r
.data:004093A0		       dd 0FFFFFFFFh, 0A00h, 7 dup(0)
.data:004093C4 ; DWORD dwTlsIndex
.data:004093C4 dwTlsIndex      dd 0FFFFFFFFh	       ; DATA XREF: __mtinit+Fw
.data:004093C4					       ; __mtinit+28r ...
.data:004093C8 dword_4093C8    dd 2		       ; DATA XREF: __NMSG_WRITE+Eo
.data:004093C8					       ; __NMSG_WRITE+28r
.data:004093CC off_4093CC      dd offset aR6002FloatingP ; DATA	XREF: __NMSG_WRITE+FCr
.data:004093CC					       ; __NMSG_WRITE+12Do
.data:004093CC					       ; "R6002\r\n- floating point not	loaded\r\"...
.data:004093D0		       dd 8, 4063ECh, 9, 4063C0h, 0Ah, 40639Ch,	10h, 406370h
.data:004093D0		       dd 11h, 406340h,	12h, 40631Ch, 13h, 4062F0h, 18h, 4062B8h
.data:004093D0		       dd 19h, 406290h,	1Ah, 406258h, 1Bh, 406220h, 1Ch, 4061F8h
.data:004093D0		       dd 78h, 4061E8h,	79h, 4061D8h, 7Ah, 4061C8h, 0FCh, 4061C4h
.data:004093D0		       dd 0FFh,	4061B4h
.data:00409458 dword_409458    dd 2 dup(0)	       ; DATA XREF: __NMSG_WRITE+1Bo
.data:00409460 byte_409460     db 1		       ; DATA XREF: __setmbcp+EDr
.data:00409461		       db 2, 4,	8
.data:00409464		       align 8
.data:00409468 dword_409468    dd 3A4h		       ; DATA XREF: __setmbcp+38o
.data:0040946C aVyv	       db '`�y�!',0            ; DATA XREF: __setmbcp+129o
.data:00409472		       align 8
.data:00409478 aJ	       db '��',0               ; DATA XREF: __setmbcp+CCo
.data:0040947B		       align 10h
.data:00409480 aBe	       db '��',0
.data:00409483		       align 8
.data:00409488		       dd 0FCE09F81h, 0
.data:00409490		       dd 0FC807E40h, 0
.data:00409498		       dd 3A8h,	0A3DAA3C1h, 20h, 5 dup(0)
.data:004094B8		       dd 0FE81h, 0
.data:004094C0		       dd 0FE40h, 0
.data:004094C8		       dd 3B5h,	0A3DAA3C1h, 20h, 5 dup(0)
.data:004094E8		       dd 0FE81h, 0
.data:004094F0		       dd 0FE41h, 0
.data:004094F8		       dd 3B6h,	0A2E4A2CFh, 0A2E5001Ah,	5BA2E8h, 4 dup(0)
.data:00409518		       dd 0FE81h, 0
.data:00409520		       dd 0FEA17E40h, 0
.data:00409528		       dd 551h,	0DA5EDA51h, 0DA5F0020h,	32DA6Ah, 4 dup(0)
.data:00409548		       dd 0DED8D381h, 0F9E0h, 0FE817E31h, 0
.data:00409558 dword_409558    dd 2 dup(0)	       ; DATA XREF: __setmbcp+45o
.data:00409560		       dd 1, 16h, 2 dup(2), 3, 2, 4, 18h, 5, 0Dh, 6, 9,	7, 0Ch
.data:00409560		       dd 8, 0Ch, 9, 0Ch, 0Ah, 7, 0Bh, 8, 0Ch, 16h, 0Dh, 16h
.data:00409560		       dd 0Fh, 2, 10h, 0Dh, 11h, 2 dup(12h), 2,	21h, 0Dh, 35h
.data:00409560		       dd 2, 41h, 0Dh, 43h, 2, 50h, 11h, 52h, 0Dh, 53h,	0Dh, 57h
.data:00409560		       dd 16h, 59h, 0Bh, 6Ch, 0Dh, 6Dh,	20h, 70h, 1Ch, 72h, 9
.data:00409560		       dd 6, 16h, 80h, 0Ah, 81h, 0Ah, 82h, 9, 83h, 16h,	84h, 0Dh
.data:00409560		       dd 91h, 29h, 9Eh, 0Dh, 0A1h, 2, 0A4h, 0Bh, 0A7h,	0Dh, 0B7h
.data:00409560		       dd 11h, 0CEh, 2,	0D7h, 0Bh, 718h, 0Ch
.data:004096C8 off_4096C8      dd offset __ctype+2     ; DATA XREF: _strtoxl:loc_403C24r
.data:004096C8					       ; _strtoxl:loc_403CE1r ...
.data:004096CC		       dd offset __ctype+2
.data:004096D0		       public __ctype
.data:004096D0 ; unsigned __int16 _ctype[]
.data:004096D0 __ctype	       dd    200000h	       ; DATA XREF: _x_ismbbtype+18r
.data:004096D0					       ; .data:off_4096C8o ...
.data:004096D4		       unicode 0, <	   (((((		  H>
.data:00409714		       dd 7 dup(100010h), 840010h, 4 dup(840084h), 100084h, 3 dup(100010h)
.data:00409714		       dd 3 dup(810081h), 0Ah dup(10001h), 3 dup(100010h), 3 dup(820082h)
.data:00409714		       dd 0Ah dup(20002h), 2 dup(100010h), 20h,	40h dup(0)
.data:004098D4 dword_4098D4    dd 1		       ; DATA XREF: _strtoxl:loc_403C0Cr
.data:004098D4					       ; _strtoxl:loc_403CC9r ...
.data:004098D8		       dd 2Eh, 1, 2 dup(43h), 20h dup(0)
.data:00409968		       dd 43h, 21h dup(0)
.data:004099F0		       dd offset off_4099F8
.data:004099F4		       align 8
.data:004099F8 off_4099F8      dd offset aSun	       ; DATA XREF: .data:004099F0o
.data:004099F8					       ; "Sun"
.data:004099FC		       dd offset aMon	       ; "Mon"
.data:00409A00		       dd offset aTue	       ; "Tue"
.data:00409A04		       dd offset aWed	       ; "Wed"
.data:00409A08		       dd offset aThu	       ; "Thu"
.data:00409A0C		       dd offset aFri	       ; "Fri"
.data:00409A10		       dd offset aSat	       ; "Sat"
.data:00409A14		       dd offset aSunday       ; "Sunday"
.data:00409A18		       dd offset aMonday       ; "Monday"
.data:00409A1C		       dd offset aTuesday      ; "Tuesday"
.data:00409A20		       dd offset aWednesday    ; "Wednesday"
.data:00409A24		       dd offset aThursday     ; "Thursday"
.data:00409A28		       dd offset aFriday       ; "Friday"
.data:00409A2C		       dd offset aSaturday     ; "Saturday"
.data:00409A30		       dd offset aJan	       ; "Jan"
.data:00409A34		       dd offset aFeb	       ; "Feb"
.data:00409A38		       dd offset aMar	       ; "Mar"
.data:00409A3C		       dd offset aApr	       ; "Apr"
.data:00409A40		       dd offset aMay	       ; "May"
.data:00409A44		       dd offset aJun	       ; "Jun"
.data:00409A48		       dd offset aJul	       ; "Jul"
.data:00409A4C		       dd offset aAug	       ; "Aug"
.data:00409A50		       dd offset aSep	       ; "Sep"
.data:00409A54		       dd offset aOct	       ; "Oct"
.data:00409A58		       dd offset aNov	       ; "Nov"
.data:00409A5C		       dd offset aDec	       ; "Dec"
.data:00409A60		       dd offset aJanuary      ; "January"
.data:00409A64		       dd offset aFebruary     ; "February"
.data:00409A68		       dd offset aMarch	       ; "March"
.data:00409A6C		       dd offset aApril	       ; "April"
.data:00409A70		       dd offset aMay	       ; "May"
.data:00409A74		       dd offset aJune	       ; "June"
.data:00409A78		       dd offset aJuly	       ; "July"
.data:00409A7C		       dd offset aAugust       ; "August"
.data:00409A80		       dd offset aSeptember    ; "September"
.data:00409A84		       dd offset aOctober      ; "October"
.data:00409A88		       dd offset aNovember     ; "November"
.data:00409A8C		       dd offset aDecember     ; "December"
.data:00409A90		       dd offset aAm	       ; "AM"
.data:00409A94		       dd offset aPm	       ; "PM"
.data:00409A98		       dd offset aMDYy	       ; "M/d/yy"
.data:00409A9C		       dd offset aDdddMmmmDdYyyy ; "dddd, MMMM dd, yyyy"
.data:00409AA0		       dd offset aHMmSs	       ; "H:mm:ss"
.data:00409AA4		       align 8
.data:00409AA8 dword_409AA8    dd 2Eh, 0	       ; DATA XREF: .data:00409AB0o
.data:00409AB0		       dd offset dword_409AA8
.data:00409AB4		       dd offset dword_409E98
.data:00409AB8		       dd offset dword_409E98
.data:00409ABC		       dd offset dword_409E98
.data:00409AC0		       dd offset dword_409E98
.data:00409AC4		       dd offset dword_409E98
.data:00409AC8		       dd offset dword_409E98
.data:00409ACC		       dd offset dword_409E98
.data:00409AD0		       dd offset dword_409E98
.data:00409AD4		       dd offset dword_409E98
.data:00409AD8		       dd 2 dup(7F7F7F7Fh), 409AB0h, 3 dup(0)
.data:00409AF0 dword_409AF0    dd 7080h, 1, 0FFFFF1F0h,	545350h, 0Fh dup(0)
.data:00409AF0					       ; DATA XREF: .data:00409B7Co
.data:00409B3C dword_409B3C    dd 544450h, 0Fh dup(0)  ; DATA XREF: .data:00409B80o
.data:00409B7C		       dd offset dword_409AF0+0Ch
.data:00409B80		       dd offset dword_409B3C
.data:00409B84		       align 8
.data:00409B88		       dd 0FFFFFFFFh, 3	dup(0)
.data:00409B98		       dd 0FFFFFFFFh, 5	dup(0)
.data:00409BB0		       dd 0FFFFFFFFh, 1Eh, 3Bh,	5Ah, 78h, 97h, 0B5h, 0D4h, 0F3h
.data:00409BB0		       dd 111h,	130h, 14Eh, 16Dh, 0FFFFFFFFh, 1Eh, 3Ah,	59h, 77h
.data:00409BB0		       dd 96h, 0B4h, 0D3h, 0F2h, 110h, 12Fh, 14Dh, 16Ch
.data:00409C18 dword_409C18    dd 0		       ; DATA XREF: WinMain(x,x,x,x)+18w
.data:00409C18					       ; WinMain(x,x,x,x)+141w	...
.data:00409C1C		       align 10h
.data:00409C20 dword_409C20    dd 0		       ; DATA XREF: start+52w
.data:00409C24 dword_409C24    dd 0		       ; DATA XREF: start+49w
.data:00409C28 dword_409C28    dd 0		       ; DATA XREF: start+3Ew
.data:00409C2C dword_409C2C    dd 0		       ; DATA XREF: start+30w
.data:00409C30 dword_409C30    dd 0		       ; DATA XREF: WinMain(x,x,x,x)+86r
.data:00409C30					       ; WinMain(x,x,x,x)+151r	...
.data:00409C34 dword_409C34    dd 0		       ; DATA XREF: WinMain(x,x,x,x):loc_401095r
.data:00409C34					       ; __setargv+89w
.data:00409C38		       dd 0
.data:00409C3C dword_409C3C    dd 0		       ; DATA XREF: __setenvp+44w
.data:00409C40		       dd 3 dup(0)
.data:00409C4C dword_409C4C    dd 0		       ; DATA XREF: __setargv+2Ew
.data:00409C50		       dd 0
.data:00409C54 byte_409C54     db 0		       ; DATA XREF: _doexit+32w
.data:00409C55		       align 4
.data:00409C58 dword_409C58    dd 0		       ; DATA XREF: _doexit+2Cw
.data:00409C5C dword_409C5C    dd 0		       ; DATA XREF: _doexit+9r
.data:00409C5C					       ; _doexit+97w
.data:00409C60 ; char *dword_409C60
.data:00409C60 dword_409C60    dd 0		       ; DATA XREF: start+96w
.data:00409C60					       ; __setenvp:loc_4033A1r	...
.data:00409C64		       align 8
.data:00409C68 dword_409C68    dd 0		       ; DATA XREF: __amsg_exitr
.data:00409C68					       ; _fast_error_exitr ...
.data:00409C6C		       align 10h
.data:00409C70 dword_409C70    dd 6 dup(0)	       ; DATA XREF: .data:off_40721Co
.data:00409C88 dword_409C88    dd 6 dup(0)	       ; DATA XREF: .data:lpCriticalSectiono
.data:00409CA0 dword_409CA0    dd 6 dup(0)	       ; DATA XREF: .data:off_40723Co
.data:00409CB8 dword_409CB8    dd 6 dup(0)	       ; DATA XREF: .data:off_40724Co
.data:00409CD0 dword_409CD0    dd 0		       ; DATA XREF: sub_402B4A+4Bw
.data:00409CD0					       ; sub_402C63+2Dw ...
.data:00409CD4 dword_409CD4    dd 0		       ; DATA XREF: _mallocr
.data:00409CD4					       ; sub_404BA5+104r
.data:00409CD8 dword_409CD8    dd 0		       ; DATA XREF: __callnewhr
.data:00409CDC ; CHAR Filename[260]
.data:00409CDC Filename	       db 104h dup(0)	       ; DATA XREF: __setargv:loc_40345Fo
.data:00409DE0 dword_409DE0    dd 0		       ; DATA XREF: ___crtGetEnvironmentStringsA+2r
.data:00409DE0					       ; ___crtGetEnvironmentStringsA+23w ...
.data:00409DE4 dword_409DE4    dd 0		       ; DATA XREF: __FF_MSGBANNER+21r
.data:00409DE8 dword_409DE8    dd 0		       ; DATA XREF: __setmbcp:loc_40448Ar
.data:00409DE8					       ; _getSystemCP+4w ...
.data:00409DEC dword_409DEC    dd 0		       ; DATA XREF: ___crtMessageBoxA+3r
.data:00409DEC					       ; ___crtMessageBoxA+2Ew	...
.data:00409DF0 dword_409DF0    dd 0		       ; DATA XREF: ___crtMessageBoxA+43w
.data:00409DF0					       ; ___crtMessageBoxA:loc_404D31r
.data:00409DF4 dword_409DF4    dd 0		       ; DATA XREF: ___crtMessageBoxA+4Aw
.data:00409DF4					       ; ___crtMessageBoxA+60r
.data:00409DF8 dword_409DF8    dd 2 dup(0)	       ; DATA XREF: __strcmpi+Co
.data:00409DF8					       ; __strnicmp+17o
.data:00409E00 ; LCID dword_409E00
.data:00409E00 dword_409E00    dd 0		       ; DATA XREF: _toupper+3r
.data:00409E00					       ; _toupper_0+4r	...
.data:00409E04		       align 10h
.data:00409E10 dword_409E10    dd 0		       ; DATA XREF: _getSystemCP+3Ar
.data:00409E10					       ; ___crtLCMapStringA+C0r ...
.data:00409E14		       align 8
.data:00409E18 dword_409E18    dd 0		       ; DATA XREF: ___crtLCMapStringA+28r
.data:00409E18					       ; ___crtLCMapStringA+4Cw ...
.data:00409E1C dword_409E1C    dd 0		       ; DATA XREF: ___crtGetStringTypeA+26r
.data:00409E1C					       ; ___crtGetStringTypeA:loc_4052E0w
.data:00409E20		       dd 1Eh dup(0)
.data:00409E98 dword_409E98    dd 34h dup(0)	       ; DATA XREF: .data:00409AB4o
.data:00409E98					       ; .data:00409AB8o ...
.data:00409F68 dword_409F68    dd 0		       ; DATA XREF: _toupper+2Cr
.data:00409F68					       ; __strcmpi+5Ar	...
.data:00409F6C ; volatile LONG Addend
.data:00409F6C Addend	       dd 0		       ; DATA XREF: _toupper+1Fo
.data:00409F6C					       ; __strcmpi:notclocalew	...
.data:00409F70 ; UINT CodePage
.data:00409F70 CodePage	       dd 0		       ; DATA XREF: __setmbcp+1Br
.data:00409F70					       ; __setmbcp+79w	...
.data:00409F74		       align 10h
.data:00409F80 dword_409F80    dd 3 dup(0)	       ; DATA XREF: __setmbcp+12Fo
.data:00409F80					       ; __setmbcp+179o ...
.data:00409F8C dword_409F8C    dd 0		       ; DATA XREF: __setmbcp+114w
.data:00409F8C					       ; __setmbcp+168w ...
.data:00409F90		       align 20h
.data:00409FA0 byte_409FA0     db 0		       ; DATA XREF: _setSBUpLow:loc_404666w
.data:00409FA0					       ; _setSBUpLow:loc_404683w ...
.data:00409FA1		       align 4
.data:00409FA4		       dd 17h dup(0)
.data:0040A000		       dd 28h dup(?)
.data:0040A0A0 byte_40A0A0     db ?		       ; DATA XREF: __setmbcp+6Eo
.data:0040A0A0					       ; __setmbcp+BEo	...
.data:0040A0A1 byte_40A0A1     db ?		       ; DATA XREF: _parse_cmdline+3Fr
.data:0040A0A1					       ; _parse_cmdline+84r ...
.data:0040A0A2		       align 4
.data:0040A0A4		       dd 40h dup(?)
.data:0040A1A4 ; LCID Locale
.data:0040A1A4 Locale	       dd ?		       ; DATA XREF: __setmbcp+64w
.data:0040A1A4					       ; __setmbcp+137w ...
.data:0040A1A8		       align 20h
.data:0040A1C0 dword_40A1C0    dd ?		       ; DATA XREF: __ioinit:loc_4037E9w
.data:0040A1C0					       ; __ioinit+4Br ...
.data:0040A1C4 dword_40A1C4    dd 3Fh dup(?)	       ; DATA XREF: __ioinit+98o
.data:0040A2C0 ; UINT uNumber
.data:0040A2C0 uNumber	       dd ?		       ; DATA XREF: __ioinit+28w
.data:0040A2C0					       ; __ioinit:loc_403857r ...
.data:0040A2C4 dword_40A2C4    dd ?		       ; DATA XREF: ___sbh_heap_init+3Cw
.data:0040A2C4					       ; ___sbh_alloc_new_region+5r ...
.data:0040A2C8 dword_40A2C8    dd ?		       ; DATA XREF: sub_4021D2+23Ar
.data:0040A2C8					       ; sub_4021D2+25Ar ...
.data:0040A2CC dword_40A2CC    dd ?		       ; DATA XREF: ___sbh_heap_init+31w
.data:0040A2CC					       ; sub_4021D2+311w ...
.data:0040A2D0 ; void *dword_40A2D0
.data:0040A2D0 dword_40A2D0    dd ?		       ; DATA XREF: ___sbh_heap_init+21w
.data:0040A2D0					       ; sub_4021D2+22Dr ...
.data:0040A2D4 dword_40A2D4    dd ?		       ; DATA XREF: ___sbh_heap_init+28w
.data:0040A2D4					       ; ___sbh_find_blockr ...
.data:0040A2D8 ; LPVOID	lpMem
.data:0040A2D8 lpMem	       dd ?		       ; DATA XREF: ___sbh_heap_init+15w
.data:0040A2D8					       ; ___sbh_find_block+8r ...
.data:0040A2DC dword_40A2DC    dd ?		       ; DATA XREF: sub_401CA1+30r
.data:0040A2DC					       ; ___sbh_heap_init+36w ...
.data:0040A2E0 ; HANDLE	hHeap
.data:0040A2E0 hHeap	       dd ?		       ; DATA XREF: sub_401B7A+CEr
.data:0040A2E0					       ; sub_401CA1+E1r ...
.data:0040A2E4 dword_40A2E4    dd ?		       ; DATA XREF: sub_401B7A+2Er
.data:0040A2E4					       ; sub_401CA1+23r ...
.data:0040A2E8 dword_40A2E8    dd ?		       ; DATA XREF: start+8Cw
.data:0040A2E8					       ; __wincmdln+Fr	...
.data:0040A2EC dword_40A2EC    dd ?		       ; DATA XREF: __setenvp+ADw
.data:0040A2F0 dword_40A2F0    dd ?		       ; DATA XREF: __wincmdlnr
.data:0040A2F0					       ; __setenvp+3r ...
.data:0040A2F4 dword_40A2F4    dd ?		       ; DATA XREF: _doexit+43r
.data:0040A2F8 dword_40A2F8    dd ?		       ; DATA XREF: _doexit+3Ar
.data:0040A2F8					       ; _doexit+5Cr
.data:0040A2FC dword_40A2FC    dd ?		       ; DATA XREF: __cinitr
.data:0040A300		       align 1000h
.data:0040A300 _data	       ends
.data:0040A300
.data:0040A300
.data:0040A300		       end start
