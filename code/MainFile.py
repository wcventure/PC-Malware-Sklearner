import os
from sklearn.metrics import roc_curve, auc
from sklearn.externals import joblib
import matplotlib.pyplot as plt

#os.system("Creating_BM_trainingData.py")
#os.system("Creating_BM_trainingModel.py")
#os.system("Creating_BM_submission.py")

"""
# 获取某文件夹下各个文件名的列表 #
#path = 'D:/malware'
#path = 'D:/softwareDownload/360/其他软件/'
path = 'D:/实验数据/malware_dataset/dasmalwerk-data-split/'
for i in os.walk(path):
    for each in i[2]:
        print('idaq -c -A -S"idc\\myanalysis.idc" "' + i[0] + '/' + each + '"')
"""

### CV FIG ###
"""
Y = joblib.load("result/Y.save")
KNN3pred= joblib.load("result/KNN3pred.save")
KNN3prob = joblib.load("result/KNN3prob.save")
SGDpred = joblib.load("result/SGDpred.save")
SGDprob = joblib.load("result/SGDprob.save")
MultinomialNBpred = joblib.load("result/MultinomialNBpred.save")
MultinomialNBprob = joblib.load("result/MultinomialNBprob.save")
GNBpred = joblib.load("result/GNBpred.save")
GNBprob = joblib.load("result/GNBprob.save")
BernoulliNBpred = joblib.load("result/Bernoullipred.save")
BernoulliNBprob = joblib.load("result/Bernoulliprob.save")
RFginipred = joblib.load("result/RFginipred.save")
RFginiprob = joblib.load("result/RFginiprob.save")
DTentropypred = joblib.load("result/DTentropypred.save")
DTentropyprob = joblib.load("result/DTentropyprob.save")
SVMrbfpred = joblib.load("result/SVMrbfpred.save")
SVMrbfprob = joblib.load("result/SVMrbfprob.save")
SVMsigmoidpred = joblib.load("result/SVMsigmoidpred.save")
SVMsigmoidprob = joblib.load("result/SVMsigmoidprob.save")
#actual = [1,1,1,0,0,0,1]
#predictions = [0.9,0.9,0.9,0.1,0.1,0.2,0.3]
actual = Y
predictions = MultinomialNBprob[:,1]

plt.title('ROC')

##  1  ##
actual = Y
predictions = KNN3prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'g',
label='KNN AUC = %0.4f'% roc_auc)
##  2  ##
actual = Y
predictions = RFginiprob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'r',
label='Random Forest(entropy) AUC = %0.4f'% roc_auc)
##  3  ##
actual = Y
predictions = DTentropyprob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'y--',
label='Decision tree(entropy) AUC = %0.4f'% roc_auc)
##  4  ##
actual = Y
predictions = BernoulliNBprob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'm--',
label='Bernoulli NB AUC = %0.4f'% roc_auc)
##  5  ##
actual = Y
predictions = GNBprob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'r:',
label='Gaussian NB AUC = %0.4f'% roc_auc)
##  6  ##
actual = Y
predictions = MultinomialNBprob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'c',
label='Multinomia NB AUC = %0.4f'% roc_auc)
##  7  ##
actual = Y
predictions = SGDprob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'b',
label='SGD classifier AUC = %0.4f'% roc_auc)
##  8  ##
actual = Y
predictions = SVMrbfprob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'b--',
label='SVM (kernel = rbf) AUC = %0.4f'% roc_auc)
##  9  ##
actual = Y
predictions = SVMsigmoidprob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'g--',
label='SVM (kernel = sigmoid) AUC = %0.4f'% roc_auc)

plt.legend(loc='lower right')
plt.plot([0,1],[0,1],'k:')
plt.xlim([-0.05,1.05])
plt.ylim([-0.05,1.05])
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.show()
"""

### RF feature FIG ###
"""
Y = joblib.load("f_result/Y.save")
RF_opcode_pred = joblib.load("f_result/RF_opcode_pred.save")
RF_opcode_prob = joblib.load("f_result/RF_opcode_prob.save")
RF_data_pred = joblib.load("f_result/RF_data_pred.save")
RF_data_prob = joblib.load("f_result/RF_data_prob.save")
RF_dll_pred = joblib.load("f_result/RF_dll_pred.save")
RF_dll_prob = joblib.load("f_result/RF_dll_prob.save")
RF_dataopcode_pred = joblib.load("f_result/RF_data+opcode_pred.save")
RF_dataopcode_prob = joblib.load("f_result/RF_data+opcode_prob.save")
RF_datadll_pred = joblib.load("f_result/RF_data+dll_pred.save")
RF_datadll_prob = joblib.load("f_result/RF_data+dll_prob.save")
RF_opcodedll_pred = joblib.load("f_result/RF_opcode+dll_pred.save")
RF_opcodedll_prob = joblib.load("f_result/RF_opcode+dll_prob.save")
RF_pred = joblib.load("result/RFginipred.save")
RF_prob = joblib.load("result/RFginiprob.save")

#actual = [1,1,1,0,0,0,1]
#predictions = [0.9,0.9,0.9,0.1,0.1,0.2,0.3]

plt.title('Random Forest')
##  1  ##
actual = Y
predictions = RF_opcode_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'b',
label='Opcode feature AUC = %0.4f'% roc_auc)
##  2  ##
actual = Y
predictions = RF_data_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'y',
label='Type feature AUC = %0.4f'% roc_auc)
##  3  ##
actual = Y
predictions = RF_dll_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'c',
label='Library feature AUC = %0.4f'% roc_auc)
##  4  ##
actual = Y
predictions = RF_dataopcode_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'g',
label='Type + Opcode feature AUC = %0.4f'% roc_auc)
##  5  ##
actual = Y
predictions = RF_datadll_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'm',
label='Type + Library feature AUC = %0.4f'% roc_auc)
##  6  ##
actual = Y
predictions = RF_opcodedll_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'k',
label='Opcode + Library feature AUC = %0.4f'% roc_auc)
##  7  ##
actual = Y
predictions = RF_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'r',
label='All feature AUC = %0.4f'% roc_auc)

plt.legend(loc='lower right')
plt.plot([0,1],[0,1],'k:')
plt.xlim([-0.05,1.05])
plt.ylim([-0.05,1.05])
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.show()
"""

### KNN feature FIG ###
"""
Y = joblib.load("f_result/Y.save")
KNN3_opcode_pred = joblib.load("f_result/KNN3_opcode_pred.save")
KNN3_opcode_prob = joblib.load("f_result/KNN3_opcode_prob.save")
KNN3_data_pred = joblib.load("f_result/KNN3_data_pred.save")
KNN3_data_prob = joblib.load("f_result/KNN3_data_prob.save")
KNN3_dll_pred = joblib.load("f_result/KNN3_dll_pred.save")
KNN3_dll_prob = joblib.load("f_result/KNN3_dll_prob.save")
KNN3_dataopcode_pred = joblib.load("f_result/KNN3_data+opcode_pred.save")
KNN3_dataopcode_prob = joblib.load("f_result/KNN3_data+opcode_prob.save")
KNN3_datadll_pred = joblib.load("f_result/KNN3_data+dll_pred.save")
KNN3_datadll_prob = joblib.load("f_result/KNN3_data+dll_prob.save")
KNN3_opcodedll_pred = joblib.load("f_result/KNN3_opcode+dll_pred.save")
KNN3_opcodedll_prob = joblib.load("f_result/KNN3_opcode+dll_prob.save")
KNN3_pred = joblib.load("result/KNN3pred.save")
KNN3_prob = joblib.load("result/KNN3prob.save")

#actual = [1,1,1,0,0,0,1]
#predictions = [0.9,0.9,0.9,0.1,0.1,0.2,0.3]

plt.title('KNN')
##  1  ##
actual = Y
predictions = KNN3_opcode_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'b',
label='Opcode feature AUC = %0.4f'% roc_auc)
##  2  ##
actual = Y
predictions = KNN3_data_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'y',
label='Type feature AUC = %0.4f'% roc_auc)
##  3  ##
actual = Y
predictions = KNN3_dll_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'c',
label='Library feature AUC = %0.4f'% roc_auc)
##  4  ##
actual = Y
predictions = KNN3_dataopcode_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'g',
label='Type + Opcode feature AUC = %0.4f'% roc_auc)
##  5  ##
actual = Y
predictions = KNN3_datadll_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'm',
label='Type + Library feature AUC = %0.4f'% roc_auc)
##  6  ##
actual = Y
predictions = KNN3_opcodedll_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'k',
label='Opcode + Library feature AUC = %0.4f'% roc_auc)
##  7  ##
actual = Y
predictions = KNN3_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'r',
label='all feature AUC = %0.4f'% roc_auc)

plt.legend(loc='lower right')
plt.plot([0,1],[0,1],'k:')
plt.xlim([-0.05,1.05])
plt.ylim([-0.05,1.05])
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.show()
"""


### SGD feature FIG ###
"""
Y = joblib.load("f_result/Y.save")
SGD_opcode_pred = joblib.load("f_result/SGD_opcode_pred.save")
SGD_opcode_prob = joblib.load("f_result/SGD_opcode_prob.save")
SGD_data_pred = joblib.load("f_result/SGD_data_pred.save")
SGD_data_prob = joblib.load("f_result/SGD_data_prob.save")
SGD_dll_pred = joblib.load("f_result/SGD_dll_pred.save")
SGD_dll_prob = joblib.load("f_result/SGD_dll_prob.save")
SGD_dataopcode_pred = joblib.load("f_result/SGD_data+opcode_pred.save")
SGD_dataopcode_prob = joblib.load("f_result/SGD_data+opcode_prob.save")
SGD_datadll_pred = joblib.load("f_result/SGD_data+dll_pred.save")
SGD_datadll_prob = joblib.load("f_result/SGD_data+dll_prob.save")
SGD_opcodedll_pred = joblib.load("f_result/SGD_opcode+dll_pred.save")
SGD_opcodedll_prob = joblib.load("f_result/SGD_opcode+dll_prob.save")
SGD_pred = joblib.load("result/SGDpred.save")
SGD_prob = joblib.load("result/SGDprob.save")

#actual = [1,1,1,0,0,0,1]
#predictions = [0.9,0.9,0.9,0.1,0.1,0.2,0.3]

plt.title('SGD classifier')
##  1  ##
actual = Y
predictions = SGD_opcode_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'b',
label='Opcode feature AUC = %0.4f'% roc_auc)
##  2  ##
actual = Y
predictions = SGD_data_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'y',
label='Type feature AUC = %0.4f'% roc_auc)
##  3  ##
actual = Y
predictions = SGD_dll_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'c',
label='Library feature AUC = %0.4f'% roc_auc)
##  4  ##
actual = Y
predictions = SGD_dataopcode_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'g',
label='Type + Opcode feature AUC = %0.4f'% roc_auc)
##  5  ##
actual = Y
predictions = SGD_datadll_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'm',
label='Type + Library feature AUC = %0.4f'% roc_auc)
##  6  ##
actual = Y
predictions = SGD_opcodedll_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'k',
label='Opcode + Library feature AUC = %0.4f'% roc_auc)
##  7  ##
actual = Y
predictions = SGD_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'r',
label='all feature AUC = %0.4f'% roc_auc)

plt.legend(loc='lower right')
plt.plot([0,1],[0,1],'k:')
plt.xlim([-0.05,1.05])
plt.ylim([-0.05,1.05])
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.show()
"""

### Multinomial Native Bayes feature FIG ###
"""
Y = joblib.load("f_result/Y.save")
MultinomialNB_opcode_pred = joblib.load("f_result/MultinomialNB_opcode_pred.save")
MultinomialNB_opcode_prob = joblib.load("f_result/MultinomialNB_opcode_prob.save")
MultinomialNB_data_pred = joblib.load("f_result/MultinomialNB_data_pred.save")
MultinomialNB_data_prob = joblib.load("f_result/MultinomialNB_data_prob.save")
MultinomialNB_dll_pred = joblib.load("f_result/MultinomialNB_dll_pred.save")
MultinomialNB_dll_prob = joblib.load("f_result/MultinomialNB_dll_prob.save")
MultinomialNB_dataopcode_pred = joblib.load("f_result/MultinomialNB_data+opcode_pred.save")
MultinomialNB_dataopcode_prob = joblib.load("f_result/MultinomialNB_data+opcode_prob.save")
MultinomialNB_datadll_pred = joblib.load("f_result/MultinomialNB_data+dll_pred.save")
MultinomialNB_datadll_prob = joblib.load("f_result/MultinomialNB_data+dll_prob.save")
MultinomialNB_opcodedll_pred = joblib.load("f_result/MultinomialNB_opcode+dll_pred.save")
MultinomialNB_opcodedll_prob = joblib.load("f_result/MultinomialNB_opcode+dll_prob.save")
MultinomialNB_pred = joblib.load("result/MultinomialNBpred.save")
MultinomialNB_prob = joblib.load("result/MultinomialNBprob.save")

#actual = [1,1,1,0,0,0,1]
#predictions = [0.9,0.9,0.9,0.1,0.1,0.2,0.3]

plt.title('Multinomial Native Bayes')
##  1  ##
actual = Y
predictions = MultinomialNB_opcode_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'b',
label='Opcode feature AUC = %0.4f'% roc_auc)
##  2  ##
actual = Y
predictions = MultinomialNB_data_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'y',
label='Type feature AUC = %0.4f'% roc_auc)
##  3  ##
actual = Y
predictions = MultinomialNB_dll_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'c',
label='Library feature AUC = %0.4f'% roc_auc)
##  4  ##
actual = Y
predictions = MultinomialNB_dataopcode_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'g',
label='Type + Opcode feature AUC = %0.4f'% roc_auc)
##  5  ##
actual = Y
predictions = MultinomialNB_datadll_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'm',
label='Type + Library feature AUC = %0.4f'% roc_auc)
##  6  ##
actual = Y
predictions = MultinomialNB_opcodedll_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'm',
label='Opcode + Library feature AUC = %0.4f'% roc_auc)
##  7  ##
actual = Y
predictions = MultinomialNB_prob[:,1]
false_positive_rate, true_positive_rate, thresholds = roc_curve(actual, predictions)
roc_auc = auc(false_positive_rate, true_positive_rate)
plt.plot(false_positive_rate, true_positive_rate, 'r',
label='All feature AUC = %0.4f'% roc_auc)

plt.legend(loc='lower right')
plt.plot([0,1],[0,1],'k:')
plt.xlim([-0.05,1.05])
plt.ylim([-0.05,1.05])
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.show()
"""